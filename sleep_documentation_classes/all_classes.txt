package com.baidu.android.bbalbs.common.security;

import androidx.core.view.MotionEventCompat;
import com.oudmon.ble.base.communication.Constants;
import com.oudmon.ble.base.communication.LargeDataHandler;
import com.realsil.sdk.bbpro.params.Mmi;
import java.io.UnsupportedEncodingException;

/* loaded from: classes.dex */
public final class Base64 {
    private static final byte[] MAP = {65, 66, Constants.CMD_GET_STEP_SOMEDAY_DETAIL, Constants.CMD_GET_SLEEP, 69, Constants.CMD_QUERY_DATA_DISTRIBUTION, LargeDataHandler.ACTION_Blood_Sugar, 72, 73, LargeDataHandler.ACTION_AVATAR_Device, 75, LargeDataHandler.ACTION_SMS_QUICK, 77, 78, 79, 80, 81, 82, Mmi.AU_MMI_DEV_LINK_LAST_DEVICE, 84, Mmi.AU_MMI_DEV_POWER_ON_BUTTON_RELEASE, 86, Mmi.AU_MMI_DEV_POWER_OFF_BUTTON_RELEASE, Mmi.AU_MMI_DEV_FACTORY_RESET_TO_DEFAULT, Mmi.AU_MMI_DEV_DISCONNECT_ALL_LINK, Mmi.AU_MMI_DEV_FACTORY_RESET_BY_SPP, 97, Mmi.AU_MMI_NFC_DETECT, Mmi.AU_MMI_AUDIO_EFFECT_NEXT, Mmi.AU_MMI_AUDIO_EFFECT_PREVIOUS, Mmi.AU_MMI_AUDIO_PASS_THROUGH, Mmi.AU_MMI_SWITCH_NEXT_VOICE_PROMPT_LANGUAGE, Mmi.AU_MMI_OUTPUT_INDICATION_1, Mmi.AU_MMI_OUTPUT_INDICATION_2, 105, 106, Mmi.AU_MMI_AUDIO_EQ_SWITCH, 108, 109, Constants.CMD_HEALTH_PPG_DATA, 111, 112, Mmi.AU_MMI_RWS_LINKBACK, 114, 115, 116, Mmi.AU_MMI_RWS_BUNDLE_PAIRING, Mmi.AU_MMI_RWS_RESET_TO_DEFAULT, 119, 120, Mmi.AU_MMI_RWS_SYNC_RINGTONE, Mmi.AU_MMI_ENTER_PAIRING_MODE_LONG_PRESS, 48, 49, 50, 51, Mmi.AU_MMAU_MMI_AV_FWD, Mmi.AU_MMI_AV_BWD, 54, 55, 56, 57, Constants.CMD_MENSTRUATION, 47};

    private Base64() {
    }

    public static byte[] decode(byte[] bArr) {
        return decode(bArr, bArr.length);
    }

    public static byte[] decode(byte[] bArr, int i) {
        byte b;
        int i2;
        int i3 = (i / 4) * 3;
        if (i3 == 0) {
            return new byte[0];
        }
        byte[] bArr2 = new byte[i3];
        int i4 = i;
        int i5 = 0;
        while (true) {
            byte b2 = bArr[i4 - 1];
            b = 10;
            if (b2 != 10 && b2 != 13 && b2 != 32 && b2 != 9) {
                if (b2 != 61) {
                    break;
                }
                i5++;
            }
            i4--;
        }
        int i6 = 0;
        int i7 = 0;
        int i8 = 0;
        int i9 = 0;
        while (i6 < i4) {
            byte b3 = bArr[i6];
            if (b3 != b && b3 != 13 && b3 != 32 && b3 != 9) {
                if (b3 >= 65 && b3 <= 90) {
                    i2 = b3 - 65;
                } else if (b3 >= 97 && b3 <= 122) {
                    i2 = b3 - 71;
                } else if (b3 >= 48 && b3 <= 57) {
                    i2 = b3 + 4;
                } else if (b3 == 43) {
                    i2 = 62;
                } else {
                    if (b3 != 47) {
                        return null;
                    }
                    i2 = 63;
                }
                i7 = ((byte) i2) | (i7 << 6);
                if (i9 % 4 == 3) {
                    int i10 = i8 + 1;
                    bArr2[i8] = (byte) ((16711680 & i7) >> 16);
                    int i11 = i10 + 1;
                    bArr2[i10] = (byte) ((65280 & i7) >> 8);
                    bArr2[i11] = (byte) (i7 & 255);
                    i8 = i11 + 1;
                }
                i9++;
            }
            i6++;
            b = 10;
        }
        if (i5 > 0) {
            int i12 = i7 << (i5 * 6);
            int i13 = i8 + 1;
            bArr2[i8] = (byte) ((i12 & 16711680) >> 16);
            if (i5 == 1) {
                i8 = i13 + 1;
                bArr2[i13] = (byte) ((i12 & MotionEventCompat.ACTION_POINTER_INDEX_MASK) >> 8);
            } else {
                i8 = i13;
            }
        }
        byte[] bArr3 = new byte[i8];
        System.arraycopy(bArr2, 0, bArr3, 0, i8);
        return bArr3;
    }

    public static String encode(byte[] bArr, String str) throws UnsupportedEncodingException {
        int length = (bArr.length * 4) / 3;
        byte[] bArr2 = new byte[length + (length / 76) + 3];
        int length2 = bArr.length - (bArr.length % 3);
        int i = 0;
        int i2 = 0;
        for (int i3 = 0; i3 < length2; i3 += 3) {
            int i4 = i + 1;
            byte[] bArr3 = MAP;
            bArr2[i] = bArr3[(bArr[i3] & 255) >> 2];
            int i5 = i4 + 1;
            int i6 = i3 + 1;
            bArr2[i4] = bArr3[((bArr[i3] & 3) << 4) | ((bArr[i6] & 255) >> 4)];
            int i7 = i5 + 1;
            int i8 = i3 + 2;
            bArr2[i5] = bArr3[((bArr[i6] & 15) << 2) | ((bArr[i8] & 255) >> 6)];
            i = i7 + 1;
            bArr2[i7] = bArr3[bArr[i8] & 63];
            if ((i - i2) % 76 == 0 && i != 0) {
                bArr2[i] = 10;
                i2++;
                i++;
            }
        }
        int length3 = bArr.length % 3;
        if (length3 == 1) {
            int i9 = i + 1;
            byte[] bArr4 = MAP;
            bArr2[i] = bArr4[(bArr[length2] & 255) >> 2];
            int i10 = i9 + 1;
            bArr2[i9] = bArr4[(bArr[length2] & 3) << 4];
            int i11 = i10 + 1;
            bArr2[i10] = 61;
            i = i11 + 1;
            bArr2[i11] = 61;
        } else if (length3 == 2) {
            int i12 = i + 1;
            byte[] bArr5 = MAP;
            bArr2[i] = bArr5[(bArr[length2] & 255) >> 2];
            int i13 = i12 + 1;
            int i14 = (bArr[length2] & 3) << 4;
            int i15 = length2 + 1;
            bArr2[i12] = bArr5[((bArr[i15] & 255) >> 4) | i14];
            int i16 = i13 + 1;
            bArr2[i13] = bArr5[(bArr[i15] & 15) << 2];
            i = i16 + 1;
            bArr2[i16] = 61;
        }
        return new String(bArr2, 0, i, str);
    }
}
package com.google.android.gms.fitness.data;

/* compiled from: com.google.android.gms:play-services-fitness@@21.1.0 */
/* loaded from: classes2.dex */
public final class SleepStages {
    public static final int AWAKE = 1;
    public static final int OUT_OF_BED = 3;
    public static final int SLEEP = 2;
    public static final int SLEEP_DEEP = 5;
    public static final int SLEEP_LIGHT = 4;
    public static final int SLEEP_REM = 6;

    private SleepStages() {
    }
}
package com.google.android.gms.location;

import android.content.Intent;
import android.os.Parcel;
import android.os.Parcelable;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelableSerializer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* compiled from: com.google.android.gms:play-services-location@@20.0.0 */
/* loaded from: classes2.dex */
public class SleepClassifyEvent extends AbstractSafeParcelable {
    public static final Parcelable.Creator<SleepClassifyEvent> CREATOR = new zzcb();
    private final int zza;
    private final int zzb;
    private final int zzc;
    private final int zzd;
    private final int zze;
    private final int zzf;
    private final int zzg;
    private final boolean zzh;
    private final int zzi;

    public SleepClassifyEvent(int i, int i2, int i3, int i4, int i5, int i6, int i7, boolean z, int i8) {
        this.zza = i;
        this.zzb = i2;
        this.zzc = i3;
        this.zzd = i4;
        this.zze = i5;
        this.zzf = i6;
        this.zzg = i7;
        this.zzh = z;
        this.zzi = i8;
    }

    public static List<SleepClassifyEvent> extractEvents(Intent intent) {
        Preconditions.checkNotNull(intent);
        if (!hasEvents(intent)) {
            return Collections.emptyList();
        }
        ArrayList arrayList = (ArrayList) intent.getSerializableExtra("com.google.android.location.internal.EXTRA_SLEEP_CLASSIFY_RESULT");
        if (arrayList == null) {
            return Collections.emptyList();
        }
        ArrayList arrayList2 = new ArrayList(arrayList.size());
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            byte[] bArr = (byte[]) arrayList.get(i);
            Preconditions.checkNotNull(bArr);
            arrayList2.add((SleepClassifyEvent) SafeParcelableSerializer.deserializeFromBytes(bArr, CREATOR));
        }
        return Collections.unmodifiableList(arrayList2);
    }

    public static boolean hasEvents(Intent intent) {
        if (intent == null) {
            return false;
        }
        return intent.hasExtra("com.google.android.location.internal.EXTRA_SLEEP_CLASSIFY_RESULT");
    }

    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof SleepClassifyEvent)) {
            return false;
        }
        SleepClassifyEvent sleepClassifyEvent = (SleepClassifyEvent) obj;
        return this.zza == sleepClassifyEvent.zza && this.zzb == sleepClassifyEvent.zzb;
    }

    public int getConfidence() {
        return this.zzb;
    }

    public int getLight() {
        return this.zzd;
    }

    public int getMotion() {
        return this.zzc;
    }

    public long getTimestampMillis() {
        return this.zza * 1000;
    }

    public int hashCode() {
        return Objects.hashCode(Integer.valueOf(this.zza), Integer.valueOf(this.zzb));
    }

    public String toString() {
        int i = this.zza;
        int i2 = this.zzb;
        int i3 = this.zzc;
        int i4 = this.zzd;
        StringBuilder sb = new StringBuilder(65);
        sb.append(i);
        sb.append(" Conf:");
        sb.append(i2);
        sb.append(" Motion:");
        sb.append(i3);
        sb.append(" Light:");
        sb.append(i4);
        return sb.toString();
    }

    @Override // android.os.Parcelable
    public void writeToParcel(Parcel parcel, int i) {
        Preconditions.checkNotNull(parcel);
        int iBeginObjectHeader = SafeParcelWriter.beginObjectHeader(parcel);
        SafeParcelWriter.writeInt(parcel, 1, this.zza);
        SafeParcelWriter.writeInt(parcel, 2, getConfidence());
        SafeParcelWriter.writeInt(parcel, 3, getMotion());
        SafeParcelWriter.writeInt(parcel, 4, getLight());
        SafeParcelWriter.writeInt(parcel, 5, this.zze);
        SafeParcelWriter.writeInt(parcel, 6, this.zzf);
        SafeParcelWriter.writeInt(parcel, 7, this.zzg);
        SafeParcelWriter.writeBoolean(parcel, 8, this.zzh);
        SafeParcelWriter.writeInt(parcel, 9, this.zzi);
        SafeParcelWriter.finishObjectHeader(parcel, iBeginObjectHeader);
    }
}
package com.google.android.gms.location;

import android.content.Intent;
import android.os.Parcel;
import android.os.Parcelable;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import com.google.android.gms.common.internal.safeparcel.SafeParcelableSerializer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* compiled from: com.google.android.gms:play-services-location@@20.0.0 */
/* loaded from: classes2.dex */
public class SleepSegmentEvent extends AbstractSafeParcelable {
    public static final Parcelable.Creator<SleepSegmentEvent> CREATOR = new zzcc();
    public static final int STATUS_MISSING_DATA = 1;
    public static final int STATUS_NOT_DETECTED = 2;
    public static final int STATUS_SUCCESSFUL = 0;
    private final long zza;
    private final long zzb;
    private final int zzc;
    private final int zzd;
    private final int zze;

    public SleepSegmentEvent(long j, long j2, int i, int i2, int i3) {
        Preconditions.checkArgument(j <= j2, "endTimeMillis must be greater than or equal to startTimeMillis");
        this.zza = j;
        this.zzb = j2;
        this.zzc = i;
        this.zzd = i2;
        this.zze = i3;
    }

    public static List<SleepSegmentEvent> extractEvents(Intent intent) {
        Preconditions.checkNotNull(intent);
        if (!hasEvents(intent)) {
            return Collections.emptyList();
        }
        ArrayList arrayList = (ArrayList) intent.getSerializableExtra("com.google.android.location.internal.EXTRA_SLEEP_SEGMENT_RESULT");
        if (arrayList == null) {
            return Collections.emptyList();
        }
        ArrayList arrayList2 = new ArrayList(arrayList.size());
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            byte[] bArr = (byte[]) arrayList.get(i);
            Preconditions.checkNotNull(bArr);
            arrayList2.add((SleepSegmentEvent) SafeParcelableSerializer.deserializeFromBytes(bArr, CREATOR));
        }
        return Collections.unmodifiableList(arrayList2);
    }

    public static boolean hasEvents(Intent intent) {
        if (intent == null) {
            return false;
        }
        return intent.hasExtra("com.google.android.location.internal.EXTRA_SLEEP_SEGMENT_RESULT");
    }

    public boolean equals(Object obj) {
        if (obj instanceof SleepSegmentEvent) {
            SleepSegmentEvent sleepSegmentEvent = (SleepSegmentEvent) obj;
            if (this.zza == sleepSegmentEvent.getStartTimeMillis() && this.zzb == sleepSegmentEvent.getEndTimeMillis() && this.zzc == sleepSegmentEvent.getStatus() && this.zzd == sleepSegmentEvent.zzd && this.zze == sleepSegmentEvent.zze) {
                return true;
            }
        }
        return false;
    }

    public long getEndTimeMillis() {
        return this.zzb;
    }

    public long getSegmentDurationMillis() {
        return this.zzb - this.zza;
    }

    public long getStartTimeMillis() {
        return this.zza;
    }

    public int getStatus() {
        return this.zzc;
    }

    public int hashCode() {
        return Objects.hashCode(Long.valueOf(this.zza), Long.valueOf(this.zzb), Integer.valueOf(this.zzc));
    }

    public String toString() {
        long j = this.zza;
        long j2 = this.zzb;
        int i = this.zzc;
        StringBuilder sb = new StringBuilder(84);
        sb.append("startMillis=");
        sb.append(j);
        sb.append(", endMillis=");
        sb.append(j2);
        sb.append(", status=");
        sb.append(i);
        return sb.toString();
    }

    @Override // android.os.Parcelable
    public void writeToParcel(Parcel parcel, int i) {
        Preconditions.checkNotNull(parcel);
        int iBeginObjectHeader = SafeParcelWriter.beginObjectHeader(parcel);
        SafeParcelWriter.writeLong(parcel, 1, getStartTimeMillis());
        SafeParcelWriter.writeLong(parcel, 2, getEndTimeMillis());
        SafeParcelWriter.writeInt(parcel, 3, getStatus());
        SafeParcelWriter.writeInt(parcel, 4, this.zzd);
        SafeParcelWriter.writeInt(parcel, 5, this.zze);
        SafeParcelWriter.finishObjectHeader(parcel, iBeginObjectHeader);
    }
}
package com.google.android.gms.location;

import android.os.Parcel;
import android.os.Parcelable;
import com.google.android.gms.common.internal.Objects;
import com.google.android.gms.common.internal.Preconditions;
import com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable;
import com.google.android.gms.common.internal.safeparcel.SafeParcelWriter;
import java.util.List;

/* compiled from: com.google.android.gms:play-services-location@@20.0.0 */
/* loaded from: classes2.dex */
public class SleepSegmentRequest extends AbstractSafeParcelable {
    public static final int CLASSIFY_EVENTS_ONLY = 2;
    public static final Parcelable.Creator<SleepSegmentRequest> CREATOR = new zzcd();
    public static final int SEGMENT_AND_CLASSIFY_EVENTS = 0;
    public static final int SEGMENT_EVENTS_ONLY = 1;
    private final List zza;
    private final int zzb;

    public SleepSegmentRequest(int i) {
        this(null, i);
    }

    public static SleepSegmentRequest getDefaultSleepSegmentRequest() {
        return new SleepSegmentRequest(null, 0);
    }

    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof SleepSegmentRequest)) {
            return false;
        }
        SleepSegmentRequest sleepSegmentRequest = (SleepSegmentRequest) obj;
        return Objects.equal(this.zza, sleepSegmentRequest.zza) && this.zzb == sleepSegmentRequest.zzb;package com.oudmon.ble.base.communication.entity;

import java.util.Arrays;

/* loaded from: classes3.dex */
public class BleSleepDetails {
    private int day;
    private int month;
    private int[] sleepQualities;
    private int timeIndex;
    private int year;

    public int getYear() {
        return this.year;
    }

    public void setYear(int i) {
        this.year = i;
    }

    public int getMonth() {
        return this.month;
    }

    public void setMonth(int i) {
        this.month = i;
    }

    public int getDay() {
        return this.day;
    }

    public void setDay(int i) {
        this.day = i;
    }

    public int getTimeIndex() {
        return this.timeIndex;
    }package com.oudmon.ble.base.communication.req;

import android.util.Log;
import com.oudmon.ble.base.communication.Constants;
import com.qcwireless.qc_utils.bytes.DataTransferUtils;

/* loaded from: classes3.dex */
public class ReadSleepDetailsReq extends BaseReqCmd {
    private byte[] data;

    public ReadSleepDetailsReq(int i, int i2, int i3) {
        super(Constants.CMD_GET_SLEEP);
        if (i > 29) {
            throw new IllegalArgumentException("dayOffset 最大只到29");
        }
        if (i2 > i3 || i3 > 95) {
            throw new IllegalArgumentException("数据段索引值异常");
        }
        Log.i(getClass().getSimpleName(), "ReadSleepDetailsReq: dayOffset=" + i);
        this.data = new byte[]{(byte) i, 15, (byte) i2, (byte) i3};
        Log.i(getClass().getSimpleName(), "ReadSleepDetailsReq: data=" + DataTransferUtils.getHexString(this.data));
    }
package com.oudmon.ble.base.communication.rsp;

import android.util.Log;
import com.oudmon.ble.base.communication.entity.BleSleepDetails;
import com.oudmon.ble.base.communication.utils.BLEDataFormatUtils;
import java.util.ArrayList;

/* loaded from: classes3.dex */
public class ReadSleepDetailsRsp extends BaseRspCmd {
    private ArrayList<BleSleepDetails> bleSleepDetailses = new ArrayList<>();
    private int index = 0;

    @Override // com.oudmon.ble.base.communication.rsp.BaseRspCmd
    public boolean acceptData(byte[] bArr) {
        byte b = bArr[0];
        int i = this.index;
        if (i == 0 && (b & 255) == 255) {
            this.bleSleepDetailses.clear();
            return false;
        }
        if (i == 0 && (b & 255) == 240) {
            Log.i("Jxr35", "acceptData: init data list");
            this.bleSleepDetailses.clear();
            this.index++;
        } else {
            BleSleepDetails bleSleepDetails = new BleSleepDetails();
            bleSleepDetails.setYear(BLEDataFormatUtils.BCDToDecimal(bArr[0]) + 2000);
            bleSleepDetails.setMonth(BLEDataFormatUtils.BCDToDecimal(bArr[1]));
            bleSleepDetails.setDay(BLEDataFormatUtils.BCDToDecimal(bArr[2]));
            bleSleepDetails.setTimeIndex(bArr[3]);
            int[] iArr = new int[8];
            for (int i2 = 1; i2 < 8; i2++) {
                iArr[i2] = bArr[i2 + 5] & 255;
            }
            bleSleepDetails.setSleepQualities(iArr);
            this.bleSleepDetailses.add(bleSleepDetails);
            this.index++;
            if (bArr[4] == bArr[5] - 1) {
                return false;
            }
        }
        return true;
    }package com.oudmon.ble.base.communication.rsp;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepNewProtoResp {
    private int et;
    private List<DetailBean> list;
    private boolean lunchBreak;
    private int lunchEt;
    private int lunchSt;
    private int st;

    public int getSt() {
        return this.st;
    }

    public void setSt(int i) {
        this.st = i;
    }

    public int getEt() {
        return this.et;
    }

    public void setEt(int i) {
        this.et = i;
    }

    public List<DetailBean> getList() {
        return this.list;
    }

    public void setList(List<DetailBean> list) {
        this.list = list;
    }

    public boolean isLunchBreak() {
        return this.lunchBreak;
    }

    public void setLunchBreak(boolean z) {
        this.lunchBreak = z;
    }

    public int getLunchSt() {
        return this.lunchSt;
    }

    public void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public int getLunchEt() {
        return this.lunchEt;
    }

    public void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public static class DetailBean {
        private int d;
        private int t;

        public int getD() {
            return this.d;
        }

        public void setD(int i) {
            this.d = i;
        }

        public int getT() {
            return this.t;
        }

        public void setT(int i) {
            this.t = i;
        }

        public String toString() {
            return "DetailBean{d=" + this.d + ", t=" + this.t + '}';
        }
    }

    public String toString() {
        return "SleepNewProtoResp{st=" + this.st + ", et=" + this.et + ", list=" + this.list + '}';
    }
}package com.oudmon.ble.base.communication.rsp;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepNewProtoResp {
    private int et;
    private List<DetailBean> list;
    private boolean lunchBreak;
    private int lunchEt;
    private int lunchSt;
    private int st;

    public int getSt() {
        return this.st;
    }

    public void setSt(int i) {
        this.st = i;
    }

    public int getEt() {
        return this.et;
    }

    public void setEt(int i) {
        this.et = i;
    }

    public List<DetailBean> getList() {
        return this.list;
    }

    public void setList(List<DetailBean> list) {
        this.list = list;
    }

    public boolean isLunchBreak() {
        return this.lunchBreak;
    }

    public void setLunchBreak(boolean z) {
        this.lunchBreak = z;
    }

    public int getLunchSt() {
        return this.lunchSt;
    }

    public void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public int getLunchEt() {
        return this.lunchEt;
    }

    public void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public static class DetailBean {
        private int d;
        private int t;

        public int getD() {
            return this.d;
        }

        public void setD(int i) {
            this.d = i;
        }

        public int getT() {
            return this.t;
        }

        public void setT(int i) {
            this.t = i;
        }

        public String toString() {
            return "DetailBean{d=" + this.d + ", t=" + this.t + '}';
        }
    }

    public String toString() {
        return "SleepNewProtoResp{st=" + this.st + ", et=" + this.et + ", list=" + this.list + '}';
    }
}package com.oudmon.ble.base.communication.rsp;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepNewProtoResp {
    private int et;
    private List<DetailBean> list;
    private boolean lunchBreak;
    private int lunchEt;
    private int lunchSt;
    private int st;

    public int getSt() {
        return this.st;
    }

    public void setSt(int i) {
        this.st = i;
    }

    public int getEt() {
        return this.et;
    }

    public void setEt(int i) {
        this.et = i;
    }

    public List<DetailBean> getList() {
        return this.list;
    }

    public void setList(List<DetailBean> list) {
        this.list = list;
    }

    public boolean isLunchBreak() {
        return this.lunchBreak;
    }

    public void setLunchBreak(boolean z) {
        this.lunchBreak = z;
    }

    public int getLunchSt() {
        return this.lunchSt;
    }

    public void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public int getLunchEt() {
        return this.lunchEt;
    }

    public void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public static class DetailBean {
        private int d;
        private int t;

        public int getD() {
            return this.d;
        }

        public void setD(int i) {
            this.d = i;
        }

        public int getT() {
            return this.t;
        }

        public void setT(int i) {
            this.t = i;
        }

        public String toString() {
            return "DetailBean{d=" + this.d + ", t=" + this.t + '}';
        }
    }

    public String toString() {
        return "SleepNewProtoResp{st=" + this.st + ", et=" + this.et + ", list=" + this.list + '}';
    }
}package com.oudmon.ble.base.communication.rsp;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepNewProtoResp {
    private int et;
    private List<DetailBean> list;
    private boolean lunchBreak;
    private int lunchEt;
    private int lunchSt;
    private int st;

    public int getSt() {
        return this.st;
    }

    public void setSt(int i) {
        this.st = i;
    }

    public int getEt() {
        return this.et;
    }

    public void setEt(int i) {
        this.et = i;
    }

    public List<DetailBean> getList() {
        return this.list;
    }

    public void setList(List<DetailBean> list) {
        this.list = list;
    }

    public boolean isLunchBreak() {
        return this.lunchBreak;
    }

    public void setLunchBreak(boolean z) {
        this.lunchBreak = z;
    }

    public int getLunchSt() {
        return this.lunchSt;
    }

    public void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public int getLunchEt() {
        return this.lunchEt;
    }

    public void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public static class DetailBean {
        private int d;
        private int t;

        public int getD() {
            return this.d;
        }

        public void setD(int i) {
            this.d = i;
        }

        public int getT() {
            return this.t;
        }

        public void setT(int i) {
            this.t = i;
        }

        public String toString() {
            return "DetailBean{d=" + this.d + ", t=" + this.t + '}';
        }
    }

    public String toString() {
        return "SleepNewProtoResp{st=" + this.st + ", et=" + this.et + ", list=" + this.list + '}';
    }
}package com.oudmon.ble.base.communication.rsp;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepNewProtoResp {
    private int et;
    private List<DetailBean> list;
    private boolean lunchBreak;
    private int lunchEt;
    private int lunchSt;
    private int st;

    public int getSt() {
        return this.st;
    }

    public void setSt(int i) {
        this.st = i;
    }

    public int getEt() {
        return this.et;
    }

    public void setEt(int i) {
        this.et = i;
    }

    public List<DetailBean> getList() {
        return this.list;
    }

    public void setList(List<DetailBean> list) {
        this.list = list;
    }

    public boolean isLunchBreak() {
        return this.lunchBreak;
    }

    public void setLunchBreak(boolean z) {
        this.lunchBreak = z;
    }

    public int getLunchSt() {
        return this.lunchSt;
    }

    public void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public int getLunchEt() {
        return this.lunchEt;
    }

    public void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public static class DetailBean {
        private int d;
        private int t;

        public int getD() {
            return this.d;
        }

        public void setD(int i) {
            this.d = i;
        }

        public int getT() {
            return this.t;
        }

        public void setT(int i) {
            this.t = i;
        }

        public String toString() {
            return "DetailBean{d=" + this.d + ", t=" + this.t + '}';
        }
    }

    public String toString() {
        return "SleepNewProtoResp{st=" + this.st + ", et=" + this.et + ", list=" + this.list + '}';
    }
}package com.oudmon.ble.base.communication.rsp;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepNewProtoResp {
    private int et;
    private List<DetailBean> list;
    private boolean lunchBreak;
    private int lunchEt;
    private int lunchSt;
    private int st;

    public int getSt() {
        return this.st;
    }

    public void setSt(int i) {
        this.st = i;
    }

    public int getEt() {
        return this.et;
    }

    public void setEt(int i) {
        this.et = i;
    }

    public List<DetailBean> getList() {
        return this.list;
    }

    public void setList(List<DetailBean> list) {
        this.list = list;
    }

    public boolean isLunchBreak() {
        return this.lunchBreak;
    }

    public void setLunchBreak(boolean z) {
        this.lunchBreak = z;
    }

    public int getLunchSt() {
        return this.lunchSt;
    }

    public void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public int getLunchEt() {
        return this.lunchEt;
    }

    public void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public static class DetailBean {
        private int d;
        private int t;

        public int getD() {
            return this.d;
        }

        public void setD(int i) {
            this.d = i;
        }

        public int getT() {
            return this.t;
        }

        public void setT(int i) {
            this.t = i;
        }

        public String toString() {
            return "DetailBean{d=" + this.d + ", t=" + this.t + '}';package com.oudmon.ble.base.communication.rsp;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepNewProtoResp {
    private int et;
    private List<DetailBean> list;
    private boolean lunchBreak;
    private int lunchEt;
    private int lunchSt;
    private int st;

    public int getSt() {
        return this.st;
    }

    public void setSt(int i) {
        this.st = i;
    }

    public int getEt() {
        return this.et;
    }

    public void setEt(int i) {
        this.et = i;
    }

    public List<DetailBean> getList() {
        return this.list;
    }

    public void setList(List<DetailBean> list) {
        this.list = list;
    }

    public boolean isLunchBreak() {
        return this.lunchBreak;
    }

    public void setLunchBreak(boolean z) {
        this.lunchBreak = z;
    }

    public int getLunchSt() {
        return this.lunchSt;
    }

    public void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public int getLunchEt() {
        return this.lunchEt;
    }

    public void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public static class DetailBean {
        private int d;
        private int t;

        public int getD() {
            return this.d;QWatch Pro_1.0.2.57_APKPure.apkpackage com.oudmon.ble.base.communication.rsp;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepNewProtoResp {
    private int et;
    private List<DetailBean> list;
    private boolean lunchBreak;
    private int lunchEt;
    private int lunchSt;
    private int st;

    public int getSt() {
        return this.st;
    }

    public void setSt(int i) {
        this.st = i;
    }

    public int getEt() {
        return this.et;
    }

    public void setEt(int i) {
        this.et = i;
    }

    public List<DetailBean> getList() {
        return this.list;
    }

    public void setList(List<DetailBean> list) {
        this.list = list;
    }

    public boolean isLunchBreak() {
        return this.lunchBreak;
    }

    public void setLunchBreak(boolean z) {
        this.lunchBreak = z;
    }

    public int getLunchSt() {
        return this.lunchSt;
    }

    public void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public int getLunchEt() {
        return this.lunchEt;
    }

    public void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public static class DetailBean {
        private int d;
        private int t;

        public int getD() {
            return this.d;
        }

        public void setD(int i) {
            this.d = i;
        }

        public int getT() {
            return this.t;
        }

        public void setT(int i) {
            this.t = i;
        }

        public String toString() {
            return "DetailBean{d=" + this.d + ", t=" + this.t + '}';
        }
    }

    public String toString() {
        return "SleepNewProtoResp{st=" + this.st + ", et=" + this.et + ", list=" + this.list + '}';
    }
}package com.oudmon.ble.base.communication.rsp;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepNewProtoResp {
    private int et;
    private List<DetailBean> list;
    private boolean lunchBreak;
    private int lunchEt;
    private int lunchSt;
    private int st;

    public int getSt() {
        return this.st;
    }

    public void setSt(int i) {
        this.st = i;
    }

    public int getEt() {
        return this.et;
    }

    public void setEt(int i) {
        this.et = i;
    }

    public List<DetailBean> getList() {
        return this.list;
    }

    public void setList(List<DetailBean> list) {
        this.list = list;
    }

    public boolean isLunchBreak() {
        return this.lunchBreak;
    }

    public void setLunchBreak(boolean z) {
        this.lunchBreak = z;
    }

    public int getLunchSt() {
        return this.lunchSt;
    }

    public void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public int getLunchEt() {
        return this.lunchEt;
    }

    public void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public static class DetailBean {
        private int d;
        private int t;

        public int getD() {
            return this.d;
        }

        public void setD(int i) {
            this.d = i;
        }

        public int getT() {
            return this.t;
        }

        public void setT(int i) {
            this.t = i;
        }

        public String toString() {
            return "DetailBean{d=" + this.d + ", t=" + this.t + '}';
        }
    }

    public String toString() {
        return "SleepNewProtoResp{st=" + this.st + ", et=" + this.et + ", list=" + this.list + '}';
    }
}package com.qcwireless.qcwatch.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.qcwireless.qcwatch.R;
import com.qcwireless.qcwatch.ui.base.view.QSwitchButtonView;

/* loaded from: classes3.dex */
public final class ActivitySleepBinding implements ViewBinding {
    private final ConstraintLayout rootView;
    public final FrameLayout sleepContainer;
    public final QSwitchButtonView sleepQsvView;
    public final LayoutTitleBarBinding titleBar;

    private ActivitySleepBinding(ConstraintLayout rootView, FrameLayout sleepContainer, QSwitchButtonView sleepQsvView, LayoutTitleBarBinding titleBar) {
        this.rootView = rootView;
        this.sleepContainer = sleepContainer;
        this.sleepQsvView = sleepQsvView;
        this.titleBar = titleBar;
    }

    @Override // androidx.viewbinding.ViewBinding
    public ConstraintLayout getRoot() {
        return this.rootView;
    }

    public static ActivitySleepBinding inflate(LayoutInflater inflater) {
        return inflate(inflater, null, false);
    }

    public static ActivitySleepBinding inflate(LayoutInflater inflater, ViewGroup parent, boolean attachToParent) {
        View viewInflate = inflater.inflate(R.layout.activity_sleep, parent, false);
        if (attachToParent) {
            parent.addView(viewInflate);
        }
        return bind(viewInflate);
    }

    public static ActivitySleepBinding bind(View rootView) {
        int i = R.id.sleepContainer;
        FrameLayout frameLayout = (FrameLayout) ViewBindings.findChildViewById(rootView, R.id.sleepContainer);
        if (frameLayout != null) {
            i = R.id.sleep_qsv_view;
            QSwitchButtonView qSwitchButtonView = (QSwitchButtonView) ViewBindings.findChildViewById(rootView, R.id.sleep_qsv_view);
            if (qSwitchButtonView != null) {
                i = R.id.title_bar;
                View viewFindChildViewById = ViewBindings.findChildViewById(rootView, R.id.title_bar);
                if (viewFindChildViewById != null) {
                    return new ActivitySleepBinding((ConstraintLayout) rootView, frameLayout, qSwitchButtonView, LayoutTitleBarBinding.bind(viewFindChildViewById));
                }
            }
        }
        throw new NullPointerException("Missing required view with ID: ".concat(rootView.getResources().getResourceName(i)));
    }
}package com.qcwireless.qcwatch.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.qcwireless.qcwatch.R;
import com.qcwireless.qcwatch.ui.base.view.QDateSwitchView;
import com.qcwireless.qcwatch.ui.base.view.QSleepAnalysisView;
import com.qcwireless.qcwatch.ui.base.view.QSleepBarChart;

/* loaded from: classes3.dex */
public final class FragmentDaySleepBinding implements ViewBinding {
    public final ConstraintLayout clsLunchSleep;
    public final ConstraintLayout cslInfoView;
    public final QSleepBarChart daySleepBarView;
    public final QDateSwitchView qcDateChange;
    public final QSleepAnalysisView qcSleep1;
    public final QSleepAnalysisView qcSleep2;
    public final QSleepAnalysisView qcSleep3;
    public final QSleepAnalysisView qcSleep4;
    public final QSleepAnalysisView qcSleepAwake;
    public final QSleepAnalysisView qcSleepDeep;
    public final QSleepAnalysisView qcSleepLight;
    public final QSleepAnalysisView qcSleepRem;
    private final NestedScrollView rootView;
    public final TextView topBg1;
    public final TextView tvInfo1;
    public final TextView tvLunchRange;
    public final TextView tvLunchTitle;
    public final TextView tvLunchValue;
    public final TextView tvSleepAwake;
    public final TextView tvSleepDeep;
    public final TextView tvSleepLight;
    public final TextView tvSleepMin;
    public final TextView tvSleepRange;
    public final TextView tvSleepRapid;
    public final TextView tvSleepType;
    public final TextView tvSleepUnit;

    private FragmentDaySleepBinding(NestedScrollView rootView, ConstraintLayout clsLunchSleep, ConstraintLayout cslInfoView, QSleepBarChart daySleepBarView, QDateSwitchView qcDateChange, QSleepAnalysisView qcSleep1, QSleepAnalysisView qcSleep2, QSleepAnalysisView qcSleep3, QSleepAnalysisView qcSleep4, QSleepAnalysisView qcSleepAwake, QSleepAnalysisView qcSleepDeep, QSleepAnalysisView qcSleepLight, QSleepAnalysisView qcSleepRem, TextView topBg1, TextView tvInfo1, TextView tvLunchRange, TextView tvLunchTitle, TextView tvLunchValue, TextView tvSleepAwake, TextView tvSleepDeep, TextView tvSleepLight, TextView tvSleepMin, TextView tvSleepRange, TextView tvSleepRapid, TextView tvSleepType, TextView tvSleepUnit) {
        this.rootView = rootView;
        this.clsLunchSleep = clsLunchSleep;
        this.cslInfoView = cslInfoView;
        this.daySleepBarView = daySleepBarView;
        this.qcDateChange = qcDateChange;
        this.qcSleep1 = qcSleep1;
        this.qcSleep2 = qcSleep2;
        this.qcSleep3 = qcSleep3;
        this.qcSleep4 = qcSleep4;
        this.qcSleepAwake = qcSleepAwake;
        this.qcSleepDeep = qcSleepDeep;
        this.qcSleepLight = qcSleepLight;
        this.qcSleepRem = qcSleepRem;
        this.topBg1 = topBg1;
        this.tvInfo1 = tvInfo1;
        this.tvLunchRange = tvLunchRange;
        this.tvLunchTitle = tvLunchTitle;
        this.tvLunchValue = tvLunchValue;
        this.tvSleepAwake = tvSleepAwake;
        this.tvSleepDeep = tvSleepDeep;
        this.tvSleepLight = tvSleepLight;
        this.tvSleepMin = tvSleepMin;
        this.tvSleepRange = tvSleepRange;
        this.tvSleepRapid = tvSleepRapid;
        this.tvSleepType = tvSleepType;
        this.tvSleepUnit = tvSleepUnit;
    }

    @Override // androidx.viewbinding.ViewBinding
    public NestedScrollView getRoot() {
        return this.rootView;
    }

    public static FragmentDaySleepBinding inflate(LayoutInflater inflater) {
        return inflate(inflater, null, false);
    }

    public static FragmentDaySleepBinding inflate(LayoutInflater inflater, ViewGroup parent, boolean attachToParent) {
        View viewInflate = inflater.inflate(R.layout.fragment_day_sleep, parent, false);
        if (attachToParent) {
            parent.addView(viewInflate);
        }
        return bind(viewInflate);
    }

    public static FragmentDaySleepBinding bind(View rootView) {
        int i = R.id.cls_lunch_sleep;
        ConstraintLayout constraintLayout = (ConstraintLayout) ViewBindings.findChildViewById(rootView, R.id.cls_lunch_sleep);
        if (constraintLayout != null) {
            i = R.id.csl_info_view;
            ConstraintLayout constraintLayout2 = (ConstraintLayout) ViewBindings.findChildViewById(rootView, R.id.csl_info_view);
            if (constraintLayout2 != null) {
                i = R.id.day_sleep_bar_view;
                QSleepBarChart qSleepBarChart = (QSleepBarChart) ViewBindings.findChildViewById(rootView, R.id.day_sleep_bar_view);
                if (qSleepBarChart != null) {
                    i = R.id.qc_date_change;
                    QDateSwitchView qDateSwitchView = (QDateSwitchView) ViewBindings.findChildViewById(rootView, R.id.qc_date_change);
                    if (qDateSwitchView != null) {
                        i = R.id.qc_sleep_1;
                        QSleepAnalysisView qSleepAnalysisView = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_1);
                        if (qSleepAnalysisView != null) {
                            i = R.id.qc_sleep_2;
                            QSleepAnalysisView qSleepAnalysisView2 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_2);
                            if (qSleepAnalysisView2 != null) {
                                i = R.id.qc_sleep3;
                                QSleepAnalysisView qSleepAnalysisView3 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep3);
                                if (qSleepAnalysisView3 != null) {
                                    i = R.id.qc_sleep_4;
                                    QSleepAnalysisView qSleepAnalysisView4 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_4);
                                    if (qSleepAnalysisView4 != null) {
                                        i = R.id.qc_sleep_awake;
                                        QSleepAnalysisView qSleepAnalysisView5 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_awake);
                                        if (qSleepAnalysisView5 != null) {
                                            i = R.id.qc_sleep_deep;
                                            QSleepAnalysisView qSleepAnalysisView6 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_deep);
                                            if (qSleepAnalysisView6 != null) {
                                                i = R.id.qc_sleep_light;
                                                QSleepAnalysisView qSleepAnalysisView7 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_light);
                                                if (qSleepAnalysisView7 != null) {
                                                    i = R.id.qc_sleep_rem;
                                                    QSleepAnalysisView qSleepAnalysisView8 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_rem);
                                                    if (qSleepAnalysisView8 != null) {
                                                        i = R.id.top_bg_1;
                                                        TextView textView = (TextView) ViewBindings.findChildViewById(rootView, R.id.top_bg_1);
                                                        if (textView != null) {
                                                            i = R.id.tv_info_1;
                                                            TextView textView2 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_info_1);
                                                            if (textView2 != null) {
                                                                i = R.id.tv_lunch_range;
                                                                TextView textView3 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_lunch_range);
                                                                if (textView3 != null) {
                                                                    i = R.id.tv_lunch_title;
                                                                    TextView textView4 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_lunch_title);
                                                                    if (textView4 != null) {
                                                                        i = R.id.tv_lunch_value;
                                                                        TextView textView5 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_lunch_value);
                                                                        if (textView5 != null) {
                                                                            i = R.id.tv_sleep_awake;
                                                                            TextView textView6 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_awake);
                                                                            if (textView6 != null) {
                                                                                i = R.id.tv_sleep_deep;
                                                                                TextView textView7 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_deep);
                                                                                if (textView7 != null) {
                                                                                    i = R.id.tv_sleep_light;
                                                                                    TextView textView8 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_light);
                                                                                    if (textView8 != null) {
                                                                                        i = R.id.tv_sleep_min;
                                                                                        TextView textView9 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_min);
                                                                                        if (textView9 != null) {
                                                                                            i = R.id.tv_sleep_range;
                                                                                            TextView textView10 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_range);
                                                                                            if (textView10 != null) {
                                                                                                i = R.id.tv_sleep_rapid;
                                                                                                TextView textView11 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_rapid);
                                                                                                if (textView11 != null) {
                                                                                                    i = R.id.tv_sleep_type;
                                                                                                    TextView textView12 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_type);
                                                                                                    if (textView12 != null) {
                                                                                                        i = R.id.tv_sleep_unit;
                                                                                                        TextView textView13 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_unit);
                                                                                                        if (textView13 != null) {
                                                                                                            return new FragmentDaySleepBinding((NestedScrollView) rootView, constraintLayout, constraintLayout2, qSleepBarChart, qDateSwitchView, qSleepAnalysisView, qSleepAnalysisView2, qSleepAnalysisView3, qSleepAnalysisView4, qSleepAnalysisView5, qSleepAnalysisView6, qSleepAnalysisView7, qSleepAnalysisView8, textView, textView2, textView3, textView4, textView5, textView6, textView7, textView8, textView9, textView10, textView11, textView12, textView13);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        throw new NullPointerException("Missing required view with ID: ".concat(rootView.getResources().getResourceName(i)));
    }
}
package com.qcwireless.qcwatch.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.qcwireless.qcwatch.R;
import com.qcwireless.qcwatch.ui.base.view.QDateSwitchView;
import com.qcwireless.qcwatch.ui.base.view.QSleepAnalysisView;
import com.qcwireless.qcwatch.ui.base.view.QSleepBarChart;

/* loaded from: classes3.dex */
public final class FragmentDaySleepBinding implements ViewBinding {
    public final ConstraintLayout clsLunchSleep;
    public final ConstraintLayout cslInfoView;
    public final QSleepBarChart daySleepBarView;
    public final QDateSwitchView qcDateChange;
    public final QSleepAnalysisView qcSleep1;
    public final QSleepAnalysisView qcSleep2;
    public final QSleepAnalysisView qcSleep3;
    public final QSleepAnalysisView qcSleep4;
    public final QSleepAnalysisView qcSleepAwake;
    public final QSleepAnalysisView qcSleepDeep;
    public final QSleepAnalysisView qcSleepLight;
    public final QSleepAnalysisView qcSleepRem;
    private final NestedScrollView rootView;
    public final TextView topBg1;
    public final TextView tvInfo1;
    public final TextView tvLunchRange;
    public final TextView tvLunchTitle;
    public final TextView tvLunchValue;
    public final TextView tvSleepAwake;
    public final TextView tvSleepDeep;
    public final TextView tvSleepLight;
    public final TextView tvSleepMin;
    public final TextView tvSleepRange;
    public final TextView tvSleepRapid;
    public final TextView tvSleepType;
    public final TextView tvSleepUnit;

    private FragmentDaySleepBinding(NestedScrollView rootView, ConstraintLayout clsLunchSleep, ConstraintLayout cslInfoView, QSleepBarChart daySleepBarView, QDateSwitchView qcDateChange, QSleepAnalysisView qcSleep1, QSleepAnalysisView qcSleep2, QSleepAnalysisView qcSleep3, QSleepAnalysisView qcSleep4, QSleepAnalysisView qcSleepAwake, QSleepAnalysisView qcSleepDeep, QSleepAnalysisView qcSleepLight, QSleepAnalysisView qcSleepRem, TextView topBg1, TextView tvInfo1, TextView tvLunchRange, TextView tvLunchTitle, TextView tvLunchValue, TextView tvSleepAwake, TextView tvSleepDeep, TextView tvSleepLight, TextView tvSleepMin, TextView tvSleepRange, TextView tvSleepRapid, TextView tvSleepType, TextView tvSleepUnit) {
        this.rootView = rootView;
        this.clsLunchSleep = clsLunchSleep;
        this.cslInfoView = cslInfoView;
        this.daySleepBarView = daySleepBarView;
        this.qcDateChange = qcDateChange;
        this.qcSleep1 = qcSleep1;
        this.qcSleep2 = qcSleep2;
        this.qcSleep3 = qcSleep3;
        this.qcSleep4 = qcSleep4;
        this.qcSleepAwake = qcSleepAwake;
        this.qcSleepDeep = qcSleepDeep;
        this.qcSleepLight = qcSleepLight;
        this.qcSleepRem = qcSleepRem;
        this.topBg1 = topBg1;
        this.tvInfo1 = tvInfo1;
        this.tvLunchRange = tvLunchRange;
        this.tvLunchTitle = tvLunchTitle;
        this.tvLunchValue = tvLunchValue;
        this.tvSleepAwake = tvSleepAwake;
        this.tvSleepDeep = tvSleepDeep;
        this.tvSleepLight = tvSleepLight;
        this.tvSleepMin = tvSleepMin;
        this.tvSleepRange = tvSleepRange;
        this.tvSleepRapid = tvSleepRapid;
        this.tvSleepType = tvSleepType;
        this.tvSleepUnit = tvSleepUnit;
    }

    @Override // androidx.viewbinding.ViewBinding
    public NestedScrollView getRoot() {
        return this.rootView;
    }

    public static FragmentDaySleepBinding inflate(LayoutInflater inflater) {
        return inflate(inflater, null, false);
    }

    public static FragmentDaySleepBinding inflate(LayoutInflater inflater, ViewGroup parent, boolean attachToParent) {
        View viewInflate = inflater.inflate(R.layout.fragment_day_sleep, parent, false);
        if (attachToParent) {
            parent.addView(viewInflate);
        }
        return bind(viewInflate);
    }

    public static FragmentDaySleepBinding bind(View rootView) {
        int i = R.id.cls_lunch_sleep;
        ConstraintLayout constraintLayout = (ConstraintLayout) ViewBindings.findChildViewById(rootView, R.id.cls_lunch_sleep);
        if (constraintLayout != null) {
            i = R.id.csl_info_view;
            ConstraintLayout constraintLayout2 = (ConstraintLayout) ViewBindings.findChildViewById(rootView, R.id.csl_info_view);
            if (constraintLayout2 != null) {
                i = R.id.day_sleep_bar_view;
                QSleepBarChart qSleepBarChart = (QSleepBarChart) ViewBindings.findChildViewById(rootView, R.id.day_sleep_bar_view);
                if (qSleepBarChart != null) {
                    i = R.id.qc_date_change;
                    QDateSwitchView qDateSwitchView = (QDateSwitchView) ViewBindings.findChildViewById(rootView, R.id.qc_date_change);
                    if (qDateSwitchView != null) {
                        i = R.id.qc_sleep_1;
                        QSleepAnalysisView qSleepAnalysisView = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_1);
                        if (qSleepAnalysisView != null) {
                            i = R.id.qc_sleep_2;
                            QSleepAnalysisView qSleepAnalysisView2 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_2);
                            if (qSleepAnalysisView2 != null) {
                                i = R.id.qc_sleep3;
                                QSleepAnalysisView qSleepAnalysisView3 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep3);
                                if (qSleepAnalysisView3 != null) {
                                    i = R.id.qc_sleep_4;
                                    QSleepAnalysisView qSleepAnalysisView4 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_4);
                                    if (qSleepAnalysisView4 != null) {
                                        i = R.id.qc_sleep_awake;
                                        QSleepAnalysisView qSleepAnalysisView5 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_awake);
                                        if (qSleepAnalysisView5 != null) {
                                            i = R.id.qc_sleep_deep;
                                            QSleepAnalysisView qSleepAnalysisView6 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_deep);
                                            if (qSleepAnalysisView6 != null) {
                                                i = R.id.qc_sleep_light;
                                                QSleepAnalysisView qSleepAnalysisView7 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_light);
                                                if (qSleepAnalysisView7 != null) {
                                                    i = R.id.qc_sleep_rem;
                                                    QSleepAnalysisView qSleepAnalysisView8 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_rem);
                                                    if (qSleepAnalysisView8 != null) {
                                                        i = R.id.top_bg_1;
                                                        TextView textView = (TextView) ViewBindings.findChildViewById(rootView, R.id.top_bg_1);
                                                        if (textView != null) {
                                                            i = R.id.tv_info_1;
                                                            TextView textView2 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_info_1);
                                                            if (textView2 != null) {
                                                                i = R.id.tv_lunch_range;
                                                                TextView textView3 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_lunch_range);
                                                                if (textView3 != null) {
                                                                    i = R.id.tv_lunch_title;
                                                                    TextView textView4 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_lunch_title);
                                                                    if (textView4 != null) {
                                                                        i = R.id.tv_lunch_value;
                                                                        TextView textView5 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_lunch_value);
                                                                        if (textView5 != null) {
                                                                            i = R.id.tv_sleep_awake;
                                                                            TextView textView6 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_awake);
                                                                            if (textView6 != null) {
                                                                                i = R.id.tv_sleep_deep;
                                                                                TextView textView7 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_deep);
                                                                                if (textView7 != null) {
                                                                                    i = R.id.tv_sleep_light;
                                                                                    TextView textView8 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_light);
                                                                                    if (textView8 != null) {
                                                                                        i = R.id.tv_sleep_min;
                                                                                        TextView textView9 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_min);
                                                                                        if (textView9 != null) {
                                                                                            i = R.id.tv_sleep_range;
                                                                                            TextView textView10 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_range);
                                                                                            if (textView10 != null) {
                                                                                                i = R.id.tv_sleep_rapid;
                                                                                                TextView textView11 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_rapid);
                                                                                                if (textView11 != null) {
                                                                                                    i = R.id.tv_sleep_type;
                                                                                                    TextView textView12 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_type);
                                                                                                    if (textView12 != null) {
                                                                                                        i = R.id.tv_sleep_unit;
                                                                                                        TextView textView13 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_unit);
                                                                                                        if (textView13 != null) {
                                                                                                            return new FragmentDaySleepBinding((NestedScrollView) rootView, constraintLayout, constraintLayout2, qSleepBarChart, qDateSwitchView, qSleepAnalysisView, qSleepAnalysisView2, qSleepAnalysisView3, qSleepAnalysisView4, qSleepAnalysisView5, qSleepAnalysisView6, qSleepAnalysisView7, qSleepAnalysisView8, textView, textView2, textView3, textView4, textView5, textView6, textView7, textView8, textView9, textView10, textView11, textView12, textView13);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        throw new NullPointerException("Missing required view with ID: ".concat(rootView.getResources().getResourceName(i)));
    }
}package com.qcwireless.qcwatch.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.qcwireless.qcwatch.R;
import com.qcwireless.qcwatch.ui.base.view.QDateMonthSwitchView;
import com.qcwireless.qcwatch.ui.base.view.QSleepAnalysisView;
import com.qcwireless.qcwatch.ui.base.view.QSleepMonthBarView;

/* loaded from: classes3.dex */
public final class FragmentMonthSleepBinding implements ViewBinding {
    public final ConstraintLayout cslInfoView;
    public final QSleepMonthBarView monthSleepBarView;
    public final QDateMonthSwitchView qcDateChange;
    public final QSleepAnalysisView qcSleep1;
    public final QSleepAnalysisView qcSleep2;
    public final QSleepAnalysisView qcSleep3;
    public final QSleepAnalysisView qcSleep4;
    private final NestedScrollView rootView;
    public final TextView topBg1;
    public final TextView tvInfo1;
    public final TextView tvSleepAwake;
    public final TextView tvSleepDeep;
    public final TextView tvSleepH;
    public final TextView tvSleepLight;
    public final TextView tvSleepMin;
    public final TextView tvSleepRange;
    public final TextView tvSleepRapid;
    public final TextView tvSleepType;
    public final TextView tvSleepUnit;

    private FragmentMonthSleepBinding(NestedScrollView rootView, ConstraintLayout cslInfoView, QSleepMonthBarView monthSleepBarView, QDateMonthSwitchView qcDateChange, QSleepAnalysisView qcSleep1, QSleepAnalysisView qcSleep2, QSleepAnalysisView qcSleep3, QSleepAnalysisView qcSleep4, TextView topBg1, TextView tvInfo1, TextView tvSleepAwake, TextView tvSleepDeep, TextView tvSleepH, TextView tvSleepLight, TextView tvSleepMin, TextView tvSleepRange, TextView tvSleepRapid, TextView tvSleepType, TextView tvSleepUnit) {
        this.rootView = rootView;
        this.cslInfoView = cslInfoView;
        this.monthSleepBarView = monthSleepBarView;
        this.qcDateChange = qcDateChange;
        this.qcSleep1 = qcSleep1;
        this.qcSleep2 = qcSleep2;
        this.qcSleep3 = qcSleep3;
        this.qcSleep4 = qcSleep4;
        this.topBg1 = topBg1;
        this.tvInfo1 = tvInfo1;
        this.tvSleepAwake = tvSleepAwake;
        this.tvSleepDeep = tvSleepDeep;
        this.tvSleepH = tvSleepH;
        this.tvSleepLight = tvSleepLight;
        this.tvSleepMin = tvSleepMin;
        this.tvSleepRange = tvSleepRange;
        this.tvSleepRapid = tvSleepRapid;
        this.tvSleepType = tvSleepType;
        this.tvSleepUnit = tvSleepUnit;
    }

    @Override // androidx.viewbinding.ViewBinding
    public NestedScrollView getRoot() {
        return this.rootView;
    }

    public static FragmentMonthSleepBinding inflate(LayoutInflater inflater) {
        return inflate(inflater, null, false);
    }

    public static FragmentMonthSleepBinding inflate(LayoutInflater inflater, ViewGroup parent, boolean attachToParent) {
        View viewInflate = inflater.inflate(R.layout.fragment_month_sleep, parent, false);
        if (attachToParent) {
            parent.addView(viewInflate);
        }
        return bind(viewInflate);
    }

    public static FragmentMonthSleepBinding bind(View rootView) {
        int i = R.id.csl_info_view;
        ConstraintLayout constraintLayout = (ConstraintLayout) ViewBindings.findChildViewById(rootView, R.id.csl_info_view);
        if (constraintLayout != null) {
            i = R.id.month_sleep_bar_view;
            QSleepMonthBarView qSleepMonthBarView = (QSleepMonthBarView) ViewBindings.findChildViewById(rootView, R.id.month_sleep_bar_view);
            if (qSleepMonthBarView != null) {
                i = R.id.qc_date_change;
                QDateMonthSwitchView qDateMonthSwitchView = (QDateMonthSwitchView) ViewBindings.findChildViewById(rootView, R.id.qc_date_change);
                if (qDateMonthSwitchView != null) {
                    i = R.id.qc_sleep_1;
                    QSleepAnalysisView qSleepAnalysisView = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_1);
                    if (qSleepAnalysisView != null) {
                        i = R.id.qc_sleep_2;
                        QSleepAnalysisView qSleepAnalysisView2 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_2);
                        if (qSleepAnalysisView2 != null) {
                            i = R.id.qc_sleep3;
                            QSleepAnalysisView qSleepAnalysisView3 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep3);
                            if (qSleepAnalysisView3 != null) {
                                i = R.id.qc_sleep_4;
                                QSleepAnalysisView qSleepAnalysisView4 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_4);
                                if (qSleepAnalysisView4 != null) {
                                    i = R.id.top_bg_1;
                                    TextView textView = (TextView) ViewBindings.findChildViewById(rootView, R.id.top_bg_1);
                                    if (textView != null) {
                                        i = R.id.tv_info_1;
                                        TextView textView2 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_info_1);
                                        if (textView2 != null) {
                                            i = R.id.tv_sleep_awake;
                                            TextView textView3 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_awake);
                                            if (textView3 != null) {
                                                i = R.id.tv_sleep_deep;
                                                TextView textView4 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_deep);
                                                if (textView4 != null) {
                                                    i = R.id.tv_sleep_h;
                                                    TextView textView5 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_h);
                                                    if (textView5 != null) {
                                                        i = R.id.tv_sleep_light;
                                                        TextView textView6 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_light);
                                                        if (textView6 != null) {
                                                            i = R.id.tv_sleep_min;
                                                            TextView textView7 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_min);
                                                            if (textView7 != null) {
                                                                i = R.id.tv_sleep_range;
                                                                TextView textView8 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_range);
                                                                if (textView8 != null) {
                                                                    i = R.id.tv_sleep_rapid;
                                                                    TextView textView9 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_rapid);
                                                                    if (textView9 != null) {
                                                                        i = R.id.tv_sleep_type;
                                                                        TextView textView10 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_type);
                                                                        if (textView10 != null) {
                                                                            i = R.id.tv_sleep_unit;
                                                                            TextView textView11 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_unit);
                                                                            if (textView11 != null) {
                                                                                return new FragmentMonthSleepBinding((NestedScrollView) rootView, constraintLayout, qSleepMonthBarView, qDateMonthSwitchView, qSleepAnalysisView, qSleepAnalysisView2, qSleepAnalysisView3, qSleepAnalysisView4, textView, textView2, textView3, textView4, textView5, textView6, textView7, textView8, textView9, textView10, textView11);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        throw new NullPointerException("Missing required view with ID: ".concat(rootView.getResources().getResourceName(i)));
    }
}package com.qcwireless.qcwatch.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.qcwireless.qcwatch.R;
import com.qcwireless.qcwatch.ui.base.view.QDateWeekSwitchView;
import com.qcwireless.qcwatch.ui.base.view.QSleepAnalysisView;
import com.qcwireless.qcwatch.ui.base.view.QSleepWeekBarView;

/* loaded from: classes3.dex */
public final class FragmentWeekSleepBinding implements ViewBinding {
    public final ConstraintLayout cslInfoView;
    public final QDateWeekSwitchView qcDateChange;
    public final QSleepAnalysisView qcSleep1;
    public final QSleepAnalysisView qcSleep2;
    public final QSleepAnalysisView qcSleep3;
    public final QSleepAnalysisView qcSleep4;
    private final NestedScrollView rootView;
    public final TextView topBg1;
    public final TextView tvInfo1;
    public final TextView tvSleepAwake;
    public final TextView tvSleepDeep;
    public final TextView tvSleepH;
    public final TextView tvSleepLight;
    public final TextView tvSleepMin;
    public final TextView tvSleepRange;
    public final TextView tvSleepRapid;
    public final TextView tvSleepType;
    public final TextView tvSleepUnit;
    public final QSleepWeekBarView weekSleepBarView;

    private FragmentWeekSleepBinding(NestedScrollView rootView, ConstraintLayout cslInfoView, QDateWeekSwitchView qcDateChange, QSleepAnalysisView qcSleep1, QSleepAnalysisView qcSleep2, QSleepAnalysisView qcSleep3, QSleepAnalysisView qcSleep4, TextView topBg1, TextView tvInfo1, TextView tvSleepAwake, TextView tvSleepDeep, TextView tvSleepH, TextView tvSleepLight, TextView tvSleepMin, TextView tvSleepRange, TextView tvSleepRapid, TextView tvSleepType, TextView tvSleepUnit, QSleepWeekBarView weekSleepBarView) {
        this.rootView = rootView;
        this.cslInfoView = cslInfoView;
        this.qcDateChange = qcDateChange;
        this.qcSleep1 = qcSleep1;
        this.qcSleep2 = qcSleep2;
        this.qcSleep3 = qcSleep3;
        this.qcSleep4 = qcSleep4;
        this.topBg1 = topBg1;
        this.tvInfo1 = tvInfo1;
        this.tvSleepAwake = tvSleepAwake;
        this.tvSleepDeep = tvSleepDeep;
        this.tvSleepH = tvSleepH;
        this.tvSleepLight = tvSleepLight;
        this.tvSleepMin = tvSleepMin;
        this.tvSleepRange = tvSleepRange;
        this.tvSleepRapid = tvSleepRapid;
        this.tvSleepType = tvSleepType;
        this.tvSleepUnit = tvSleepUnit;
        this.weekSleepBarView = weekSleepBarView;
    }

    @Override // androidx.viewbinding.ViewBinding
    public NestedScrollView getRoot() {
        return this.rootView;
    }

    public static FragmentWeekSleepBinding inflate(LayoutInflater inflater) {
        return inflate(inflater, null, false);
    }

    public static FragmentWeekSleepBinding inflate(LayoutInflater inflater, ViewGroup parent, boolean attachToParent) {
        View viewInflate = inflater.inflate(R.layout.fragment_week_sleep, parent, false);
        if (attachToParent) {
            parent.addView(viewInflate);
        }
        return bind(viewInflate);
    }

    public static FragmentWeekSleepBinding bind(View rootView) {
        int i = R.id.csl_info_view;
        ConstraintLayout constraintLayout = (ConstraintLayout) ViewBindings.findChildViewById(rootView, R.id.csl_info_view);
        if (constraintLayout != null) {
            i = R.id.qc_date_change;
            QDateWeekSwitchView qDateWeekSwitchView = (QDateWeekSwitchView) ViewBindings.findChildViewById(rootView, R.id.qc_date_change);
            if (qDateWeekSwitchView != null) {
                i = R.id.qc_sleep_1;
                QSleepAnalysisView qSleepAnalysisView = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_1);
                if (qSleepAnalysisView != null) {
                    i = R.id.qc_sleep_2;
                    QSleepAnalysisView qSleepAnalysisView2 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_2);
                    if (qSleepAnalysisView2 != null) {
                        i = R.id.qc_sleep3;
                        QSleepAnalysisView qSleepAnalysisView3 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep3);
                        if (qSleepAnalysisView3 != null) {
                            i = R.id.qc_sleep_4;
                            QSleepAnalysisView qSleepAnalysisView4 = (QSleepAnalysisView) ViewBindings.findChildViewById(rootView, R.id.qc_sleep_4);
                            if (qSleepAnalysisView4 != null) {
                                i = R.id.top_bg_1;
                                TextView textView = (TextView) ViewBindings.findChildViewById(rootView, R.id.top_bg_1);
                                if (textView != null) {
                                    i = R.id.tv_info_1;
                                    TextView textView2 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_info_1);
                                    if (textView2 != null) {
                                        i = R.id.tv_sleep_awake;
                                        TextView textView3 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_awake);
                                        if (textView3 != null) {
                                            i = R.id.tv_sleep_deep;
                                            TextView textView4 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_deep);
                                            if (textView4 != null) {
                                                i = R.id.tv_sleep_h;
                                                TextView textView5 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_h);
                                                if (textView5 != null) {
                                                    i = R.id.tv_sleep_light;
                                                    TextView textView6 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_light);
                                                    if (textView6 != null) {
                                                        i = R.id.tv_sleep_min;
                                                        TextView textView7 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_min);
                                                        if (textView7 != null) {
                                                            i = R.id.tv_sleep_range;
                                                            TextView textView8 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_range);
                                                            if (textView8 != null) {
                                                                i = R.id.tv_sleep_rapid;
                                                                TextView textView9 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_rapid);
                                                                if (textView9 != null) {
                                                                    i = R.id.tv_sleep_type;
                                                                    TextView textView10 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_type);
                                                                    if (textView10 != null) {
                                                                        i = R.id.tv_sleep_unit;
                                                                        TextView textView11 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_unit);
                                                                        if (textView11 != null) {
                                                                            i = R.id.week_sleep_bar_view;
                                                                            QSleepWeekBarView qSleepWeekBarView = (QSleepWeekBarView) ViewBindings.findChildViewById(rootView, R.id.week_sleep_bar_view);
                                                                            if (qSleepWeekBarView != null) {
                                                                                return new FragmentWeekSleepBinding((NestedScrollView) rootView, constraintLayout, qDateWeekSwitchView, qSleepAnalysisView, qSleepAnalysisView2, qSleepAnalysisView3, qSleepAnalysisView4, textView, textView2, textView3, textView4, textView5, textView6, textView7, textView8, textView9, textView10, textView11, qSleepWeekBarView);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        throw new NullPointerException("Missing required view with ID: ".concat(rootView.getResources().getResourceName(i)));
    }
}package com.qcwireless.qcwatch.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.qcwireless.qcwatch.R;
import com.qcwireless.qcwatch.ui.base.view.QSleepHomeBarChart;

/* loaded from: classes3.dex */
public final class RecycleviewItemSleepBinding implements ViewBinding {
    public final TextView homeSleepDate;
    public final TextView homeSleepH;
    public final TextView homeSleepMin;
    public final TextView homeSleepTitle;
    public final TextView homeSleepValue;
    public final TextView homeSleepValueMin;
    public final ImageView imageNoData;
    public final QSleepHomeBarChart lastSleepView;
    private final ConstraintLayout rootView;

    private RecycleviewItemSleepBinding(ConstraintLayout rootView, TextView homeSleepDate, TextView homeSleepH, TextView homeSleepMin, TextView homeSleepTitle, TextView homeSleepValue, TextView homeSleepValueMin, ImageView imageNoData, QSleepHomeBarChart lastSleepView) {
        this.rootView = rootView;
        this.homeSleepDate = homeSleepDate;
        this.homeSleepH = homeSleepH;
        this.homeSleepMin = homeSleepMin;
        this.homeSleepTitle = homeSleepTitle;
        this.homeSleepValue = homeSleepValue;
        this.homeSleepValueMin = homeSleepValueMin;
        this.imageNoData = imageNoData;
        this.lastSleepView = lastSleepView;
    }

    @Override // androidx.viewbinding.ViewBinding
    public ConstraintLayout getRoot() {
        return this.rootView;
    }

    public static RecycleviewItemSleepBinding inflate(LayoutInflater inflater) {
        return inflate(inflater, null, false);
    }

    public static RecycleviewItemSleepBinding inflate(LayoutInflater inflater, ViewGroup parent, boolean attachToParent) {
        View viewInflate = inflater.inflate(R.layout.recycleview_item_sleep, parent, false);
        if (attachToParent) {
            parent.addView(viewInflate);
        }
        return bind(viewInflate);
    }

    public static RecycleviewItemSleepBinding bind(View rootView) {
        int i = R.id.home_sleep_date;
        TextView textView = (TextView) ViewBindings.findChildViewById(rootView, R.id.home_sleep_date);
        if (textView != null) {
            i = R.id.home_sleep_h;
            TextView textView2 = (TextView) ViewBindings.findChildViewById(rootView, R.id.home_sleep_h);
            if (textView2 != null) {
                i = R.id.home_sleep_min;
                TextView textView3 = (TextView) ViewBindings.findChildViewById(rootView, R.id.home_sleep_min);
                if (textView3 != null) {
                    i = R.id.home_sleep_title;
                    TextView textView4 = (TextView) ViewBindings.findChildViewById(rootView, R.id.home_sleep_title);
                    if (textView4 != null) {
                        i = R.id.home_sleep_value;
                        TextView textView5 = (TextView) ViewBindings.findChildViewById(rootView, R.id.home_sleep_value);
                        if (textView5 != null) {
                            i = R.id.home_sleep_value_min;
                            TextView textView6 = (TextView) ViewBindings.findChildViewById(rootView, R.id.home_sleep_value_min);
                            if (textView6 != null) {
                                i = R.id.image_no_data;
                                ImageView imageView = (ImageView) ViewBindings.findChildViewById(rootView, R.id.image_no_data);
                                if (imageView != null) {
                                    i = R.id.last_sleep_view;
                                    QSleepHomeBarChart qSleepHomeBarChart = (QSleepHomeBarChart) ViewBindings.findChildViewById(rootView, R.id.last_sleep_view);
                                    if (qSleepHomeBarChart != null) {
                                        return new RecycleviewItemSleepBinding((ConstraintLayout) rootView, textView, textView2, textView3, textView4, textView5, textView6, imageView, qSleepHomeBarChart);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        throw new NullPointerException("Missing required view with ID: ".concat(rootView.getResources().getResourceName(i)));
    }
}package com.qcwireless.qcwatch.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.qcwireless.qcwatch.R;

/* loaded from: classes3.dex */
public final class ViewSleepAnalysisBinding implements ViewBinding {
    private final ConstraintLayout rootView;
    public final TextView tv1;
    public final Group tvDetailGroup;
    public final TextView tvSleepHour;
    public final TextView tvSleepMin;
    public final TextView tvSleepStatus;
    public final TextView tvSleepTotalTime;
    public final TextView tvSleepUnitH;
    public final TextView tvSleepUnitMin;

    private ViewSleepAnalysisBinding(ConstraintLayout rootView, TextView tv1, Group tvDetailGroup, TextView tvSleepHour, TextView tvSleepMin, TextView tvSleepStatus, TextView tvSleepTotalTime, TextView tvSleepUnitH, TextView tvSleepUnitMin) {
        this.rootView = rootView;
        this.tv1 = tv1;
        this.tvDetailGroup = tvDetailGroup;
        this.tvSleepHour = tvSleepHour;
        this.tvSleepMin = tvSleepMin;
        this.tvSleepStatus = tvSleepStatus;
        this.tvSleepTotalTime = tvSleepTotalTime;
        this.tvSleepUnitH = tvSleepUnitH;
        this.tvSleepUnitMin = tvSleepUnitMin;
    }

    @Override // androidx.viewbinding.ViewBinding
    public ConstraintLayout getRoot() {
        return this.rootView;
    }

    public static ViewSleepAnalysisBinding inflate(LayoutInflater inflater) {
        return inflate(inflater, null, false);
    }

    public static ViewSleepAnalysisBinding inflate(LayoutInflater inflater, ViewGroup parent, boolean attachToParent) {
        View viewInflate = inflater.inflate(R.layout.view_sleep_analysis, parent, false);
        if (attachToParent) {
            parent.addView(viewInflate);
        }
        return bind(viewInflate);
    }

    public static ViewSleepAnalysisBinding bind(View rootView) {
        int i = R.id.tv_1;
        TextView textView = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_1);
        if (textView != null) {
            i = R.id.tv_detail_group;
            Group group = (Group) ViewBindings.findChildViewById(rootView, R.id.tv_detail_group);
            if (group != null) {
                i = R.id.tv_sleep_hour;
                TextView textView2 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_hour);
                if (textView2 != null) {
                    i = R.id.tv_sleep_min;
                    TextView textView3 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_min);
                    if (textView3 != null) {
                        i = R.id.tv_sleep_status;
                        TextView textView4 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_status);
                        if (textView4 != null) {
                            i = R.id.tv_sleep_total_time;
                            TextView textView5 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_total_time);
                            if (textView5 != null) {
                                i = R.id.tv_sleep_unit_h;
                                TextView textView6 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_unit_h);
                                if (textView6 != null) {
                                    i = R.id.tv_sleep_unit_min;
                                    TextView textView7 = (TextView) ViewBindings.findChildViewById(rootView, R.id.tv_sleep_unit_min);
                                    if (textView7 != null) {
                                        return new ViewSleepAnalysisBinding((ConstraintLayout) rootView, textView, group, textView2, textView3, textView4, textView5, textView6, textView7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        throw new NullPointerException("Missing required view with ID: ".concat(rootView.getResources().getResourceName(i)));
    }
}package com.qcwireless.qcwatch.ui.base.bean.request.healthy;

import java.util.List;

/* loaded from: classes3.dex */
public class CommitSleepNewProtocolParam {
    public List<SleepList> data;
    public String deviceAddress;
    public String deviceName;
    public long uid;

    public static class SleepList {
        public String date;
        public List<SleepDetail> detail;
        public int et;
        public int st;

        public static class SleepDetail {
            public int d;
            public int t;
        }
    }
}package com.qcwireless.qcwatch.ui.base.bean.request.healthy;

import java.util.List;

/* loaded from: classes3.dex */
public class CommitSleepNewProtocolParam {
    public List<SleepList> data;
    public String deviceAddress;
    public String deviceName;
    public long uid;

    public static class SleepList {
        public String date;
        public List<SleepDetail> detail;
        public int et;
        public int st;

        public static class SleepDetail {
            public int d;
            public int t;
        }
    }
}package com.qcwireless.qcwatch.ui.base.bean.request.healthy;

import java.util.List;

/* loaded from: classes3.dex */
public class CommitSleepNewProtocolParam {
    public List<SleepList> data;
    public String deviceAddress;
    public String deviceName;
    public long uid;

    public static class SleepList {
        public String date;
        public List<SleepDetail> detail;
        public int et;
        public int st;

        public static class SleepDetail {
            public int d;
            public int t;
        }
    }
}package com.qcwireless.qcwatch.ui.base.bean.request.healthy;

import java.util.List;

/* loaded from: classes3.dex */
public class CommitSleepNewProtocolParam {
    public List<SleepList> data;
    public String deviceAddress;
    public String deviceName;
    public long uid;

    public static class SleepList {
        public String date;
        public List<SleepDetail> detail;
        public int et;
        public int st;

        public static class SleepDetail {
            public int d;
            public int t;
        }
    }
}package com.qcwireless.qcwatch.ui.base.bean.request.healthy;

import java.util.List;

/* loaded from: classes3.dex */
public class CommitSleepNewProtocolParam {
    public List<SleepList> data;
    public String deviceAddress;
    public String deviceName;
    public long uid;

    public static class SleepList {
        public String date;
        public List<SleepDetail> detail;
        public int et;
        public int st;

        public static class SleepDetail {
            public int d;
            public int t;
        }
    }
}package com.qcwireless.qcwatch.ui.base.bean.request.healthy;

import java.util.List;
import kotlin.Metadata;

/* compiled from: SleepDetailRequest.kt */
@Metadata(d1 = {"\u0000(\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000e\n\u0002\b\b\n\u0002\u0010\t\n\u0002\b\u0006\u0018\u00002\u00020\u0001:\u0001\u0019B\u0005¢\u0006\u0002\u0010\u0002R\"\u0010\u0003\u001a\n\u0012\u0004\u0012\u00020\u0005\u0018\u00010\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0006\u0010\u0007\"\u0004\b\b\u0010\tR\u001c\u0010\n\u001a\u0004\u0018\u00010\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\r\"\u0004\b\u000e\u0010\u000fR\u001c\u0010\u0010\u001a\u0004\u0018\u00010\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0011\u0010\r\"\u0004\b\u0012\u0010\u000fR\u001a\u0010\u0013\u001a\u00020\u0014X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0015\u0010\u0016\"\u0004\b\u0017\u0010\u0018¨\u0006\u001a"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepDetailRequest;", "", "()V", "datas", "", "Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepDetailRequest$SleepDetailItem;", "getDatas", "()Ljava/util/List;", "setDatas", "(Ljava/util/List;)V", "deviceId", "", "getDeviceId", "()Ljava/lang/String;", "setDeviceId", "(Ljava/lang/String;)V", "deviceType", "getDeviceType", "setDeviceType", "uid", "", "getUid", "()J", "setUid", "(J)V", "SleepDetailItem", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final class SleepDetailRequest {
    private List<SleepDetailItem> datas;
    private String deviceId;
    private String deviceType;
    private long uid;

    public final long getUid() {
        return this.uid;
    }

    public final void setUid(long j) {
        this.uid = j;
    }

    public final String getDeviceId() {
        return this.deviceId;
    }

    public final void setDeviceId(String str) {
        this.deviceId = str;
    }

    public final String getDeviceType() {
        return this.deviceType;
    }

    public final void setDeviceType(String str) {
        this.deviceType = str;
    }

    public final List<SleepDetailItem> getDatas() {
        return this.datas;
    }

    public final void setDatas(List<SleepDetailItem> list) {
        this.datas = list;
    }

    /* compiled from: SleepDetailRequest.kt */
    @Metadata(d1 = {"\u0000 \n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0010 \n\u0002\u0010\b\n\u0002\b\u0010\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002R\u001c\u0010\u0003\u001a\u0004\u0018\u00010\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0005\u0010\u0006\"\u0004\b\u0007\u0010\bR\"\u0010\t\u001a\n\u0012\u0004\u0012\u00020\u000b\u0018\u00010\nX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\r\"\u0004\b\u000e\u0010\u000fR\u001a\u0010\u0010\u001a\u00020\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0011\u0010\u0012\"\u0004\b\u0013\u0010\u0014R\"\u0010\u0015\u001a\n\u0012\u0004\u0012\u00020\u000b\u0018\u00010\nX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0016\u0010\r\"\u0004\b\u0017\u0010\u000fR\u001a\u0010\u0018\u001a\u00020\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0019\u0010\u0012\"\u0004\b\u001a\u0010\u0014¨\u0006\u001b"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepDetailRequest$SleepDetailItem;", "", "()V", "date", "", "getDate", "()Ljava/lang/String;", "setDate", "(Ljava/lang/String;)V", "indexs", "", "", "getIndexs", "()Ljava/util/List;", "setIndexs", "(Ljava/util/List;)V", "intervar", "getIntervar", "()I", "setIntervar", "(I)V", "qualitys", "getQualitys", "setQualitys", "totalActiveTime", "getTotalActiveTime", "setTotalActiveTime", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
    public static final class SleepDetailItem {
        private String date;
        private List<Integer> indexs;
        private int intervar;
        private List<Integer> qualitys;
        private int totalActiveTime;

        public final String getDate() {
            return this.date;
        }

        public final void setDate(String str) {
            this.date = str;
        }

        public final int getIntervar() {
            return this.intervar;
        }

        public final void setIntervar(int i) {
            this.intervar = i;
        }

        public final int getTotalActiveTime() {
            return this.totalActiveTime;
        }

        public final void setTotalActiveTime(int i) {
            this.totalActiveTime = i;
        }

        public final List<Integer> getIndexs() {
            return this.indexs;
        }

        public final void setIndexs(List<Integer> list) {
            this.indexs = list;
        }

        public final List<Integer> getQualitys() {
            return this.qualitys;
        }

        public final void setQualitys(List<Integer> list) {
            this.qualitys = list;
        }
    }
}package com.qcwireless.qcwatch.ui.base.bean.request.healthy;

import java.util.List;
import kotlin.Metadata;

/* compiled from: SleepDetailRequest.kt */
@Metadata(d1 = {"\u0000(\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000e\n\u0002\b\b\n\u0002\u0010\t\n\u0002\b\u0006\u0018\u00002\u00020\u0001:\u0001\u0019B\u0005¢\u0006\u0002\u0010\u0002R\"\u0010\u0003\u001a\n\u0012\u0004\u0012\u00020\u0005\u0018\u00010\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0006\u0010\u0007\"\u0004\b\b\u0010\tR\u001c\u0010\n\u001a\u0004\u0018\u00010\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\r\"\u0004\b\u000e\u0010\u000fR\u001c\u0010\u0010\u001a\u0004\u0018\u00010\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0011\u0010\r\"\u0004\b\u0012\u0010\u000fR\u001a\u0010\u0013\u001a\u00020\u0014X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0015\u0010\u0016\"\u0004\b\u0017\u0010\u0018¨\u0006\u001a"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepDetailRequest;", "", "()V", "datas", "", "Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepDetailRequest$SleepDetailItem;", "getDatas", "()Ljava/util/List;", "setDatas", "(Ljava/util/List;)V", "deviceId", "", "getDeviceId", "()Ljava/lang/String;", "setDeviceId", "(Ljava/lang/String;)V", "deviceType", "getDeviceType", "setDeviceType", "uid", "", "getUid", "()J", "setUid", "(J)V", "SleepDetailItem", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final class SleepDetailRequest {
    private List<SleepDetailItem> datas;
    private String deviceId;
    private String deviceType;
    private long uid;

    public final long getUid() {
        return this.uid;
    }

    public final void setUid(long j) {
        this.uid = j;
    }

    public final String getDeviceId() {
        return this.deviceId;
    }

    public final void setDeviceId(String str) {
        this.deviceId = str;
    }

    public final String getDeviceType() {
        return this.deviceType;
    }

    public final void setDeviceType(String str) {
        this.deviceType = str;
    }

    public final List<SleepDetailItem> getDatas() {
        return this.datas;
    }

    public final void setDatas(List<SleepDetailItem> list) {
        this.datas = list;
    }

    /* compiled from: SleepDetailRequest.kt */
    @Metadata(d1 = {"\u0000 \n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0010 \n\u0002\u0010\b\n\u0002\b\u0010\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002R\u001c\u0010\u0003\u001a\u0004\u0018\u00010\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0005\u0010\u0006\"\u0004\b\u0007\u0010\bR\"\u0010\t\u001a\n\u0012\u0004\u0012\u00020\u000b\u0018\u00010\nX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\r\"\u0004\b\u000e\u0010\u000fR\u001a\u0010\u0010\u001a\u00020\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0011\u0010\u0012\"\u0004\b\u0013\u0010\u0014R\"\u0010\u0015\u001a\n\u0012\u0004\u0012\u00020\u000b\u0018\u00010\nX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0016\u0010\r\"\u0004\b\u0017\u0010\u000fR\u001a\u0010\u0018\u001a\u00020\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0019\u0010\u0012\"\u0004\b\u001a\u0010\u0014¨\u0006\u001b"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepDetailRequest$SleepDetailItem;", "", "()V", "date", "", "getDate", "()Ljava/lang/String;", "setDate", "(Ljava/lang/String;)V", "indexs", "", "", "getIndexs", "()Ljava/util/List;", "setIndexs", "(Ljava/util/List;)V", "intervar", "getIntervar", "()I", "setIntervar", "(I)V", "qualitys", "getQualitys", "setQualitys", "totalActiveTime", "getTotalActiveTime", "setTotalActiveTime", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
    public static final class SleepDetailItem {
        private String date;
        private List<Integer> indexs;
        private int intervar;
        private List<Integer> qualitys;
        private int totalActiveTime;

        public final String getDate() {
            return this.date;
        }

        public final void setDate(String str) {
            this.date = str;
        }

        public final int getIntervar() {
            return this.intervar;
        }

        public final void setIntervar(int i) {
            this.intervar = i;
        }

        public final int getTotalActiveTime() {
            return this.totalActiveTime;
        }

        public final void setTotalActiveTime(int i) {
            this.totalActiveTime = i;
        }

        public final List<Integer> getIndexs() {
            return this.indexs;
        }

        public final void setIndexs(List<Integer> list) {
            this.indexs = list;
        }

        public final List<Integer> getQualitys() {
            return this.qualitys;
        }

        public final void setQualitys(List<Integer> list) {
            this.qualitys = list;
        }
    }
}package com.qcwireless.qcwatch.ui.base.bean.request.healthy;

import java.util.List;
import kotlin.Metadata;

/* compiled from: SleepDetailRequest.kt */
@Metadata(d1 = {"\u0000(\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u000e\n\u0002\b\b\n\u0002\u0010\t\n\u0002\b\u0006\u0018\u00002\u00020\u0001:\u0001\u0019B\u0005¢\u0006\u0002\u0010\u0002R\"\u0010\u0003\u001a\n\u0012\u0004\u0012\u00020\u0005\u0018\u00010\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0006\u0010\u0007\"\u0004\b\b\u0010\tR\u001c\u0010\n\u001a\u0004\u0018\u00010\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\r\"\u0004\b\u000e\u0010\u000fR\u001c\u0010\u0010\u001a\u0004\u0018\u00010\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0011\u0010\r\"\u0004\b\u0012\u0010\u000fR\u001a\u0010\u0013\u001a\u00020\u0014X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0015\u0010\u0016\"\u0004\b\u0017\u0010\u0018¨\u0006\u001a"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepDetailRequest;", "", "()V", "datas", "", "Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepDetailRequest$SleepDetailItem;", "getDatas", "()Ljava/util/List;", "setDatas", "(Ljava/util/List;)V", "deviceId", "", "getDeviceId", "()Ljava/lang/String;", "setDeviceId", "(Ljava/lang/String;)V", "deviceType", "getDeviceType", "setDeviceType", "uid", "", "getUid", "()J", "setUid", "(J)V", "SleepDetailItem", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final class SleepDetailRequest {
    private List<SleepDetailItem> datas;
    private String deviceId;
    private String deviceType;
    private long uid;

    public final long getUid() {
        return this.uid;
    }

    public final void setUid(long j) {
        this.uid = j;
    }

    public final String getDeviceId() {
        return this.deviceId;
    }

    public final void setDeviceId(String str) {
        this.deviceId = str;
    }

    public final String getDeviceType() {
        return this.deviceType;
    }

    public final void setDeviceType(String str) {
        this.deviceType = str;
    }

    public final List<SleepDetailItem> getDatas() {
        return this.datas;
    }

    public final void setDatas(List<SleepDetailItem> list) {
        this.datas = list;
    }

    /* compiled from: SleepDetailRequest.kt */
    @Metadata(d1 = {"\u0000 \n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0005\n\u0002\u0010 \n\u0002\u0010\b\n\u0002\b\u0010\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002R\u001c\u0010\u0003\u001a\u0004\u0018\u00010\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0005\u0010\u0006\"\u0004\b\u0007\u0010\bR\"\u0010\t\u001a\n\u0012\u0004\u0012\u00020\u000b\u0018\u00010\nX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\f\u0010\r\"\u0004\b\u000e\u0010\u000fR\u001a\u0010\u0010\u001a\u00020\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0011\u0010\u0012\"\u0004\b\u0013\u0010\u0014R\"\u0010\u0015\u001a\n\u0012\u0004\u0012\u00020\u000b\u0018\u00010\nX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0016\u0010\r\"\u0004\b\u0017\u0010\u000fR\u001a\u0010\u0018\u001a\u00020\u000bX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0019\u0010\u0012\"\u0004\b\u001a\u0010\u0014¨\u0006\u001b"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepDetailRequest$SleepDetailItem;", "", "()V", "date", "", "getDate", "()Ljava/lang/String;", "setDate", "(Ljava/lang/String;)V", "indexs", "", "", "getIndexs", "()Ljava/util/List;", "setIndexs", "(Ljava/util/List;)V", "intervar", "getIntervar", "()I", "setIntervar", "(I)V", "qualitys", "getQualitys", "setQualitys", "totalActiveTime", "getTotalActiveTime", "setTotalActiveTime", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
    public static final class SleepDetailItem {
        private String date;
        private List<Integer> indexs;
        private int intervar;
        private List<Integer> qualitys;
        private int totalActiveTime;

        public final String getDate() {
            return this.date;
        }

        public final void setDate(String str) {
            this.date = str;
        }

        public final int getIntervar() {
            return this.intervar;
        }

        public final void setIntervar(int i) {
            this.intervar = i;
        }

        public final int getTotalActiveTime() {
            return this.totalActiveTime;
        }

        public final void setTotalActiveTime(int i) {
            this.totalActiveTime = i;
        }

        public final List<Integer> getIndexs() {
            return this.indexs;
        }

        public final void setIndexs(List<Integer> list) {
            this.indexs = list;
        }

        public final List<Integer> getQualitys() {
            return this.qualitys;
        }

        public final void setQualitys(List<Integer> list) {
            this.qualitys = list;
        }
    }
}package com.qcwireless.qcwatch.ui.base.bean.request.healthy;

import kotlin.Metadata;

/* compiled from: SleepTypeAndDuration.kt */
@Metadata(d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\b\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002R\u001a\u0010\u0003\u001a\u00020\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0005\u0010\u0006\"\u0004\b\u0007\u0010\bR\u001a\u0010\t\u001a\u00020\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\n\u0010\u0006\"\u0004\b\u000b\u0010\b¨\u0006\f"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/bean/request/healthy/SleepTypeAndDuration;", "", "()V", "d", "", "getD", "()I", "setD", "(I)V", "t", "getT", "setT", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final class SleepTypeAndDuration {
    private int d;
    private int t;

    public final int getD() {
        return this.d;
    }

    public final void setD(int i) {
        this.d = i;
    }

    public final int getT() {
        return this.t;
    }

    public final void setT(int i) {
        this.t = i;
    }
}package com.qcwireless.qcwatch.ui.base.bean.response.healthy;

import java.util.List;

/* loaded from: classes3.dex */
public class SleepDetailNewProtocolResp {
    public List<SleepDetail> datas;
    public String date;
    public String deviceAddress;
    public String deviceName;
    public int et;
    public int st;
    public long uid;
    public long updateTime;

    public static class SleepDetail {
        public int d;
        public int t;
    }
}package com.qcwireless.qcwatch.ui.base.bean.response.healthy;

import java.util.ArrayList;
import java.util.List;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;

/* compiled from: SleepDetailResp.kt */
@Metadata(d1 = {"\u0000(\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u000b\n\u0002\u0010 \n\u0002\u0010\b\n\u0002\b\r\n\u0002\u0010\t\n\u0002\b\b\u0018\u00002\u00020\u0001B\u0005¢\u0006\u0002\u0010\u0002R\u001c\u0010\u0003\u001a\u0004\u0018\u00010\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0005\u0010\u0006\"\u0004\b\u0007\u0010\bR\u001c\u0010\t\u001a\u0004\u0018\u00010\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\n\u0010\u0006\"\u0004\b\u000b\u0010\bR\u001c\u0010\f\u001a\u0004\u0018\u00010\u0004X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\r\u0010\u0006\"\u0004\b\u000e\u0010\bR \u0010\u000f\u001a\b\u0012\u0004\u0012\u00020\u00110\u0010X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0012\u0010\u0013\"\u0004\b\u0014\u0010\u0015R\u001a\u0010\u0016\u001a\u00020\u0011X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0017\u0010\u0018\"\u0004\b\u0019\u0010\u001aR \u0010\u001b\u001a\b\u0012\u0004\u0012\u00020\u00110\u0010X\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001c\u0010\u0013\"\u0004\b\u001d\u0010\u0015R\u001a\u0010\u001e\u001a\u00020\u001fX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b \u0010!\"\u0004\b\"\u0010#R\u001a\u0010$\u001a\u00020\u001fX\u0086\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b%\u0010!\"\u0004\b&\u0010#¨\u0006'"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailResp;", "", "()V", "date", "", "getDate", "()Ljava/lang/String;", "setDate", "(Ljava/lang/String;)V", "deviceId", "getDeviceId", "setDeviceId", "deviceType", "getDeviceType", "setDeviceType", "indexs", "", "", "getIndexs", "()Ljava/util/List;", "setIndexs", "(Ljava/util/List;)V", "intervar", "getIntervar", "()I", "setIntervar", "(I)V", "qualitys", "getQualitys", "setQualitys", "uid", "", "getUid", "()J", "setUid", "(J)V", "updateTime", "getUpdateTime", "setUpdateTime", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final class SleepDetailResp {
    private String date;
    private String deviceId;
    private String deviceType;
    private int intervar;
    private long uid;
    private long updateTime;
    private List<Integer> indexs = new ArrayList();
    private List<Integer> qualitys = new ArrayList();

    public final long getUid() {
        return this.uid;
    }

    public final void setUid(long j) {
        this.uid = j;
    }

    public final String getDeviceId() {
        return this.deviceId;
    }

    public final void setDeviceId(String str) {
        this.deviceId = str;
    }

    public final String getDeviceType() {
        return this.deviceType;
    }

    public final void setDeviceType(String str) {
        this.deviceType = str;
    }

    public final String getDate() {
        return this.date;
    }

    public final void setDate(String str) {
        this.date = str;
    }

    public final int getIntervar() {
        return this.intervar;
    }

    public final void setIntervar(int i) {
        this.intervar = i;
    }

    public final List<Integer> getIndexs() {
        return this.indexs;
    }

    public final void setIndexs(List<Integer> list) {
        Intrinsics.checkNotNullParameter(list, "<set-?>");
        this.indexs = list;
    }

    public final List<Integer> getQualitys() {
        return this.qualitys;
    }

    public final void setQualitys(List<Integer> list) {
        Intrinsics.checkNotNullParameter(list, "<set-?>");
        this.qualitys = list;
    }

    public final long getUpdateTime() {
        return this.updateTime;
    }

    public final void setUpdateTime(long j) {
        this.updateTime = j;
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail;
import java.util.List;
import kotlin.Metadata;

/* compiled from: QcSleepDetailDao.kt */
@Metadata(d1 = {"\u0000 \n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0003\bg\u0018\u00002\b\u0012\u0004\u0012\u00020\u00020\u0001J\u001a\u0010\u0003\u001a\u0004\u0018\u00010\u00022\u0006\u0010\u0004\u001a\u00020\u00052\u0006\u0010\u0006\u001a\u00020\u0005H'J\u000e\u0010\u0007\u001a\b\u0012\u0004\u0012\u00020\u00020\bH'J\u0018\u0010\t\u001a\n\u0012\u0004\u0012\u00020\u0002\u0018\u00010\b2\u0006\u0010\u0006\u001a\u00020\u0005H'J\u0012\u0010\n\u001a\u0004\u0018\u00010\u00022\u0006\u0010\u0006\u001a\u00020\u0005H'¨\u0006\u000b"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/dao/QcSleepDetailDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/dao/BaseDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepDetail;", "queryByDate", "dateStr", "", "deviceAddress", "queryBySync", "", "queryDaysHistoryDate", "queryLastSyncDate", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public interface QcSleepDetailDao extends BaseDao<SleepDetail> {
    SleepDetail queryByDate(String dateStr, String deviceAddress);

    List<SleepDetail> queryBySync();

    List<SleepDetail> queryDaysHistoryDate(String deviceAddress);

    SleepDetail queryLastSyncDate(String deviceAddress);
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepDetailDao_Impl implements QcSleepDetailDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __deletionAdapterOfSleepDetail;
    private final EntityInsertionAdapter<SleepDetail> __insertionAdapterOfSleepDetail;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __updateAdapterOfSleepDetail;

    public QcSleepDetailDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepDetail = new EntityInsertionAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_detail` (`device_address`,`date_str`,`interval`,`index_str`,`quality`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_detail` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepDetail value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_detail` SET `device_address` = ?,`date_str` = ?,`interval` = ?,`index_str` = ?,`quality` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepDetail.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepDetail> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert((EntityInsertionAdapter<SleepDetail>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepDetail> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepDetail... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryDaysHistoryDate(final String deviceAddress) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where device_address=? order by date_str desc LIMIT 7 ", 1);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_detail`.`device_address` AS `device_address`, `sleep_detail`.`date_str` AS `date_str`, `sleep_detail`.`interval` AS `interval`, `sleep_detail`.`index_str` AS `index_str`, `sleep_detail`.`quality` AS `quality`, `sleep_detail`.`sync` AS `sync`, `sleep_detail`.`last_sync_time` AS `last_sync_time` from sleep_detail where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.getInt(2), cursorQuery.isNull(3) ? null : cursorQuery.getString(3), cursorQuery.isNull(4) ? null : cursorQuery.getString(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepDetailDao_Impl implements QcSleepDetailDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __deletionAdapterOfSleepDetail;
    private final EntityInsertionAdapter<SleepDetail> __insertionAdapterOfSleepDetail;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __updateAdapterOfSleepDetail;

    public QcSleepDetailDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepDetail = new EntityInsertionAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_detail` (`device_address`,`date_str`,`interval`,`index_str`,`quality`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_detail` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepDetail value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_detail` SET `device_address` = ?,`date_str` = ?,`interval` = ?,`index_str` = ?,`quality` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepDetail.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepDetail> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert((EntityInsertionAdapter<SleepDetail>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepDetail> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepDetail... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryDaysHistoryDate(final String deviceAddress) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where device_address=? order by date_str desc LIMIT 7 ", 1);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_detail`.`device_address` AS `device_address`, `sleep_detail`.`date_str` AS `date_str`, `sleep_detail`.`interval` AS `interval`, `sleep_detail`.`index_str` AS `index_str`, `sleep_detail`.`quality` AS `quality`, `sleep_detail`.`sync` AS `sync`, `sleep_detail`.`last_sync_time` AS `last_sync_time` from sleep_detail where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.getInt(2), cursorQuery.isNull(3) ? null : cursorQuery.getString(3), cursorQuery.isNull(4) ? null : cursorQuery.getString(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepDetailDao_Impl implements QcSleepDetailDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __deletionAdapterOfSleepDetail;
    private final EntityInsertionAdapter<SleepDetail> __insertionAdapterOfSleepDetail;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __updateAdapterOfSleepDetail;

    public QcSleepDetailDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepDetail = new EntityInsertionAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_detail` (`device_address`,`date_str`,`interval`,`index_str`,`quality`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_detail` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepDetail value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_detail` SET `device_address` = ?,`date_str` = ?,`interval` = ?,`index_str` = ?,`quality` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepDetail.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepDetail> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert((EntityInsertionAdapter<SleepDetail>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepDetail> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepDetail... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryDaysHistoryDate(final String deviceAddress) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where device_address=? order by date_str desc LIMIT 7 ", 1);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_detail`.`device_address` AS `device_address`, `sleep_detail`.`date_str` AS `date_str`, `sleep_detail`.`interval` AS `interval`, `sleep_detail`.`index_str` AS `index_str`, `sleep_detail`.`quality` AS `quality`, `sleep_detail`.`sync` AS `sync`, `sleep_detail`.`last_sync_time` AS `last_sync_time` from sleep_detail where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.getInt(2), cursorQuery.isNull(3) ? null : cursorQuery.getString(3), cursorQuery.isNull(4) ? null : cursorQuery.getString(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepDetailDao_Impl implements QcSleepDetailDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __deletionAdapterOfSleepDetail;
    private final EntityInsertionAdapter<SleepDetail> __insertionAdapterOfSleepDetail;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __updateAdapterOfSleepDetail;

    public QcSleepDetailDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepDetail = new EntityInsertionAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_detail` (`device_address`,`date_str`,`interval`,`index_str`,`quality`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_detail` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepDetail value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_detail` SET `device_address` = ?,`date_str` = ?,`interval` = ?,`index_str` = ?,`quality` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepDetail.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepDetail> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert((EntityInsertionAdapter<SleepDetail>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepDetail> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepDetail... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryDaysHistoryDate(final String deviceAddress) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where device_address=? order by date_str desc LIMIT 7 ", 1);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_detail`.`device_address` AS `device_address`, `sleep_detail`.`date_str` AS `date_str`, `sleep_detail`.`interval` AS `interval`, `sleep_detail`.`index_str` AS `index_str`, `sleep_detail`.`quality` AS `quality`, `sleep_detail`.`sync` AS `sync`, `sleep_detail`.`last_sync_time` AS `last_sync_time` from sleep_detail where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.getInt(2), cursorQuery.isNull(3) ? null : cursorQuery.getString(3), cursorQuery.isNull(4) ? null : cursorQuery.getString(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepDetailDao_Impl implements QcSleepDetailDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __deletionAdapterOfSleepDetail;
    private final EntityInsertionAdapter<SleepDetail> __insertionAdapterOfSleepDetail;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __updateAdapterOfSleepDetail;

    public QcSleepDetailDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepDetail = new EntityInsertionAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_detail` (`device_address`,`date_str`,`interval`,`index_str`,`quality`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_detail` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepDetail value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_detail` SET `device_address` = ?,`date_str` = ?,`interval` = ?,`index_str` = ?,`quality` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepDetail.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepDetail> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert((EntityInsertionAdapter<SleepDetail>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepDetail> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepDetail... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryDaysHistoryDate(final String deviceAddress) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where device_address=? order by date_str desc LIMIT 7 ", 1);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_detail`.`device_address` AS `device_address`, `sleep_detail`.`date_str` AS `date_str`, `sleep_detail`.`interval` AS `interval`, `sleep_detail`.`index_str` AS `index_str`, `sleep_detail`.`quality` AS `quality`, `sleep_detail`.`sync` AS `sync`, `sleep_detail`.`last_sync_time` AS `last_sync_time` from sleep_detail where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.getInt(2), cursorQuery.isNull(3) ? null : cursorQuery.getString(3), cursorQuery.isNull(4) ? null : cursorQuery.getString(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import com.qcwireless.qcwatch.ui.base.repository.entity.SleepLunchProtocol;
import kotlin.Metadata;

/* compiled from: QcSleepLunchProtocolDao.kt */
@Metadata(d1 = {"\u0000\u0018\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\bg\u0018\u00002\b\u0012\u0004\u0012\u00020\u00020\u0001J\u001a\u0010\u0003\u001a\u0004\u0018\u00010\u00022\u0006\u0010\u0004\u001a\u00020\u00052\u0006\u0010\u0006\u001a\u00020\u0005H'J\u0012\u0010\u0007\u001a\u0004\u0018\u00010\u00022\u0006\u0010\u0006\u001a\u00020\u0005H'¨\u0006\b"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/dao/QcSleepLunchProtocolDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/dao/BaseDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepLunchProtocol;", "queryByDate", "dateStr", "", "deviceAddress", "queryLastSyncDate", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public interface QcSleepLunchProtocolDao extends BaseDao<SleepLunchProtocol> {
    SleepLunchProtocol queryByDate(String dateStr, String deviceAddress);

    SleepLunchProtocol queryLastSyncDate(String deviceAddress);
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepLunchProtocol;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepLunchProtocolDao_Impl implements QcSleepLunchProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __deletionAdapterOfSleepLunchProtocol;
    private final EntityInsertionAdapter<SleepLunchProtocol> __insertionAdapterOfSleepLunchProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __updateAdapterOfSleepLunchProtocol;

    public QcSleepLunchProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepLunchProtocol = new EntityInsertionAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_lunch_protocol` (`device_address`,`date_str`,`detail`,`lunch_st`,`lunch_et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_lunch_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepLunchProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_lunch_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`lunch_st` = ?,`lunch_et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepLunchProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepLunchProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert((EntityInsertionAdapter<SleepLunchProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepLunchProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepLunchProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepLunchProtocol;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepLunchProtocolDao_Impl implements QcSleepLunchProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __deletionAdapterOfSleepLunchProtocol;
    private final EntityInsertionAdapter<SleepLunchProtocol> __insertionAdapterOfSleepLunchProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __updateAdapterOfSleepLunchProtocol;

    public QcSleepLunchProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepLunchProtocol = new EntityInsertionAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_lunch_protocol` (`device_address`,`date_str`,`detail`,`lunch_st`,`lunch_et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_lunch_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepLunchProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_lunch_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`lunch_st` = ?,`lunch_et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepLunchProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepLunchProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert((EntityInsertionAdapter<SleepLunchProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepLunchProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepLunchProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepLunchProtocol;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepLunchProtocolDao_Impl implements QcSleepLunchProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __deletionAdapterOfSleepLunchProtocol;
    private final EntityInsertionAdapter<SleepLunchProtocol> __insertionAdapterOfSleepLunchProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __updateAdapterOfSleepLunchProtocol;

    public QcSleepLunchProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepLunchProtocol = new EntityInsertionAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_lunch_protocol` (`device_address`,`date_str`,`detail`,`lunch_st`,`lunch_et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_lunch_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepLunchProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_lunch_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`lunch_st` = ?,`lunch_et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepLunchProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepLunchProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert((EntityInsertionAdapter<SleepLunchProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepLunchProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepLunchProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepLunchProtocol;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepLunchProtocolDao_Impl implements QcSleepLunchProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __deletionAdapterOfSleepLunchProtocol;
    private final EntityInsertionAdapter<SleepLunchProtocol> __insertionAdapterOfSleepLunchProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __updateAdapterOfSleepLunchProtocol;

    public QcSleepLunchProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepLunchProtocol = new EntityInsertionAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_lunch_protocol` (`device_address`,`date_str`,`detail`,`lunch_st`,`lunch_et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_lunch_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepLunchProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_lunch_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`lunch_st` = ?,`lunch_et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepLunchProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepLunchProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert((EntityInsertionAdapter<SleepLunchProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepLunchProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepLunchProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepLunchProtocol;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepLunchProtocolDao_Impl implements QcSleepLunchProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __deletionAdapterOfSleepLunchProtocol;
    private final EntityInsertionAdapter<SleepLunchProtocol> __insertionAdapterOfSleepLunchProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepLunchProtocol> __updateAdapterOfSleepLunchProtocol;

    public QcSleepLunchProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepLunchProtocol = new EntityInsertionAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_lunch_protocol` (`device_address`,`date_str`,`detail`,`lunch_st`,`lunch_et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_lunch_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepLunchProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepLunchProtocol = new EntityDeletionOrUpdateAdapter<SleepLunchProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_lunch_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`lunch_st` = ?,`lunch_et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepLunchProtocol sleepLunchProtocol) {
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepLunchProtocol.getDateStr());
                }
                if (sleepLunchProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepLunchProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepLunchProtocol.getLunchSt());
                supportSQLiteStatement.bindLong(5, sleepLunchProtocol.getLunchEt());
                supportSQLiteStatement.bindLong(6, sleepLunchProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepLunchProtocol.getLastSyncTime());
                if (sleepLunchProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepLunchProtocol.getDeviceAddress());
                }
                if (sleepLunchProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepLunchProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepLunchProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepLunchProtocol.insert((EntityInsertionAdapter<SleepLunchProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepLunchProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepLunchProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepLunchProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepLunchProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepLunchProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao
    public SleepLunchProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_lunch_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepLunchProtocol sleepLunchProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "lunch_et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepLunchProtocol = new SleepLunchProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepLunchProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import com.qcwireless.qcwatch.ui.base.repository.entity.SleepNewProtocol;
import java.util.List;
import kotlin.Metadata;

/* compiled from: QcSleepNewProtocolDao.kt */
@Metadata(d1 = {"\u0000 \n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010 \n\u0002\b\u0002\bg\u0018\u00002\b\u0012\u0004\u0012\u00020\u00020\u0001J\u001a\u0010\u0003\u001a\u0004\u0018\u00010\u00022\u0006\u0010\u0004\u001a\u00020\u00052\u0006\u0010\u0006\u001a\u00020\u0005H'J\u000e\u0010\u0007\u001a\b\u0012\u0004\u0012\u00020\u00020\bH'J\u0012\u0010\t\u001a\u0004\u0018\u00010\u00022\u0006\u0010\u0006\u001a\u00020\u0005H'¨\u0006\n"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/dao/QcSleepNewProtocolDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/dao/BaseDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepNewProtocol;", "queryByDate", "dateStr", "", "deviceAddress", "queryBySync", "", "queryLastSyncDate", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public interface QcSleepNewProtocolDao extends BaseDao<SleepNewProtocol> {
    SleepNewProtocol queryByDate(String dateStr, String deviceAddress);

    List<SleepNewProtocol> queryBySync();

    SleepNewProtocol queryLastSyncDate(String deviceAddress);
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepNewProtocol;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepNewProtocolDao_Impl implements QcSleepNewProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __deletionAdapterOfSleepNewProtocol;
    private final EntityInsertionAdapter<SleepNewProtocol> __insertionAdapterOfSleepNewProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __updateAdapterOfSleepNewProtocol;

    public QcSleepNewProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepNewProtocol = new EntityInsertionAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_new_protocol` (`device_address`,`date_str`,`detail`,`st`,`et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_new_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepNewProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_new_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`st` = ?,`et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepNewProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepNewProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert((EntityInsertionAdapter<SleepNewProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepNewProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepNewProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public List<SleepNewProtocol> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_new_protocol`.`device_address` AS `device_address`, `sleep_new_protocol`.`date_str` AS `date_str`, `sleep_new_protocol`.`detail` AS `detail`, `sleep_new_protocol`.`st` AS `st`, `sleep_new_protocol`.`et` AS `et`, `sleep_new_protocol`.`sync` AS `sync`, `sleep_new_protocol`.`last_sync_time` AS `last_sync_time` from sleep_new_protocol where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepNewProtocol(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.isNull(2) ? null : cursorQuery.getString(2), cursorQuery.getInt(3), cursorQuery.getInt(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepNewProtocol;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepNewProtocolDao_Impl implements QcSleepNewProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __deletionAdapterOfSleepNewProtocol;
    private final EntityInsertionAdapter<SleepNewProtocol> __insertionAdapterOfSleepNewProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __updateAdapterOfSleepNewProtocol;

    public QcSleepNewProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepNewProtocol = new EntityInsertionAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_new_protocol` (`device_address`,`date_str`,`detail`,`st`,`et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_new_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepNewProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_new_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`st` = ?,`et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepNewProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepNewProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert((EntityInsertionAdapter<SleepNewProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepNewProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepNewProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public List<SleepNewProtocol> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_new_protocol`.`device_address` AS `device_address`, `sleep_new_protocol`.`date_str` AS `date_str`, `sleep_new_protocol`.`detail` AS `detail`, `sleep_new_protocol`.`st` AS `st`, `sleep_new_protocol`.`et` AS `et`, `sleep_new_protocol`.`sync` AS `sync`, `sleep_new_protocol`.`last_sync_time` AS `last_sync_time` from sleep_new_protocol where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepNewProtocol(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.isNull(2) ? null : cursorQuery.getString(2), cursorQuery.getInt(3), cursorQuery.getInt(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepNewProtocol;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepNewProtocolDao_Impl implements QcSleepNewProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __deletionAdapterOfSleepNewProtocol;
    private final EntityInsertionAdapter<SleepNewProtocol> __insertionAdapterOfSleepNewProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __updateAdapterOfSleepNewProtocol;

    public QcSleepNewProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepNewProtocol = new EntityInsertionAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_new_protocol` (`device_address`,`date_str`,`detail`,`st`,`et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_new_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepNewProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_new_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`st` = ?,`et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepNewProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepNewProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert((EntityInsertionAdapter<SleepNewProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepNewProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepNewProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public List<SleepNewProtocol> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_new_protocol`.`device_address` AS `device_address`, `sleep_new_protocol`.`date_str` AS `date_str`, `sleep_new_protocol`.`detail` AS `detail`, `sleep_new_protocol`.`st` AS `st`, `sleep_new_protocol`.`et` AS `et`, `sleep_new_protocol`.`sync` AS `sync`, `sleep_new_protocol`.`last_sync_time` AS `last_sync_time` from sleep_new_protocol where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepNewProtocol(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.isNull(2) ? null : cursorQuery.getString(2), cursorQuery.getInt(3), cursorQuery.getInt(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepNewProtocol;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepNewProtocolDao_Impl implements QcSleepNewProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __deletionAdapterOfSleepNewProtocol;
    private final EntityInsertionAdapter<SleepNewProtocol> __insertionAdapterOfSleepNewProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __updateAdapterOfSleepNewProtocol;

    public QcSleepNewProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepNewProtocol = new EntityInsertionAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_new_protocol` (`device_address`,`date_str`,`detail`,`st`,`et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_new_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepNewProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_new_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`st` = ?,`et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepNewProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepNewProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert((EntityInsertionAdapter<SleepNewProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepNewProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepNewProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public List<SleepNewProtocol> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_new_protocol`.`device_address` AS `device_address`, `sleep_new_protocol`.`date_str` AS `date_str`, `sleep_new_protocol`.`detail` AS `detail`, `sleep_new_protocol`.`st` AS `st`, `sleep_new_protocol`.`et` AS `et`, `sleep_new_protocol`.`sync` AS `sync`, `sleep_new_protocol`.`last_sync_time` AS `last_sync_time` from sleep_new_protocol where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepNewProtocol(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.isNull(2) ? null : cursorQuery.getString(2), cursorQuery.getInt(3), cursorQuery.getInt(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import com.qcwireless.qcwatch.ui.base.repository.entity.SleepTotalHistory;
import java.util.List;
import kotlin.Metadata;

/* compiled from: QcSleepTotalDao.kt */
@Metadata(d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0005\bg\u0018\u00002\b\u0012\u0004\u0012\u00020\u00020\u0001J&\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\u00062\u0006\u0010\b\u001a\u00020\u0006H'J\u001a\u0010\t\u001a\u0004\u0018\u00010\u00022\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\n\u001a\u00020\u0006H'¨\u0006\u000b"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/dao/QcSleepTotalDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/dao/BaseDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepTotalHistory;", "queryByAddressAndDate", "", "deviceAddress", "", "start", "end", "queryTotalSleepByAddressAndDate", "date", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public interface QcSleepTotalDao extends BaseDao<SleepTotalHistory> {
    List<SleepTotalHistory> queryByAddressAndDate(String deviceAddress, String start, String end);

    SleepTotalHistory queryTotalSleepByAddressAndDate(String deviceAddress, String date);
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepTotalHistory;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepTotalDao_Impl implements QcSleepTotalDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __deletionAdapterOfSleepTotalHistory;
    private final EntityInsertionAdapter<SleepTotalHistory> __insertionAdapterOfSleepTotalHistory;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __updateAdapterOfSleepTotalHistory;

    public QcSleepTotalDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepTotalHistory = new EntityInsertionAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_total` (`device_address`,`date_str`,`total_sleep`,`deep_sleep`,`light_sleep`,`rapid_sleep`,`awake`,`start_time`,`end_time`,`unix_time`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
            }
        };
        this.__deletionAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_total` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_total` SET `device_address` = ?,`date_str` = ?,`total_sleep` = ?,`deep_sleep` = ?,`light_sleep` = ?,`rapid_sleep` = ?,`awake` = ?,`start_time` = ?,`end_time` = ?,`unix_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(11);
                } else {
                    stmt.bindString(11, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(12);
                } else {
                    stmt.bindString(12, value.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepTotalHistory> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert((EntityInsertionAdapter<SleepTotalHistory>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepTotalHistory> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepTotalHistory... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public SleepTotalHistory queryTotalSleepByAddressAndDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where  device_address=? and date_str=? order by date_str desc LIMIT 1 ", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepTotalHistory sleepTotalHistory = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            if (cursorQuery.moveToFirst()) {
                sleepTotalHistory = new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10));
            }
            return sleepTotalHistory;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public List<SleepTotalHistory> queryByAddressAndDate(final String deviceAddress, final String start, final String end) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where device_address=? and unix_time >= ? and unix_time<=? order by unix_time asc", 3);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        if (start == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, start);
        }
        if (end == null) {
            roomSQLiteQueryAcquire.bindNull(3);
        } else {
            roomSQLiteQueryAcquire.bindString(3, end);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepTotalHistory;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepTotalDao_Impl implements QcSleepTotalDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __deletionAdapterOfSleepTotalHistory;
    private final EntityInsertionAdapter<SleepTotalHistory> __insertionAdapterOfSleepTotalHistory;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __updateAdapterOfSleepTotalHistory;

    public QcSleepTotalDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepTotalHistory = new EntityInsertionAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_total` (`device_address`,`date_str`,`total_sleep`,`deep_sleep`,`light_sleep`,`rapid_sleep`,`awake`,`start_time`,`end_time`,`unix_time`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
            }
        };
        this.__deletionAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_total` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_total` SET `device_address` = ?,`date_str` = ?,`total_sleep` = ?,`deep_sleep` = ?,`light_sleep` = ?,`rapid_sleep` = ?,`awake` = ?,`start_time` = ?,`end_time` = ?,`unix_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(11);
                } else {
                    stmt.bindString(11, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(12);
                } else {
                    stmt.bindString(12, value.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepTotalHistory> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert((EntityInsertionAdapter<SleepTotalHistory>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepTotalHistory> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepTotalHistory... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public SleepTotalHistory queryTotalSleepByAddressAndDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where  device_address=? and date_str=? order by date_str desc LIMIT 1 ", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepTotalHistory sleepTotalHistory = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            if (cursorQuery.moveToFirst()) {
                sleepTotalHistory = new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10));
            }
            return sleepTotalHistory;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public List<SleepTotalHistory> queryByAddressAndDate(final String deviceAddress, final String start, final String end) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where device_address=? and unix_time >= ? and unix_time<=? order by unix_time asc", 3);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        if (start == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, start);
        }
        if (end == null) {
            roomSQLiteQueryAcquire.bindNull(3);
        } else {
            roomSQLiteQueryAcquire.bindString(3, end);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepTotalHistory;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepTotalDao_Impl implements QcSleepTotalDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __deletionAdapterOfSleepTotalHistory;
    private final EntityInsertionAdapter<SleepTotalHistory> __insertionAdapterOfSleepTotalHistory;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __updateAdapterOfSleepTotalHistory;

    public QcSleepTotalDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepTotalHistory = new EntityInsertionAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_total` (`device_address`,`date_str`,`total_sleep`,`deep_sleep`,`light_sleep`,`rapid_sleep`,`awake`,`start_time`,`end_time`,`unix_time`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
            }
        };
        this.__deletionAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_total` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_total` SET `device_address` = ?,`date_str` = ?,`total_sleep` = ?,`deep_sleep` = ?,`light_sleep` = ?,`rapid_sleep` = ?,`awake` = ?,`start_time` = ?,`end_time` = ?,`unix_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(11);
                } else {
                    stmt.bindString(11, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(12);
                } else {
                    stmt.bindString(12, value.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepTotalHistory> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert((EntityInsertionAdapter<SleepTotalHistory>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepTotalHistory> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepTotalHistory... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public SleepTotalHistory queryTotalSleepByAddressAndDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where  device_address=? and date_str=? order by date_str desc LIMIT 1 ", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepTotalHistory sleepTotalHistory = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            if (cursorQuery.moveToFirst()) {
                sleepTotalHistory = new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10));
            }
            return sleepTotalHistory;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public List<SleepTotalHistory> queryByAddressAndDate(final String deviceAddress, final String start, final String end) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where device_address=? and unix_time >= ? and unix_time<=? order by unix_time asc", 3);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        if (start == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, start);
        }
        if (end == null) {
            roomSQLiteQueryAcquire.bindNull(3);
        } else {
            roomSQLiteQueryAcquire.bindString(3, end);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepDetailDao_Impl implements QcSleepDetailDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __deletionAdapterOfSleepDetail;
    private final EntityInsertionAdapter<SleepDetail> __insertionAdapterOfSleepDetail;
    private final EntityDeletionOrUpdateAdapter<SleepDetail> __updateAdapterOfSleepDetail;

    public QcSleepDetailDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepDetail = new EntityInsertionAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_detail` (`device_address`,`date_str`,`interval`,`index_str`,`quality`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_detail` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepDetail value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepDetail = new EntityDeletionOrUpdateAdapter<SleepDetail>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_detail` SET `device_address` = ?,`date_str` = ?,`interval` = ?,`index_str` = ?,`quality` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepDetail sleepDetail) {
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepDetail.getDateStr());
                }
                supportSQLiteStatement.bindLong(3, sleepDetail.getIntervar());
                if (sleepDetail.getIndex_str() == null) {
                    supportSQLiteStatement.bindNull(4);
                } else {
                    supportSQLiteStatement.bindString(4, sleepDetail.getIndex_str());
                }
                if (sleepDetail.getQuality() == null) {
                    supportSQLiteStatement.bindNull(5);
                } else {
                    supportSQLiteStatement.bindString(5, sleepDetail.getQuality());
                }
                supportSQLiteStatement.bindLong(6, sleepDetail.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepDetail.getLastSyncTime());
                if (sleepDetail.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepDetail.getDeviceAddress());
                }
                if (sleepDetail.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepDetail.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepDetail> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepDetail.insert((EntityInsertionAdapter<SleepDetail>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepDetail> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepDetail... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepDetail.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepDetail element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepDetail.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryDaysHistoryDate(final String deviceAddress) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where device_address=? order by date_str desc LIMIT 7 ", 1);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public SleepDetail queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_detail where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepDetail sleepDetail = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "interval");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "index_str");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "quality");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepDetail = new SleepDetail(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.isNull(columnIndexOrThrow4) ? null : cursorQuery.getString(columnIndexOrThrow4), cursorQuery.isNull(columnIndexOrThrow5) ? null : cursorQuery.getString(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepDetail;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao
    public List<SleepDetail> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_detail`.`device_address` AS `device_address`, `sleep_detail`.`date_str` AS `date_str`, `sleep_detail`.`interval` AS `interval`, `sleep_detail`.`index_str` AS `index_str`, `sleep_detail`.`quality` AS `quality`, `sleep_detail`.`sync` AS `sync`, `sleep_detail`.`last_sync_time` AS `last_sync_time` from sleep_detail where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepDetail(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.getInt(2), cursorQuery.isNull(3) ? null : cursorQuery.getString(3), cursorQuery.isNull(4) ? null : cursorQuery.getString(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import com.qcwireless.qcwatch.ui.base.repository.entity.SleepTotalHistory;
import java.util.List;
import kotlin.Metadata;

/* compiled from: QcSleepTotalDao.kt */
@Metadata(d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0005\bg\u0018\u00002\b\u0012\u0004\u0012\u00020\u00020\u0001J&\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\u0007\u001a\u00020\u00062\u0006\u0010\b\u001a\u00020\u0006H'J\u001a\u0010\t\u001a\u0004\u0018\u00010\u00022\u0006\u0010\u0005\u001a\u00020\u00062\u0006\u0010\n\u001a\u00020\u0006H'¨\u0006\u000b"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/dao/QcSleepTotalDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/dao/BaseDao;", "Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepTotalHistory;", "queryByAddressAndDate", "", "deviceAddress", "", "start", "end", "queryTotalSleepByAddressAndDate", "date", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public interface QcSleepTotalDao extends BaseDao<SleepTotalHistory> {
    List<SleepTotalHistory> queryByAddressAndDate(String deviceAddress, String start, String end);

    SleepTotalHistory queryTotalSleepByAddressAndDate(String deviceAddress, String date);
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepTotalHistory;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepTotalDao_Impl implements QcSleepTotalDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __deletionAdapterOfSleepTotalHistory;
    private final EntityInsertionAdapter<SleepTotalHistory> __insertionAdapterOfSleepTotalHistory;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __updateAdapterOfSleepTotalHistory;

    public QcSleepTotalDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepTotalHistory = new EntityInsertionAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_total` (`device_address`,`date_str`,`total_sleep`,`deep_sleep`,`light_sleep`,`rapid_sleep`,`awake`,`start_time`,`end_time`,`unix_time`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
            }
        };
        this.__deletionAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_total` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_total` SET `device_address` = ?,`date_str` = ?,`total_sleep` = ?,`deep_sleep` = ?,`light_sleep` = ?,`rapid_sleep` = ?,`awake` = ?,`start_time` = ?,`end_time` = ?,`unix_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(11);
                } else {
                    stmt.bindString(11, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(12);
                } else {
                    stmt.bindString(12, value.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepTotalHistory> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert((EntityInsertionAdapter<SleepTotalHistory>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepTotalHistory> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepTotalHistory... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public SleepTotalHistory queryTotalSleepByAddressAndDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where  device_address=? and date_str=? order by date_str desc LIMIT 1 ", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepTotalHistory sleepTotalHistory = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            if (cursorQuery.moveToFirst()) {
                sleepTotalHistory = new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10));
            }
            return sleepTotalHistory;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public List<SleepTotalHistory> queryByAddressAndDate(final String deviceAddress, final String start, final String end) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where device_address=? and unix_time >= ? and unix_time<=? order by unix_time asc", 3);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        if (start == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, start);
        }
        if (end == null) {
            roomSQLiteQueryAcquire.bindNull(3);
        } else {
            roomSQLiteQueryAcquire.bindString(3, end);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepNewProtocol;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepNewProtocolDao_Impl implements QcSleepNewProtocolDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __deletionAdapterOfSleepNewProtocol;
    private final EntityInsertionAdapter<SleepNewProtocol> __insertionAdapterOfSleepNewProtocol;
    private final EntityDeletionOrUpdateAdapter<SleepNewProtocol> __updateAdapterOfSleepNewProtocol;

    public QcSleepNewProtocolDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepNewProtocol = new EntityInsertionAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_new_protocol` (`device_address`,`date_str`,`detail`,`st`,`et`,`sync`,`last_sync_time`) VALUES (?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
            }
        };
        this.__deletionAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_new_protocol` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepNewProtocol value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepNewProtocol = new EntityDeletionOrUpdateAdapter<SleepNewProtocol>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_new_protocol` SET `device_address` = ?,`date_str` = ?,`detail` = ?,`st` = ?,`et` = ?,`sync` = ?,`last_sync_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement supportSQLiteStatement, SleepNewProtocol sleepNewProtocol) {
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(1);
                } else {
                    supportSQLiteStatement.bindString(1, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(2);
                } else {
                    supportSQLiteStatement.bindString(2, sleepNewProtocol.getDateStr());
                }
                if (sleepNewProtocol.getDetail() == null) {
                    supportSQLiteStatement.bindNull(3);
                } else {
                    supportSQLiteStatement.bindString(3, sleepNewProtocol.getDetail());
                }
                supportSQLiteStatement.bindLong(4, sleepNewProtocol.getSt());
                supportSQLiteStatement.bindLong(5, sleepNewProtocol.getEt());
                supportSQLiteStatement.bindLong(6, sleepNewProtocol.getSync() ? 1L : 0L);
                supportSQLiteStatement.bindLong(7, sleepNewProtocol.getLastSyncTime());
                if (sleepNewProtocol.getDeviceAddress() == null) {
                    supportSQLiteStatement.bindNull(8);
                } else {
                    supportSQLiteStatement.bindString(8, sleepNewProtocol.getDeviceAddress());
                }
                if (sleepNewProtocol.getDateStr() == null) {
                    supportSQLiteStatement.bindNull(9);
                } else {
                    supportSQLiteStatement.bindString(9, sleepNewProtocol.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepNewProtocol> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepNewProtocol.insert((EntityInsertionAdapter<SleepNewProtocol>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepNewProtocol> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepNewProtocol... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepNewProtocol.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepNewProtocol element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepNewProtocol.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryByDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where date_str=? and device_address=? order by date_str desc limit 1", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public SleepNewProtocol queryLastSyncDate(String str) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_new_protocol where  device_address=? order by date_str desc LIMIT 1 ", 1);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepNewProtocol sleepNewProtocol = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "detail");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "st");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "et");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "sync");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "last_sync_time");
            if (cursorQuery.moveToFirst()) {
                sleepNewProtocol = new SleepNewProtocol(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.isNull(columnIndexOrThrow3) ? null : cursorQuery.getString(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6) != 0, cursorQuery.getLong(columnIndexOrThrow7));
            }
            return sleepNewProtocol;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao
    public List<SleepNewProtocol> queryBySync() {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select `sleep_new_protocol`.`device_address` AS `device_address`, `sleep_new_protocol`.`date_str` AS `date_str`, `sleep_new_protocol`.`detail` AS `detail`, `sleep_new_protocol`.`st` AS `st`, `sleep_new_protocol`.`et` AS `et`, `sleep_new_protocol`.`sync` AS `sync`, `sleep_new_protocol`.`last_sync_time` AS `last_sync_time` from sleep_new_protocol where sync= 0 ", 0);
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepNewProtocol(cursorQuery.isNull(0) ? null : cursorQuery.getString(0), cursorQuery.isNull(1) ? null : cursorQuery.getString(1), cursorQuery.isNull(2) ? null : cursorQuery.getString(2), cursorQuery.getInt(3), cursorQuery.getInt(4), cursorQuery.getInt(5) != 0, cursorQuery.getLong(6)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepTotalHistory;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepTotalDao_Impl implements QcSleepTotalDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __deletionAdapterOfSleepTotalHistory;
    private final EntityInsertionAdapter<SleepTotalHistory> __insertionAdapterOfSleepTotalHistory;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __updateAdapterOfSleepTotalHistory;

    public QcSleepTotalDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepTotalHistory = new EntityInsertionAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_total` (`device_address`,`date_str`,`total_sleep`,`deep_sleep`,`light_sleep`,`rapid_sleep`,`awake`,`start_time`,`end_time`,`unix_time`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
            }
        };
        this.__deletionAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_total` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_total` SET `device_address` = ?,`date_str` = ?,`total_sleep` = ?,`deep_sleep` = ?,`light_sleep` = ?,`rapid_sleep` = ?,`awake` = ?,`start_time` = ?,`end_time` = ?,`unix_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(11);
                } else {
                    stmt.bindString(11, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(12);
                } else {
                    stmt.bindString(12, value.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepTotalHistory> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert((EntityInsertionAdapter<SleepTotalHistory>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepTotalHistory> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepTotalHistory... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public SleepTotalHistory queryTotalSleepByAddressAndDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where  device_address=? and date_str=? order by date_str desc LIMIT 1 ", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepTotalHistory sleepTotalHistory = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            if (cursorQuery.moveToFirst()) {
                sleepTotalHistory = new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10));
            }
            return sleepTotalHistory;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public List<SleepTotalHistory> queryByAddressAndDate(final String deviceAddress, final String start, final String end) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where device_address=? and unix_time >= ? and unix_time<=? order by unix_time asc", 3);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        if (start == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, start);
        }
        if (end == null) {
            roomSQLiteQueryAcquire.bindNull(3);
        } else {
            roomSQLiteQueryAcquire.bindString(3, end);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.dao;

import android.database.Cursor;
import androidx.room.EntityDeletionOrUpdateAdapter;
import androidx.room.EntityInsertionAdapter;
import androidx.room.RoomDatabase;
import androidx.room.RoomSQLiteQuery;
import androidx.room.util.CursorUtil;
import androidx.room.util.DBUtil;
import androidx.sqlite.db.SupportSQLiteStatement;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepTotalHistory;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/* loaded from: classes3.dex */
public final class QcSleepTotalDao_Impl implements QcSleepTotalDao {
    private final RoomDatabase __db;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __deletionAdapterOfSleepTotalHistory;
    private final EntityInsertionAdapter<SleepTotalHistory> __insertionAdapterOfSleepTotalHistory;
    private final EntityDeletionOrUpdateAdapter<SleepTotalHistory> __updateAdapterOfSleepTotalHistory;

    public QcSleepTotalDao_Impl(RoomDatabase __db) {
        this.__db = __db;
        this.__insertionAdapterOfSleepTotalHistory = new EntityInsertionAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.1
            @Override // androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "INSERT OR REPLACE INTO `sleep_total` (`device_address`,`date_str`,`total_sleep`,`deep_sleep`,`light_sleep`,`rapid_sleep`,`awake`,`start_time`,`end_time`,`unix_time`) VALUES (?,?,?,?,?,?,?,?,?,?)";
            }

            @Override // androidx.room.EntityInsertionAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
            }
        };
        this.__deletionAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.2
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "DELETE FROM `sleep_total` WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
            }
        };
        this.__updateAdapterOfSleepTotalHistory = new EntityDeletionOrUpdateAdapter<SleepTotalHistory>(__db) { // from class: com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao_Impl.3
            @Override // androidx.room.EntityDeletionOrUpdateAdapter, androidx.room.SharedSQLiteStatement
            public String createQuery() {
                return "UPDATE OR ABORT `sleep_total` SET `device_address` = ?,`date_str` = ?,`total_sleep` = ?,`deep_sleep` = ?,`light_sleep` = ?,`rapid_sleep` = ?,`awake` = ?,`start_time` = ?,`end_time` = ?,`unix_time` = ? WHERE `device_address` = ? AND `date_str` = ?";
            }

            @Override // androidx.room.EntityDeletionOrUpdateAdapter
            public void bind(SupportSQLiteStatement stmt, SleepTotalHistory value) {
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(1);
                } else {
                    stmt.bindString(1, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(2);
                } else {
                    stmt.bindString(2, value.getDateStr());
                }
                stmt.bindLong(3, value.getTotalSleep());
                stmt.bindLong(4, value.getDeepSleep());
                stmt.bindLong(5, value.getLightSleep());
                stmt.bindLong(6, value.getRapidSleep());
                stmt.bindLong(7, value.getAwake());
                stmt.bindLong(8, value.getStartTime());
                stmt.bindLong(9, value.getEndTime());
                stmt.bindLong(10, value.getUnixTime());
                if (value.getDeviceAddress() == null) {
                    stmt.bindNull(11);
                } else {
                    stmt.bindString(11, value.getDeviceAddress());
                }
                if (value.getDateStr() == null) {
                    stmt.bindNull(12);
                } else {
                    stmt.bindString(12, value.getDateStr());
                }
            }
        };
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insertAll(final List<SleepTotalHistory> list) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert(list);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void insert(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__insertionAdapterOfSleepTotalHistory.insert((EntityInsertionAdapter<SleepTotalHistory>) element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void delete(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteList(final List<SleepTotalHistory> elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void deleteSome(final SleepTotalHistory... elements) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__deletionAdapterOfSleepTotalHistory.handleMultiple(elements);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.BaseDao
    public void update(final SleepTotalHistory element) {
        this.__db.assertNotSuspendingTransaction();
        this.__db.beginTransaction();
        try {
            this.__updateAdapterOfSleepTotalHistory.handle(element);
            this.__db.setTransactionSuccessful();
        } finally {
            this.__db.endTransaction();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public SleepTotalHistory queryTotalSleepByAddressAndDate(String str, String str2) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where  device_address=? and date_str=? order by date_str desc LIMIT 1 ", 2);
        if (str == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, str);
        }
        if (str2 == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, str2);
        }
        this.__db.assertNotSuspendingTransaction();
        SleepTotalHistory sleepTotalHistory = null;
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            if (cursorQuery.moveToFirst()) {
                sleepTotalHistory = new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10));
            }
            return sleepTotalHistory;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    @Override // com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao
    public List<SleepTotalHistory> queryByAddressAndDate(final String deviceAddress, final String start, final String end) {
        RoomSQLiteQuery roomSQLiteQueryAcquire = RoomSQLiteQuery.acquire("select * from sleep_total where device_address=? and unix_time >= ? and unix_time<=? order by unix_time asc", 3);
        if (deviceAddress == null) {
            roomSQLiteQueryAcquire.bindNull(1);
        } else {
            roomSQLiteQueryAcquire.bindString(1, deviceAddress);
        }
        if (start == null) {
            roomSQLiteQueryAcquire.bindNull(2);
        } else {
            roomSQLiteQueryAcquire.bindString(2, start);
        }
        if (end == null) {
            roomSQLiteQueryAcquire.bindNull(3);
        } else {
            roomSQLiteQueryAcquire.bindString(3, end);
        }
        this.__db.assertNotSuspendingTransaction();
        Cursor cursorQuery = DBUtil.query(this.__db, roomSQLiteQueryAcquire, false, null);
        try {
            int columnIndexOrThrow = CursorUtil.getColumnIndexOrThrow(cursorQuery, "device_address");
            int columnIndexOrThrow2 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "date_str");
            int columnIndexOrThrow3 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "total_sleep");
            int columnIndexOrThrow4 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "deep_sleep");
            int columnIndexOrThrow5 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "light_sleep");
            int columnIndexOrThrow6 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "rapid_sleep");
            int columnIndexOrThrow7 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "awake");
            int columnIndexOrThrow8 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "start_time");
            int columnIndexOrThrow9 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "end_time");
            int columnIndexOrThrow10 = CursorUtil.getColumnIndexOrThrow(cursorQuery, "unix_time");
            ArrayList arrayList = new ArrayList(cursorQuery.getCount());
            while (cursorQuery.moveToNext()) {
                arrayList.add(new SleepTotalHistory(cursorQuery.isNull(columnIndexOrThrow) ? null : cursorQuery.getString(columnIndexOrThrow), cursorQuery.isNull(columnIndexOrThrow2) ? null : cursorQuery.getString(columnIndexOrThrow2), cursorQuery.getInt(columnIndexOrThrow3), cursorQuery.getInt(columnIndexOrThrow4), cursorQuery.getInt(columnIndexOrThrow5), cursorQuery.getInt(columnIndexOrThrow6), cursorQuery.getInt(columnIndexOrThrow7), cursorQuery.getInt(columnIndexOrThrow8), cursorQuery.getInt(columnIndexOrThrow9), cursorQuery.getInt(columnIndexOrThrow10)));
            }
            return arrayList;
        } finally {
            cursorQuery.close();
            roomSQLiteQueryAcquire.release();
        }
    }

    public static List<Class<?>> getRequiredConverters() {
        return Collections.emptyList();
    }
}package com.qcwireless.qcwatch.ui.base.repository.entity;

import com.google.android.gms.fitness.FitnessActivities;
import com.qcwireless.qcwatch.ui.base.bean.request.collection.CollectionRequest$$ExternalSyntheticBackport0;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;

/* compiled from: SleepDetail.kt */
@Metadata(d1 = {"\u0000(\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\t\n\u0002\b$\b\u0087\b\u0018\u00002\u00020\u0001B=\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0006\u0012\u0006\u0010\u0007\u001a\u00020\u0003\u0012\u0006\u0010\b\u001a\u00020\u0003\u0012\u0006\u0010\t\u001a\u00020\n\u0012\u0006\u0010\u000b\u001a\u00020\f¢\u0006\u0002\u0010\rJ\t\u0010$\u001a\u00020\u0003HÆ\u0003J\t\u0010%\u001a\u00020\u0003HÆ\u0003J\t\u0010&\u001a\u00020\u0006HÆ\u0003J\t\u0010'\u001a\u00020\u0003HÆ\u0003J\t\u0010(\u001a\u00020\u0003HÆ\u0003J\t\u0010)\u001a\u00020\nHÆ\u0003J\t\u0010*\u001a\u00020\fHÆ\u0003JO\u0010+\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\b\b\u0002\u0010\u0005\u001a\u00020\u00062\b\b\u0002\u0010\u0007\u001a\u00020\u00032\b\b\u0002\u0010\b\u001a\u00020\u00032\b\b\u0002\u0010\t\u001a\u00020\n2\b\b\u0002\u0010\u000b\u001a\u00020\fHÆ\u0001J\u0013\u0010,\u001a\u00020\n2\b\u0010-\u001a\u0004\u0018\u00010\u0001HÖ\u0003J\t\u0010.\u001a\u00020\u0006HÖ\u0001J\t\u0010/\u001a\u00020\u0003HÖ\u0001R\u001e\u0010\u0004\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u000e\u0010\u000f\"\u0004\b\u0010\u0010\u0011R\u001e\u0010\u0002\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0012\u0010\u000f\"\u0004\b\u0013\u0010\u0011R\u001e\u0010\u0007\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0014\u0010\u000f\"\u0004\b\u0015\u0010\u0011R\u001e\u0010\u0005\u001a\u00020\u00068\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0016\u0010\u0017\"\u0004\b\u0018\u0010\u0019R\u001e\u0010\u000b\u001a\u00020\f8\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001a\u0010\u001b\"\u0004\b\u001c\u0010\u001dR\u001e\u0010\b\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001e\u0010\u000f\"\u0004\b\u001f\u0010\u0011R\u001e\u0010\t\u001a\u00020\n8\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b \u0010!\"\u0004\b\"\u0010#¨\u00060"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepDetail;", "", "deviceAddress", "", "dateStr", "intervar", "", "index_str", "quality", "sync", "", "lastSyncTime", "", "(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;ZJ)V", "getDateStr", "()Ljava/lang/String;", "setDateStr", "(Ljava/lang/String;)V", "getDeviceAddress", "setDeviceAddress", "getIndex_str", "setIndex_str", "getIntervar", "()I", "setIntervar", "(I)V", "getLastSyncTime", "()J", "setLastSyncTime", "(J)V", "getQuality", "setQuality", "getSync", "()Z", "setSync", "(Z)V", "component1", "component2", "component3", "component4", "component5", "component6", "component7", "copy", "equals", FitnessActivities.OTHER, "hashCode", "toString", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final /* data */ class SleepDetail {
    private String dateStr;
    private String deviceAddress;
    private String index_str;
    private int intervar;
    private long lastSyncTime;
    private String quality;
    private boolean sync;

    /* renamed from: component1, reason: from getter */
    public final String getDeviceAddress() {
        return this.deviceAddress;
    }

    /* renamed from: component2, reason: from getter */
    public final String getDateStr() {
        return this.dateStr;
    }

    /* renamed from: component3, reason: from getter */
    public final int getIntervar() {
        return this.intervar;
    }

    /* renamed from: component4, reason: from getter */
    public final String getIndex_str() {
        return this.index_str;
    }

    /* renamed from: component5, reason: from getter */
    public final String getQuality() {
        return this.quality;
    }

    /* renamed from: component6, reason: from getter */
    public final boolean getSync() {
        return this.sync;
    }

    /* renamed from: component7, reason: from getter */
    public final long getLastSyncTime() {
        return this.lastSyncTime;
    }

    public final SleepDetail copy(String deviceAddress, String dateStr, int intervar, String index_str, String quality, boolean sync, long lastSyncTime) {
        Intrinsics.checkNotNullParameter(deviceAddress, "deviceAddress");
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        Intrinsics.checkNotNullParameter(index_str, "index_str");
        Intrinsics.checkNotNullParameter(quality, "quality");
        return new SleepDetail(deviceAddress, dateStr, intervar, index_str, quality, sync, lastSyncTime);
    }

    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof SleepDetail)) {
            return false;
        }
        SleepDetail sleepDetail = (SleepDetail) other;
        return Intrinsics.areEqual(this.deviceAddress, sleepDetail.deviceAddress) && Intrinsics.areEqual(this.dateStr, sleepDetail.dateStr) && this.intervar == sleepDetail.intervar && Intrinsics.areEqual(this.index_str, sleepDetail.index_str) && Intrinsics.areEqual(this.quality, sleepDetail.quality) && this.sync == sleepDetail.sync && this.lastSyncTime == sleepDetail.lastSyncTime;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public int hashCode() {
        int iHashCode = ((((((((this.deviceAddress.hashCode() * 31) + this.dateStr.hashCode()) * 31) + this.intervar) * 31) + this.index_str.hashCode()) * 31) + this.quality.hashCode()) * 31;
        boolean z = this.sync;
        int i = z;
        if (z != 0) {
            i = 1;
        }
        return ((iHashCode + i) * 31) + CollectionRequest$$ExternalSyntheticBackport0.m(this.lastSyncTime);
    }

    public String toString() {
        return "SleepDetail(deviceAddress=" + this.deviceAddress + ", dateStr=" + this.dateStr + ", intervar=" + this.intervar + ", index_str=" + this.index_str + ", quality=" + this.quality + ", sync=" + this.sync + ", lastSyncTime=" + this.lastSyncTime + ')';
    }

    public SleepDetail(String deviceAddress, String dateStr, int i, String index_str, String quality, boolean z, long j) {
        Intrinsics.checkNotNullParameter(deviceAddress, "deviceAddress");
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        Intrinsics.checkNotNullParameter(index_str, "index_str");
        Intrinsics.checkNotNullParameter(quality, "quality");
        this.deviceAddress = deviceAddress;
        this.dateStr = dateStr;
        this.intervar = i;
        this.index_str = index_str;
        this.quality = quality;
        this.sync = z;
        this.lastSyncTime = j;
    }

    public final String getDeviceAddress() {
        return this.deviceAddress;
    }

    public final void setDeviceAddress(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.deviceAddress = str;
    }

    public final String getDateStr() {
        return this.dateStr;
    }

    public final void setDateStr(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.dateStr = str;
    }

    public final int getIntervar() {
        return this.intervar;
    }

    public final void setIntervar(int i) {
        this.intervar = i;
    }

    public final String getIndex_str() {
        return this.index_str;
    }

    public final void setIndex_str(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.index_str = str;
    }

    public final String getQuality() {
        return this.quality;
    }

    public final void setQuality(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.quality = str;
    }

    public final boolean getSync() {
        return this.sync;
    }

    public final void setSync(boolean z) {
        this.sync = z;
    }

    public final long getLastSyncTime() {
        return this.lastSyncTime;
    }

    public final void setLastSyncTime(long j) {
        this.lastSyncTime = j;
    }
}package com.qcwireless.qcwatch.ui.base.repository.entity;

import com.google.android.gms.fitness.FitnessActivities;
import com.qcwireless.qcwatch.ui.base.bean.request.collection.CollectionRequest$$ExternalSyntheticBackport0;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;

/* compiled from: SleepLunchProtocol.kt */
@Metadata(d1 = {"\u0000(\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\t\n\u0002\b$\b\u0087\b\u0018\u00002\u00020\u0001B=\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0003\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u0012\u0006\u0010\b\u001a\u00020\u0007\u0012\u0006\u0010\t\u001a\u00020\n\u0012\u0006\u0010\u000b\u001a\u00020\f¢\u0006\u0002\u0010\rJ\t\u0010$\u001a\u00020\u0003HÆ\u0003J\t\u0010%\u001a\u00020\u0003HÆ\u0003J\t\u0010&\u001a\u00020\u0003HÆ\u0003J\t\u0010'\u001a\u00020\u0007HÆ\u0003J\t\u0010(\u001a\u00020\u0007HÆ\u0003J\t\u0010)\u001a\u00020\nHÆ\u0003J\t\u0010*\u001a\u00020\fHÆ\u0003JO\u0010+\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\b\b\u0002\u0010\u0005\u001a\u00020\u00032\b\b\u0002\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\u00072\b\b\u0002\u0010\t\u001a\u00020\n2\b\b\u0002\u0010\u000b\u001a\u00020\fHÆ\u0001J\u0013\u0010,\u001a\u00020\n2\b\u0010-\u001a\u0004\u0018\u00010\u0001HÖ\u0003J\t\u0010.\u001a\u00020\u0007HÖ\u0001J\t\u0010/\u001a\u00020\u0003HÖ\u0001R\u001e\u0010\u0004\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u000e\u0010\u000f\"\u0004\b\u0010\u0010\u0011R\u001e\u0010\u0005\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0012\u0010\u000f\"\u0004\b\u0013\u0010\u0011R\u001e\u0010\u0002\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0014\u0010\u000f\"\u0004\b\u0015\u0010\u0011R\u001e\u0010\u000b\u001a\u00020\f8\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0016\u0010\u0017\"\u0004\b\u0018\u0010\u0019R\u001e\u0010\b\u001a\u00020\u00078\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001a\u0010\u001b\"\u0004\b\u001c\u0010\u001dR\u001e\u0010\u0006\u001a\u00020\u00078\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001e\u0010\u001b\"\u0004\b\u001f\u0010\u001dR\u001e\u0010\t\u001a\u00020\n8\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b \u0010!\"\u0004\b\"\u0010#¨\u00060"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepLunchProtocol;", "", "deviceAddress", "", "dateStr", "detail", "lunchSt", "", "lunchEt", "sync", "", "lastSyncTime", "", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIZJ)V", "getDateStr", "()Ljava/lang/String;", "setDateStr", "(Ljava/lang/String;)V", "getDetail", "setDetail", "getDeviceAddress", "setDeviceAddress", "getLastSyncTime", "()J", "setLastSyncTime", "(J)V", "getLunchEt", "()I", "setLunchEt", "(I)V", "getLunchSt", "setLunchSt", "getSync", "()Z", "setSync", "(Z)V", "component1", "component2", "component3", "component4", "component5", "component6", "component7", "copy", "equals", FitnessActivities.OTHER, "hashCode", "toString", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final /* data */ class SleepLunchProtocol {
    private String dateStr;
    private String detail;
    private String deviceAddress;
    private long lastSyncTime;
    private int lunchEt;
    private int lunchSt;
    private boolean sync;

    /* renamed from: component1, reason: from getter */
    public final String getDeviceAddress() {
        return this.deviceAddress;
    }

    /* renamed from: component2, reason: from getter */
    public final String getDateStr() {
        return this.dateStr;
    }

    /* renamed from: component3, reason: from getter */
    public final String getDetail() {
        return this.detail;
    }

    /* renamed from: component4, reason: from getter */
    public final int getLunchSt() {
        return this.lunchSt;
    }

    /* renamed from: component5, reason: from getter */
    public final int getLunchEt() {
        return this.lunchEt;
    }

    /* renamed from: component6, reason: from getter */
    public final boolean getSync() {
        return this.sync;
    }

    /* renamed from: component7, reason: from getter */
    public final long getLastSyncTime() {
        return this.lastSyncTime;
    }

    public final SleepLunchProtocol copy(String deviceAddress, String dateStr, String detail, int lunchSt, int lunchEt, boolean sync, long lastSyncTime) {
        Intrinsics.checkNotNullParameter(deviceAddress, "deviceAddress");
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        Intrinsics.checkNotNullParameter(detail, "detail");
        return new SleepLunchProtocol(deviceAddress, dateStr, detail, lunchSt, lunchEt, sync, lastSyncTime);
    }

    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof SleepLunchProtocol)) {
            return false;
        }
        SleepLunchProtocol sleepLunchProtocol = (SleepLunchProtocol) other;
        return Intrinsics.areEqual(this.deviceAddress, sleepLunchProtocol.deviceAddress) && Intrinsics.areEqual(this.dateStr, sleepLunchProtocol.dateStr) && Intrinsics.areEqual(this.detail, sleepLunchProtocol.detail) && this.lunchSt == sleepLunchProtocol.lunchSt && this.lunchEt == sleepLunchProtocol.lunchEt && this.sync == sleepLunchProtocol.sync && this.lastSyncTime == sleepLunchProtocol.lastSyncTime;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public int hashCode() {
        int iHashCode = ((((((((this.deviceAddress.hashCode() * 31) + this.dateStr.hashCode()) * 31) + this.detail.hashCode()) * 31) + this.lunchSt) * 31) + this.lunchEt) * 31;
        boolean z = this.sync;
        int i = z;
        if (z != 0) {
            i = 1;
        }
        return ((iHashCode + i) * 31) + CollectionRequest$$ExternalSyntheticBackport0.m(this.lastSyncTime);
    }

    public String toString() {
        return "SleepLunchProtocol(deviceAddress=" + this.deviceAddress + ", dateStr=" + this.dateStr + ", detail=" + this.detail + ", lunchSt=" + this.lunchSt + ", lunchEt=" + this.lunchEt + ", sync=" + this.sync + ", lastSyncTime=" + this.lastSyncTime + ')';
    }

    public SleepLunchProtocol(String deviceAddress, String dateStr, String detail, int i, int i2, boolean z, long j) {
        Intrinsics.checkNotNullParameter(deviceAddress, "deviceAddress");
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        Intrinsics.checkNotNullParameter(detail, "detail");
        this.deviceAddress = deviceAddress;
        this.dateStr = dateStr;
        this.detail = detail;
        this.lunchSt = i;
        this.lunchEt = i2;
        this.sync = z;
        this.lastSyncTime = j;
    }

    public final String getDeviceAddress() {
        return this.deviceAddress;
    }

    public final void setDeviceAddress(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.deviceAddress = str;
    }

    public final String getDateStr() {
        return this.dateStr;
    }

    public final void setDateStr(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.dateStr = str;
    }

    public final String getDetail() {
        return this.detail;
    }

    public final void setDetail(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.detail = str;
    }

    public final int getLunchSt() {
        return this.lunchSt;
    }

    public final void setLunchSt(int i) {
        this.lunchSt = i;
    }

    public final int getLunchEt() {
        return this.lunchEt;
    }

    public final void setLunchEt(int i) {
        this.lunchEt = i;
    }

    public final boolean getSync() {
        return this.sync;
    }

    public final void setSync(boolean z) {
        this.sync = z;
    }

    public final long getLastSyncTime() {
        return this.lastSyncTime;
    }

    public final void setLastSyncTime(long j) {
        this.lastSyncTime = j;
    }
}package com.qcwireless.qcwatch.ui.base.repository.entity;

import com.google.android.gms.fitness.FitnessActivities;
import com.qcwireless.qcwatch.ui.base.bean.request.collection.CollectionRequest$$ExternalSyntheticBackport0;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;

/* compiled from: SleepNewProtocol.kt */
@Metadata(d1 = {"\u0000(\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0010\b\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0010\t\n\u0002\b$\b\u0087\b\u0018\u00002\u00020\u0001B=\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0003\u0012\u0006\u0010\u0006\u001a\u00020\u0007\u0012\u0006\u0010\b\u001a\u00020\u0007\u0012\u0006\u0010\t\u001a\u00020\n\u0012\u0006\u0010\u000b\u001a\u00020\f¢\u0006\u0002\u0010\rJ\t\u0010$\u001a\u00020\u0003HÆ\u0003J\t\u0010%\u001a\u00020\u0003HÆ\u0003J\t\u0010&\u001a\u00020\u0003HÆ\u0003J\t\u0010'\u001a\u00020\u0007HÆ\u0003J\t\u0010(\u001a\u00020\u0007HÆ\u0003J\t\u0010)\u001a\u00020\nHÆ\u0003J\t\u0010*\u001a\u00020\fHÆ\u0003JO\u0010+\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\b\b\u0002\u0010\u0005\u001a\u00020\u00032\b\b\u0002\u0010\u0006\u001a\u00020\u00072\b\b\u0002\u0010\b\u001a\u00020\u00072\b\b\u0002\u0010\t\u001a\u00020\n2\b\b\u0002\u0010\u000b\u001a\u00020\fHÆ\u0001J\u0013\u0010,\u001a\u00020\n2\b\u0010-\u001a\u0004\u0018\u00010\u0001HÖ\u0003J\t\u0010.\u001a\u00020\u0007HÖ\u0001J\t\u0010/\u001a\u00020\u0003HÖ\u0001R\u001e\u0010\u0004\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u000e\u0010\u000f\"\u0004\b\u0010\u0010\u0011R\u001e\u0010\u0005\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0012\u0010\u000f\"\u0004\b\u0013\u0010\u0011R\u001e\u0010\u0002\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0014\u0010\u000f\"\u0004\b\u0015\u0010\u0011R\u001e\u0010\b\u001a\u00020\u00078\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0016\u0010\u0017\"\u0004\b\u0018\u0010\u0019R\u001e\u0010\u000b\u001a\u00020\f8\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001a\u0010\u001b\"\u0004\b\u001c\u0010\u001dR\u001e\u0010\u0006\u001a\u00020\u00078\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001e\u0010\u0017\"\u0004\b\u001f\u0010\u0019R\u001e\u0010\t\u001a\u00020\n8\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b \u0010!\"\u0004\b\"\u0010#¨\u00060"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepNewProtocol;", "", "deviceAddress", "", "dateStr", "detail", "st", "", "et", "sync", "", "lastSyncTime", "", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIZJ)V", "getDateStr", "()Ljava/lang/String;", "setDateStr", "(Ljava/lang/String;)V", "getDetail", "setDetail", "getDeviceAddress", "setDeviceAddress", "getEt", "()I", "setEt", "(I)V", "getLastSyncTime", "()J", "setLastSyncTime", "(J)V", "getSt", "setSt", "getSync", "()Z", "setSync", "(Z)V", "component1", "component2", "component3", "component4", "component5", "component6", "component7", "copy", "equals", FitnessActivities.OTHER, "hashCode", "toString", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final /* data */ class SleepNewProtocol {
    private String dateStr;
    private String detail;
    private String deviceAddress;
    private int et;
    private long lastSyncTime;
    private int st;
    private boolean sync;

    /* renamed from: component1, reason: from getter */
    public final String getDeviceAddress() {
        return this.deviceAddress;
    }

    /* renamed from: component2, reason: from getter */
    public final String getDateStr() {
        return this.dateStr;
    }

    /* renamed from: component3, reason: from getter */
    public final String getDetail() {
        return this.detail;
    }

    /* renamed from: component4, reason: from getter */
    public final int getSt() {
        return this.st;
    }

    /* renamed from: component5, reason: from getter */
    public final int getEt() {
        return this.et;
    }

    /* renamed from: component6, reason: from getter */
    public final boolean getSync() {
        return this.sync;
    }

    /* renamed from: component7, reason: from getter */
    public final long getLastSyncTime() {
        return this.lastSyncTime;
    }

    public final SleepNewProtocol copy(String deviceAddress, String dateStr, String detail, int st, int et, boolean sync, long lastSyncTime) {
        Intrinsics.checkNotNullParameter(deviceAddress, "deviceAddress");
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        Intrinsics.checkNotNullParameter(detail, "detail");
        return new SleepNewProtocol(deviceAddress, dateStr, detail, st, et, sync, lastSyncTime);
    }

    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof SleepNewProtocol)) {
            return false;
        }
        SleepNewProtocol sleepNewProtocol = (SleepNewProtocol) other;
        return Intrinsics.areEqual(this.deviceAddress, sleepNewProtocol.deviceAddress) && Intrinsics.areEqual(this.dateStr, sleepNewProtocol.dateStr) && Intrinsics.areEqual(this.detail, sleepNewProtocol.detail) && this.st == sleepNewProtocol.st && this.et == sleepNewProtocol.et && this.sync == sleepNewProtocol.sync && this.lastSyncTime == sleepNewProtocol.lastSyncTime;
    }

    /* JADX WARN: Multi-variable type inference failed */
    public int hashCode() {
        int iHashCode = ((((((((this.deviceAddress.hashCode() * 31) + this.dateStr.hashCode()) * 31) + this.detail.hashCode()) * 31) + this.st) * 31) + this.et) * 31;
        boolean z = this.sync;
        int i = z;
        if (z != 0) {
            i = 1;
        }
        return ((iHashCode + i) * 31) + CollectionRequest$$ExternalSyntheticBackport0.m(this.lastSyncTime);
    }

    public String toString() {
        return "SleepNewProtocol(deviceAddress=" + this.deviceAddress + ", dateStr=" + this.dateStr + ", detail=" + this.detail + ", st=" + this.st + ", et=" + this.et + ", sync=" + this.sync + ", lastSyncTime=" + this.lastSyncTime + ')';
    }

    public SleepNewProtocol(String deviceAddress, String dateStr, String detail, int i, int i2, boolean z, long j) {
        Intrinsics.checkNotNullParameter(deviceAddress, "deviceAddress");
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        Intrinsics.checkNotNullParameter(detail, "detail");
        this.deviceAddress = deviceAddress;
        this.dateStr = dateStr;
        this.detail = detail;
        this.st = i;
        this.et = i2;
        this.sync = z;
        this.lastSyncTime = j;
    }

    public final String getDeviceAddress() {
        return this.deviceAddress;
    }

    public final void setDeviceAddress(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.deviceAddress = str;
    }

    public final String getDateStr() {
        return this.dateStr;
    }

    public final void setDateStr(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.dateStr = str;
    }

    public final String getDetail() {
        return this.detail;
    }

    public final void setDetail(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.detail = str;
    }

    public final int getSt() {
        return this.st;
    }

    public final void setSt(int i) {
        this.st = i;
    }

    public final int getEt() {
        return this.et;
    }

    public final void setEt(int i) {
        this.et = i;
    }

    public final boolean getSync() {
        return this.sync;
    }

    public final void setSync(boolean z) {
        this.sync = z;
    }

    public final long getLastSyncTime() {
        return this.lastSyncTime;
    }

    public final void setLastSyncTime(long j) {
        this.lastSyncTime = j;
    }
}package com.qcwireless.qcwatch.ui.base.repository.entity;

import com.google.android.gms.fitness.FitnessActivities;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;

/* compiled from: SleepTotalHistory.kt */
@Metadata(d1 = {"\u0000\"\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0010\u000e\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b,\n\u0002\u0010\u000b\n\u0002\b\u0004\b\u0087\b\u0018\u00002\u00020\u0001BU\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0003\u0012\u0006\u0010\u0005\u001a\u00020\u0006\u0012\u0006\u0010\u0007\u001a\u00020\u0006\u0012\u0006\u0010\b\u001a\u00020\u0006\u0012\u0006\u0010\t\u001a\u00020\u0006\u0012\u0006\u0010\n\u001a\u00020\u0006\u0012\u0006\u0010\u000b\u001a\u00020\u0006\u0012\u0006\u0010\f\u001a\u00020\u0006\u0012\u0006\u0010\r\u001a\u00020\u0006¢\u0006\u0002\u0010\u000eJ\t\u0010'\u001a\u00020\u0003HÆ\u0003J\t\u0010(\u001a\u00020\u0006HÆ\u0003J\t\u0010)\u001a\u00020\u0003HÆ\u0003J\t\u0010*\u001a\u00020\u0006HÆ\u0003J\t\u0010+\u001a\u00020\u0006HÆ\u0003J\t\u0010,\u001a\u00020\u0006HÆ\u0003J\t\u0010-\u001a\u00020\u0006HÆ\u0003J\t\u0010.\u001a\u00020\u0006HÆ\u0003J\t\u0010/\u001a\u00020\u0006HÆ\u0003J\t\u00100\u001a\u00020\u0006HÆ\u0003Jm\u00101\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\b\b\u0002\u0010\u0004\u001a\u00020\u00032\b\b\u0002\u0010\u0005\u001a\u00020\u00062\b\b\u0002\u0010\u0007\u001a\u00020\u00062\b\b\u0002\u0010\b\u001a\u00020\u00062\b\b\u0002\u0010\t\u001a\u00020\u00062\b\b\u0002\u0010\n\u001a\u00020\u00062\b\b\u0002\u0010\u000b\u001a\u00020\u00062\b\b\u0002\u0010\f\u001a\u00020\u00062\b\b\u0002\u0010\r\u001a\u00020\u0006HÆ\u0001J\u0013\u00102\u001a\u0002032\b\u00104\u001a\u0004\u0018\u00010\u0001HÖ\u0003J\t\u00105\u001a\u00020\u0006HÖ\u0001J\t\u00106\u001a\u00020\u0003HÖ\u0001R\u001e\u0010\n\u001a\u00020\u00068\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u000f\u0010\u0010\"\u0004\b\u0011\u0010\u0012R\u001e\u0010\u0004\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0013\u0010\u0014\"\u0004\b\u0015\u0010\u0016R\u001e\u0010\u0007\u001a\u00020\u00068\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0017\u0010\u0010\"\u0004\b\u0018\u0010\u0012R\u001e\u0010\u0002\u001a\u00020\u00038\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u0019\u0010\u0014\"\u0004\b\u001a\u0010\u0016R\u001e\u0010\f\u001a\u00020\u00068\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001b\u0010\u0010\"\u0004\b\u001c\u0010\u0012R\u001e\u0010\b\u001a\u00020\u00068\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001d\u0010\u0010\"\u0004\b\u001e\u0010\u0012R\u001e\u0010\t\u001a\u00020\u00068\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b\u001f\u0010\u0010\"\u0004\b \u0010\u0012R\u001e\u0010\u000b\u001a\u00020\u00068\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b!\u0010\u0010\"\u0004\b\"\u0010\u0012R\u001e\u0010\u0005\u001a\u00020\u00068\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b#\u0010\u0010\"\u0004\b$\u0010\u0012R\u001e\u0010\r\u001a\u00020\u00068\u0006@\u0006X\u0087\u000e¢\u0006\u000e\n\u0000\u001a\u0004\b%\u0010\u0010\"\u0004\b&\u0010\u0012¨\u00067"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepTotalHistory;", "", "deviceAddress", "", "dateStr", "totalSleep", "", "deepSleep", "lightSleep", "rapidSleep", "awake", "startTime", "endTime", "unixTime", "(Ljava/lang/String;Ljava/lang/String;IIIIIIII)V", "getAwake", "()I", "setAwake", "(I)V", "getDateStr", "()Ljava/lang/String;", "setDateStr", "(Ljava/lang/String;)V", "getDeepSleep", "setDeepSleep", "getDeviceAddress", "setDeviceAddress", "getEndTime", "setEndTime", "getLightSleep", "setLightSleep", "getRapidSleep", "setRapidSleep", "getStartTime", "setStartTime", "getTotalSleep", "setTotalSleep", "getUnixTime", "setUnixTime", "component1", "component10", "component2", "component3", "component4", "component5", "component6", "component7", "component8", "component9", "copy", "equals", "", FitnessActivities.OTHER, "hashCode", "toString", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final /* data */ class SleepTotalHistory {
    private int awake;
    private String dateStr;
    private int deepSleep;
    private String deviceAddress;
    private int endTime;
    private int lightSleep;
    private int rapidSleep;
    private int startTime;
    private int totalSleep;
    private int unixTime;

    /* renamed from: component1, reason: from getter */
    public final String getDeviceAddress() {
        return this.deviceAddress;
    }

    /* renamed from: component10, reason: from getter */
    public final int getUnixTime() {
        return this.unixTime;
    }

    /* renamed from: component2, reason: from getter */
    public final String getDateStr() {
        return this.dateStr;
    }

    /* renamed from: component3, reason: from getter */
    public final int getTotalSleep() {
        return this.totalSleep;
    }

    /* renamed from: component4, reason: from getter */
    public final int getDeepSleep() {
        return this.deepSleep;
    }

    /* renamed from: component5, reason: from getter */
    public final int getLightSleep() {
        return this.lightSleep;
    }

    /* renamed from: component6, reason: from getter */
    public final int getRapidSleep() {
        return this.rapidSleep;
    }

    /* renamed from: component7, reason: from getter */
    public final int getAwake() {
        return this.awake;
    }

    /* renamed from: component8, reason: from getter */
    public final int getStartTime() {
        return this.startTime;
    }

    /* renamed from: component9, reason: from getter */
    public final int getEndTime() {
        return this.endTime;
    }

    public final SleepTotalHistory copy(String deviceAddress, String dateStr, int totalSleep, int deepSleep, int lightSleep, int rapidSleep, int awake, int startTime, int endTime, int unixTime) {
        Intrinsics.checkNotNullParameter(deviceAddress, "deviceAddress");
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        return new SleepTotalHistory(deviceAddress, dateStr, totalSleep, deepSleep, lightSleep, rapidSleep, awake, startTime, endTime, unixTime);
    }

    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof SleepTotalHistory)) {
            return false;
        }
        SleepTotalHistory sleepTotalHistory = (SleepTotalHistory) other;
        return Intrinsics.areEqual(this.deviceAddress, sleepTotalHistory.deviceAddress) && Intrinsics.areEqual(this.dateStr, sleepTotalHistory.dateStr) && this.totalSleep == sleepTotalHistory.totalSleep && this.deepSleep == sleepTotalHistory.deepSleep && this.lightSleep == sleepTotalHistory.lightSleep && this.rapidSleep == sleepTotalHistory.rapidSleep && this.awake == sleepTotalHistory.awake && this.startTime == sleepTotalHistory.startTime && this.endTime == sleepTotalHistory.endTime && this.unixTime == sleepTotalHistory.unixTime;
    }

    public int hashCode() {
        return (((((((((((((((((this.deviceAddress.hashCode() * 31) + this.dateStr.hashCode()) * 31) + this.totalSleep) * 31) + this.deepSleep) * 31) + this.lightSleep) * 31) + this.rapidSleep) * 31) + this.awake) * 31) + this.startTime) * 31) + this.endTime) * 31) + this.unixTime;
    }

    public String toString() {
        return "SleepTotalHistory(deviceAddress=" + this.deviceAddress + ", dateStr=" + this.dateStr + ", totalSleep=" + this.totalSleep + ", deepSleep=" + this.deepSleep + ", lightSleep=" + this.lightSleep + ", rapidSleep=" + this.rapidSleep + ", awake=" + this.awake + ", startTime=" + this.startTime + ", endTime=" + this.endTime + ", unixTime=" + this.unixTime + ')';
    }

    public SleepTotalHistory(String deviceAddress, String dateStr, int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8) {
        Intrinsics.checkNotNullParameter(deviceAddress, "deviceAddress");
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        this.deviceAddress = deviceAddress;
        this.dateStr = dateStr;
        this.totalSleep = i;
        this.deepSleep = i2;
        this.lightSleep = i3;
        this.rapidSleep = i4;
        this.awake = i5;
        this.startTime = i6;
        this.endTime = i7;
        this.unixTime = i8;
    }

    public final String getDeviceAddress() {
        return this.deviceAddress;
    }

    public final void setDeviceAddress(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.deviceAddress = str;
    }

    public final String getDateStr() {
        return this.dateStr;
    }

    public final void setDateStr(String str) {
        Intrinsics.checkNotNullParameter(str, "<set-?>");
        this.dateStr = str;
    }

    public final int getTotalSleep() {
        return this.totalSleep;
    }

    public final void setTotalSleep(int i) {
        this.totalSleep = i;
    }

    public final int getDeepSleep() {
        return this.deepSleep;
    }

    public final void setDeepSleep(int i) {
        this.deepSleep = i;
    }

    public final int getLightSleep() {
        return this.lightSleep;
    }

    public final void setLightSleep(int i) {
        this.lightSleep = i;
    }

    public final int getRapidSleep() {
        return this.rapidSleep;
    }

    public final void setRapidSleep(int i) {
        this.rapidSleep = i;
    }

    public final int getAwake() {
        return this.awake;
    }

    public final void setAwake(int i) {
        this.awake = i;
    }

    public final int getStartTime() {
        return this.startTime;
    }

    public final void setStartTime(int i) {
        this.startTime = i;
    }

    public final int getEndTime() {
        return this.endTime;
    }

    public final void setEndTime(int i) {
        this.endTime = i;
    }

    public final int getUnixTime() {
        return this.unixTime;
    }

    public final void setUnixTime(int i) {
        this.unixTime = i;
    }
}package com.qcwireless.qcwatch.ui.base.repository.healthy;

import android.util.SparseIntArray;
import androidx.constraintlayout.core.motion.utils.TypedValues;
import androidx.core.view.PointerIconCompat;
import com.elvishew.xlog.XLog;
import com.google.gson.Gson;
import com.oudmon.ble.base.bluetooth.BleOperateManager;
import com.oudmon.ble.base.communication.CommandHandle;
import com.oudmon.ble.base.communication.ICommandResponse;
import com.oudmon.ble.base.communication.ILargeDataSleepResponse;
import com.oudmon.ble.base.communication.LargeDataHandler;
import com.oudmon.ble.base.communication.entity.BleSleepDetails;
import com.oudmon.ble.base.communication.req.ReadSleepDetailsReq;
import com.oudmon.ble.base.communication.rsp.BaseRspCmd;
import com.oudmon.ble.base.communication.rsp.ReadSleepDetailsRsp;
import com.oudmon.ble.base.communication.rsp.SleepNewProtoResp;
import com.qcwireless.qc_utils.date.DateUtil;
import com.qcwireless.qcwatch.QCApplication;
import com.qcwireless.qcwatch.base.ktx.ThreadExtKt;
import com.qcwireless.qcwatch.base.pref.UserConfig;
import com.qcwireless.qcwatch.base.utils.MoshiUtils;
import com.qcwireless.qcwatch.base.utils.MoshiUtilsKt;
import com.qcwireless.qcwatch.base.utils.TypeToken;
import com.qcwireless.qcwatch.ui.base.api.RetCodeValue;
import com.qcwireless.qcwatch.ui.base.bean.response.healthy.SleepDetailNewProtocolResp;
import com.qcwireless.qcwatch.ui.base.bean.response.healthy.SleepDetailResp;
import com.qcwireless.qcwatch.ui.base.repository.base.BaseDeviceResult;
import com.qcwireless.qcwatch.ui.base.repository.dao.QcDatabase;
import com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepDetailDao;
import com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepLunchProtocolDao;
import com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepNewProtocolDao;
import com.qcwireless.qcwatch.ui.base.repository.dao.QcSleepTotalDao;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepLunchProtocol;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepNewProtocol;
import com.qcwireless.qcwatch.ui.base.repository.entity.SleepTotalHistory;
import com.qcwireless.qcwatch.ui.base.repository.mine.NetState;
import com.qcwireless.qcwatch.ui.base.util.MapUtils;
import com.qcwireless.qcwatch.ui.base.util.StringUtilsKt;
import com.qcwireless.qcwatch.ui.base.view.QSleepBarChart;
import com.qcwireless.qcwatch.ui.base.view.QSleepMonthBarView;
import com.qcwireless.qcwatch.ui.base.view.QSleepWeekBarView;
import com.qcwireless.qcwatch.ui.home.sleep.bean.SleepLunchBean;
import com.qcwireless.qcwatch.ui.home.sleep.bean.SleepViewBean;
import com.squareup.moshi.JsonAdapter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import kotlin.Lazy;
import kotlin.LazyKt;
import kotlin.LazyThreadSafetyMode;
import kotlin.Metadata;
import kotlin.ResultKt;
import kotlin.Unit;
import kotlin.coroutines.Continuation;
import kotlin.coroutines.intrinsics.IntrinsicsKt;
import kotlin.coroutines.jvm.internal.Boxing;
import kotlin.coroutines.jvm.internal.DebugMetadata;
import kotlin.coroutines.jvm.internal.SuspendLambda;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.functions.Function2;
import kotlin.jvm.functions.Function3;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;
import kotlinx.coroutines.CoroutineScope;
import kotlinx.coroutines.Dispatchers;
import kotlinx.coroutines.flow.Flow;
import kotlinx.coroutines.flow.FlowCollector;
import kotlinx.coroutines.flow.FlowKt;

/* compiled from: SleepDetailRepository.kt */
@Metadata(d1 = {"\u0000°\u0001\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010%\n\u0002\u0010\u000e\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0010\t\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\n\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0004\u0018\u0000 V2\u00020\u0001:\u0001VB\u0005¢\u0006\u0002\u0010\u0002J\u0006\u0010\u000f\u001a\u00020\u0010J\u0016\u0010\u0011\u001a\u00020\u00102\u0006\u0010\u0012\u001a\u00020\u00132\u0006\u0010\u0014\u001a\u00020\u0013J\b\u0010\u0015\u001a\u00020\u0016H\u0002J\b\u0010\u0017\u001a\u00020\u0016H\u0002J!\u0010\u0018\u001a\u00020\u00162\u0006\u0010\u0019\u001a\u00020\u001a2\u0006\u0010\u001b\u001a\u00020\u001aH\u0086@ø\u0001\u0000¢\u0006\u0002\u0010\u001cJ!\u0010\u001d\u001a\u00020\u00162\u0006\u0010\u0019\u001a\u00020\u001a2\u0006\u0010\u001b\u001a\u00020\u001aH\u0086@ø\u0001\u0000¢\u0006\u0002\u0010\u001cJ\u0018\u0010\u001e\u001a\u00020\u00132\u0006\u0010\u001f\u001a\u00020\u00132\u0006\u0010 \u001a\u00020\u0013H\u0002J\u0010\u0010!\u001a\u00020\u00162\u0006\u0010\"\u001a\u00020#H\u0002J\u0018\u0010$\u001a\u00020\u00162\u0006\u0010\"\u001a\u00020#2\u0006\u0010%\u001a\u00020\u0006H\u0002J\b\u0010&\u001a\u0004\u0018\u00010\u0013J\b\u0010'\u001a\u0004\u0018\u00010(J\u0010\u0010)\u001a\u0004\u0018\u00010\u00132\u0006\u0010*\u001a\u00020\u0005J\u000e\u0010+\u001a\u00020,2\u0006\u0010-\u001a\u00020.J\u0014\u0010/\u001a\b\u0012\u0004\u0012\u000201002\u0006\u00102\u001a\u00020.J\u000e\u00103\u001a\u00020\u00102\u0006\u0010-\u001a\u00020.J\u0010\u00104\u001a\u0004\u0018\u0001052\u0006\u0010*\u001a\u00020\u0005J\u0014\u00106\u001a\b\u0012\u0004\u0012\u000207002\u0006\u00102\u001a\u00020.J\u001e\u00108\u001a\b\u0012\u0004\u0012\u000205002\u0006\u00109\u001a\u00020.2\u0006\u0010:\u001a\u00020.H\u0002J\u0010\u0010;\u001a\u00020\u00162\u0006\u0010<\u001a\u00020=H\u0002J\u0010\u0010>\u001a\u00020\u00162\u0006\u0010<\u001a\u00020?H\u0002J\u0010\u0010@\u001a\u00020\u00162\u0006\u0010<\u001a\u00020?H\u0002J\u0010\u0010A\u001a\u00020\u00162\u0006\u0010<\u001a\u00020?H\u0002J&\u0010B\u001a\u00020\u00162\u0006\u0010C\u001a\u00020\u00052\u0006\u0010%\u001a\u00020\u00062\f\u0010D\u001a\b\u0012\u0004\u0012\u00020#0EH\u0002J\u001e\u0010F\u001a\u00020\u00162\u0006\u0010G\u001a\u00020\u00062\f\u0010D\u001a\b\u0012\u0004\u0012\u00020#0EH\u0002J/\u0010F\u001a\u00020\u00162\u0006\u0010H\u001a\u00020\u00052\u0006\u0010I\u001a\u00020\u00052\f\u0010D\u001a\b\u0012\u0004\u0012\u00020#0EH\u0086@ø\u0001\u0000¢\u0006\u0002\u0010JJ\u001c\u0010K\u001a\u00020\u00162\u0006\u0010%\u001a\u00020\u00062\f\u0010D\u001a\b\u0012\u0004\u0012\u00020#0EJ8\u0010L\u001a\u00020\u00132\u0006\u0010H\u001a\u00020\u00052\u0006\u0010I\u001a\u00020\u00052\u0006\u0010M\u001a\u00020\u00052\u0006\u0010N\u001a\u00020\u00062\u000e\u0010O\u001a\n\u0012\u0004\u0012\u00020P\u0018\u000100H\u0002J\u001d\u0010Q\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00060S0RH\u0086@ø\u0001\u0000¢\u0006\u0002\u0010TJ\u001d\u0010U\u001a\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00060S0RH\u0086@ø\u0001\u0000¢\u0006\u0002\u0010TR\u001a\u0010\u0003\u001a\u000e\u0012\u0004\u0012\u00020\u0005\u0012\u0004\u0012\u00020\u00060\u0004X\u0082\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\u0007\u001a\u00020\bX\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\t\u001a\u00020\nX\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\u000b\u001a\u00020\fX\u0082\u0004¢\u0006\u0002\n\u0000R\u000e\u0010\r\u001a\u00020\u000eX\u0082\u0004¢\u0006\u0002\n\u0000\u0082\u0002\u0004\n\u0002\b\u0019¨\u0006W"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/healthy/SleepDetailRepository;", "", "()V", "historyDate", "", "", "", "sleepDetailDao", "Lcom/qcwireless/qcwatch/ui/base/repository/dao/QcSleepDetailDao;", "sleepLunchDao", "Lcom/qcwireless/qcwatch/ui/base/repository/dao/QcSleepLunchProtocolDao;", "sleepNewDao", "Lcom/qcwireless/qcwatch/ui/base/repository/dao/QcSleepNewProtocolDao;", "sleepTotalDao", "Lcom/qcwireless/qcwatch/ui/base/repository/dao/QcSleepTotalDao;", "calcLastSleep", "Lcom/qcwireless/qcwatch/ui/home/sleep/bean/SleepViewBean;", "calcSleepViewData", "currentDay", "Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepDetail;", "theDayBefore", "deleteLunchSleepData", "", "deleteNewSleepData", "downSleepDetailFromServer", "uid", "", "lastSyncId", "(JJLkotlin/coroutines/Continuation;)Ljava/lang/Object;", "downSleepDetailNewProtocolFromServer", "merge", "oldEntity", "newEntity", "parseSleepDetail", "resultEntity", "Lcom/oudmon/ble/base/communication/rsp/ReadSleepDetailsRsp;", "parseSleepDetailToday", "dayIndex", "queryLastSleep", "queryLastSleepNewProtocol", "Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepNewProtocol;", "querySleepByDate", "dateStr", "querySleepLunchProtocol", "Lcom/qcwireless/qcwatch/ui/home/sleep/bean/SleepLunchBean;", "dateUtil", "Lcom/qcwireless/qc_utils/date/DateUtil;", "querySleepMonth", "", "Lcom/qcwireless/qcwatch/ui/base/view/QSleepMonthBarView$SleepDataBean;", "start", "querySleepNewProtocol", "querySleepTotalByDate", "Lcom/qcwireless/qcwatch/ui/base/repository/entity/SleepTotalHistory;", "querySleepWeek", "Lcom/qcwireless/qcwatch/ui/base/view/QSleepWeekBarView$SleepDataBean;", "queryWeekSleepByDate", "dateStart", "dateEnd", "saveDownloadSleepToTotal", "sleepBean", "Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailNewProtocolResp;", "saveSleepLunchProtocol", "Lcom/oudmon/ble/base/communication/rsp/SleepNewProtoResp;", "saveSleepNewProtocol", "saveSleepToTotal", "syncDeviceSleepDetail", "key", "result", "Lcom/qcwireless/qcwatch/ui/base/repository/base/BaseDeviceResult;", "syncSleepDetail", TypedValues.CycleType.S_WAVE_OFFSET, "deviceName", "deviceAddress", "(Ljava/lang/String;Ljava/lang/String;Lcom/qcwireless/qcwatch/ui/base/repository/base/BaseDeviceResult;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "syncTodaySleepDetail", "toSleepDetail", "date", "interval", "sleepDetailList", "Lcom/oudmon/ble/base/communication/entity/BleSleepDetails;", "updateSleepDetailToServer", "Lkotlinx/coroutines/flow/Flow;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", "(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;", "updateSleepDetailToServerNewProtocol", "Companion", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
/* loaded from: classes3.dex */
public final class SleepDetailRepository {

    /* renamed from: Companion, reason: from kotlin metadata */
    public static final Companion INSTANCE = new Companion(null);
    private static final Lazy<SleepDetailRepository> getInstance$delegate = LazyKt.lazy(LazyThreadSafetyMode.SYNCHRONIZED, (Function0) new Function0<SleepDetailRepository>() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$Companion$getInstance$2
        /* JADX WARN: Can't rename method to resolve collision */
        @Override // kotlin.jvm.functions.Function0
        public final SleepDetailRepository invoke() {
            return new SleepDetailRepository();
        }
    });
    private final QcSleepDetailDao sleepDetailDao = QcDatabase.INSTANCE.getDatabase(QCApplication.INSTANCE.getCONTEXT()).qcSleepDetailDao();
    private final QcSleepTotalDao sleepTotalDao = QcDatabase.INSTANCE.getDatabase(QCApplication.INSTANCE.getCONTEXT()).qcSleepTotalDao();
    private final QcSleepNewProtocolDao sleepNewDao = QcDatabase.INSTANCE.getDatabase(QCApplication.INSTANCE.getCONTEXT()).qcSleepNewProtocolDao();
    private final QcSleepLunchProtocolDao sleepLunchDao = QcDatabase.INSTANCE.getDatabase(QCApplication.INSTANCE.getCONTEXT()).qcSleepLunchProtocolDao();
    private Map<String, Integer> historyDate = new LinkedHashMap();

    public final SleepLunchBean querySleepLunchProtocol(DateUtil dateUtil) {
        Intrinsics.checkNotNullParameter(dateUtil, "dateUtil");
        SleepLunchBean sleepLunchBean = new SleepLunchBean(0, 0, 3, null);
        QcSleepLunchProtocolDao qcSleepLunchProtocolDao = this.sleepLunchDao;
        String y_m_d = dateUtil.getY_M_D();
        Intrinsics.checkNotNullExpressionValue(y_m_d, "dateUtil.y_M_D");
        SleepLunchProtocol sleepLunchProtocolQueryByDate = qcSleepLunchProtocolDao.queryByDate(y_m_d, UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
        if (sleepLunchProtocolQueryByDate != null) {
            sleepLunchBean.setLunchSt(sleepLunchProtocolQueryByDate.getLunchSt());
            sleepLunchBean.setLunchEt(sleepLunchProtocolQueryByDate.getLunchEt());
        }
        return sleepLunchBean;
    }

    public final SleepViewBean querySleepNewProtocol(DateUtil dateUtil) {
        int d;
        int d2;
        int d3;
        Iterator it;
        Intrinsics.checkNotNullParameter(dateUtil, "dateUtil");
        SleepViewBean sleepViewBean = new SleepViewBean(null, 0, 0, 0, 0, 0, 0L, 0L, 255, null);
        QcSleepNewProtocolDao qcSleepNewProtocolDao = this.sleepNewDao;
        String y_m_d = dateUtil.getY_M_D();
        Intrinsics.checkNotNullExpressionValue(y_m_d, "dateUtil.y_M_D");
        SleepNewProtocol sleepNewProtocolQueryByDate = qcSleepNewProtocolDao.queryByDate(y_m_d, UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
        if (sleepNewProtocolQueryByDate != null) {
            String detail = sleepNewProtocolQueryByDate.getDetail();
            JsonAdapter jsonAdapterAdapter = MoshiUtils.INSTANCE.getMoshiBuild().adapter(new TypeToken<List<SleepNewProtoResp.DetailBean>>() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$querySleepNewProtocol$$inlined$fromJson$1
            }.getType());
            Intrinsics.checkNotNullExpressionValue(jsonAdapterAdapter, "moshiBuild.adapter(objec…: TypeToken<T>() {}.type)");
            List<SleepNewProtoResp.DetailBean> list = (List) jsonAdapterAdapter.fromJson(detail);
            ArrayList arrayList = new ArrayList();
            int d4 = 0;
            if (list != null) {
                ArrayList arrayList2 = new ArrayList();
                SleepNewProtoResp.DetailBean detailBean = new SleepNewProtoResp.DetailBean();
                int i = 0;
                for (SleepNewProtoResp.DetailBean detailBean2 : list) {
                    int i2 = i + 1;
                    if (i == 0) {
                        detailBean = detailBean2;
                    }
                    if (i2 < list.size()) {
                        if (detailBean2.getT() == ((SleepNewProtoResp.DetailBean) list.get(i2)).getT()) {
                            detailBean.setD(((SleepNewProtoResp.DetailBean) list.get(i2)).getD() + ((SleepNewProtoResp.DetailBean) list.get(i)).getD());
                        } else {
                            arrayList2.add(detailBean);
                            detailBean = (SleepNewProtoResp.DetailBean) list.get(i2);
                        }
                    } else {
                        arrayList2.add(detailBean);
                    }
                    i = i2;
                }
                Iterator it2 = arrayList2.iterator();
                d = 0;
                d2 = 0;
                d3 = 0;
                int i3 = 0;
                while (it2.hasNext()) {
                    int i4 = i3 + 1;
                    SleepNewProtoResp.DetailBean detailBean3 = (SleepNewProtoResp.DetailBean) it2.next();
                    int t = detailBean3.getT();
                    if (t == 2) {
                        d += detailBean3.getD();
                    } else if (t == 3) {
                        d4 += detailBean3.getD();
                    } else if (t == 4) {
                        d3 += detailBean3.getD();
                    } else if (t == 5) {
                        d2 += detailBean3.getD();
                    }
                    QSleepBarChart.SleepDataBean sleepDataBean = new QSleepBarChart.SleepDataBean();
                    int t2 = detailBean3.getT();
                    if (t2 == 0 || t2 == 1) {
                        sleepDataBean.setType(4);
                    } else if (t2 == 2) {
                        sleepDataBean.setType(2);
                    } else if (t2 == 3) {
                        sleepDataBean.setType(1);
                    } else if (t2 == 4) {
                        sleepDataBean.setType(5);
                    } else if (t2 == 5) {
                        sleepDataBean.setType(3);
                    }
                    if (i3 == 0) {
                        sleepDataBean.setSleepStart(sleepNewProtocolQueryByDate.getSt());
                        it = it2;
                        sleepDataBean.setSleepEnd(sleepNewProtocolQueryByDate.getSt() + (detailBean3.getD() * 60));
                        arrayList.add(sleepDataBean);
                    } else {
                        it = it2;
                        QSleepBarChart.SleepDataBean sleepDataBean2 = (QSleepBarChart.SleepDataBean) arrayList.get(i3 - 1);
                        sleepDataBean.setSleepStart(sleepDataBean2.getSleepEnd());
                        sleepDataBean.setSleepEnd(sleepDataBean2.getSleepEnd() + (detailBean3.getD() * 60));
                        arrayList.add(sleepDataBean);
                    }
                    i3 = i4;
                    it2 = it;
                }
            } else {
                d = 0;
                d2 = 0;
                d3 = 0;
            }
            int i5 = d4 * 60;
            int i6 = d * 60;
            int i7 = d2 * 60;
            int i8 = d3 * 60;
            if (i8 > 0) {
                UserConfig.INSTANCE.getInstance().setSupportRem(true);
                UserConfig.INSTANCE.getInstance().save();
            }
            sleepViewBean.setStartTime(sleepNewProtocolQueryByDate.getSt());
            sleepViewBean.setEndTime(sleepNewProtocolQueryByDate.getEt());
            sleepViewBean.setTotalSleep(i5 + i6 + i7 + i8);
            sleepViewBean.setDeepSleep(i5);
            sleepViewBean.setLightSleep(i6);
            sleepViewBean.setAwakeSleep(i7);
            sleepViewBean.setRapidSleep(i8);
            sleepViewBean.setData(arrayList);
            return sleepViewBean;
        }
        return new SleepViewBean(null, 0, 0, 0, 0, 0, 0L, 0L, 255, null);
    }

    public final Object syncSleepDetail(String str, String str2, final BaseDeviceResult<ReadSleepDetailsRsp> baseDeviceResult, Continuation<? super Unit> continuation) throws InterruptedException {
        if (!BleOperateManager.getInstance().isConnected()) {
            return Unit.INSTANCE;
        }
        if (UserConfig.INSTANCE.getInstance().getNewSleepProtocol()) {
            syncSleepDetail(255, baseDeviceResult);
            return Unit.INSTANCE;
        }
        Object objCollect = FlowKt.m2566catch(FlowKt.flowOn(FlowKt.flow(new C03872(str2, null)), Dispatchers.getIO()), new C03883(null)).collect(new FlowCollector() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.syncSleepDetail.4
            @Override // kotlinx.coroutines.flow.FlowCollector
            public /* bridge */ /* synthetic */ Object emit(Object obj, Continuation continuation2) {
                return emit((Map<String, Integer>) obj, (Continuation<? super Unit>) continuation2);
            }

            public final Object emit(Map<String, Integer> map, Continuation<? super Unit> continuation2) {
                DateUtil dateUtil = new DateUtil();
                dateUtil.addDay(-1);
                Map map2 = SleepDetailRepository.this.historyDate;
                String y_m_d = dateUtil.getY_M_D();
                Intrinsics.checkNotNullExpressionValue(y_m_d, "date.y_M_D");
                map2.put(y_m_d, Boxing.boxInt(1));
                SleepDetailRepository sleepDetailRepository = SleepDetailRepository.this;
                Map<String, Integer> mapSortMapByValue = MapUtils.sortMapByValue(sleepDetailRepository.historyDate);
                Intrinsics.checkNotNullExpressionValue(mapSortMapByValue, "sortMapByValue(historyDate)");
                sleepDetailRepository.historyDate = mapSortMapByValue;
                Iterator it = SleepDetailRepository.this.historyDate.entrySet().iterator();
                if (it.hasNext()) {
                    Map.Entry entry = (Map.Entry) it.next();
                    SleepDetailRepository.this.syncDeviceSleepDetail((String) entry.getKey(), ((Number) entry.getValue()).intValue(), baseDeviceResult);
                } else {
                    baseDeviceResult.result(0, new ReadSleepDetailsRsp());
                }
                return Unit.INSTANCE;
            }
        }, continuation);
        return objCollect == IntrinsicsKt.getCOROUTINE_SUSPENDED() ? objCollect : Unit.INSTANCE;
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0016\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u00030\u0002H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "", "", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$syncSleepDetail$2", f = "SleepDetailRepository.kt", i = {}, l = {217}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$syncSleepDetail$2, reason: invalid class name and case insensitive filesystem */
    static final class C03872 extends SuspendLambda implements Function2<FlowCollector<? super Map<String, ? extends Integer>>, Continuation<? super Unit>, Object> {
        final /* synthetic */ String $deviceAddress;
        private /* synthetic */ Object L$0;
        int label;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C03872(String str, Continuation<? super C03872> continuation) {
            super(2, continuation);
            this.$deviceAddress = str;
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
            C03872 c03872 = SleepDetailRepository.this.new C03872(this.$deviceAddress, continuation);
            c03872.L$0 = obj;
            return c03872;
        }

        @Override // kotlin.jvm.functions.Function2
        public /* bridge */ /* synthetic */ Object invoke(FlowCollector<? super Map<String, ? extends Integer>> flowCollector, Continuation<? super Unit> continuation) {
            return invoke2((FlowCollector<? super Map<String, Integer>>) flowCollector, continuation);
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Object invoke2(FlowCollector<? super Map<String, Integer>> flowCollector, Continuation<? super Unit> continuation) {
            return ((C03872) create(flowCollector, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                FlowCollector flowCollector = (FlowCollector) this.L$0;
                for (int i2 = 1; i2 < 7; i2++) {
                    DateUtil dateUtil = new DateUtil();
                    dateUtil.addDay(-i2);
                    Map map = SleepDetailRepository.this.historyDate;
                    String y_m_d = dateUtil.getY_M_D();
                    Intrinsics.checkNotNullExpressionValue(y_m_d, "date.y_M_D");
                    map.put(y_m_d, Boxing.boxInt(i2));
                }
                List<SleepDetail> listQueryDaysHistoryDate = SleepDetailRepository.this.sleepDetailDao.queryDaysHistoryDate(this.$deviceAddress);
                if (listQueryDaysHistoryDate != null) {
                    for (SleepDetail sleepDetail : listQueryDaysHistoryDate) {
                        if (new DateUtil(sleepDetail.getLastSyncTime(), true).isToday()) {
                            SleepDetailRepository.this.historyDate.remove(sleepDetail.getDateStr());
                        }
                    }
                }
                XLog.i("sync sleep detail");
                XLog.i(SleepDetailRepository.this.historyDate);
                this.label = 1;
                if (flowCollector.emit(SleepDetailRepository.this.historyDate, this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u001c\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0010$\n\u0002\u0010\u000e\n\u0002\u0010\b\n\u0000\n\u0002\u0010\u0003\u0010\u0000\u001a\u00020\u0001*\u0014\u0012\u0010\u0012\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00050\u00030\u00022\u0006\u0010\u0006\u001a\u00020\u0007H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "", "", "", "t", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$syncSleepDetail$3", f = "SleepDetailRepository.kt", i = {}, l = {225}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$syncSleepDetail$3, reason: invalid class name and case insensitive filesystem */
    static final class C03883 extends SuspendLambda implements Function3<FlowCollector<? super Map<String, ? extends Integer>>, Throwable, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        /* synthetic */ Object L$1;
        int label;

        C03883(Continuation<? super C03883> continuation) {
            super(3, continuation);
        }

        @Override // kotlin.jvm.functions.Function3
        public /* bridge */ /* synthetic */ Object invoke(FlowCollector<? super Map<String, ? extends Integer>> flowCollector, Throwable th, Continuation<? super Unit> continuation) {
            return invoke2((FlowCollector<? super Map<String, Integer>>) flowCollector, th, continuation);
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Object invoke2(FlowCollector<? super Map<String, Integer>> flowCollector, Throwable th, Continuation<? super Unit> continuation) {
            C03883 c03883 = SleepDetailRepository.this.new C03883(continuation);
            c03883.L$0 = flowCollector;
            c03883.L$1 = th;
            return c03883.invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                FlowCollector flowCollector = (FlowCollector) this.L$0;
                ((Throwable) this.L$1).printStackTrace();
                for (int i2 = 1; i2 < 7; i2++) {
                    DateUtil dateUtil = new DateUtil();
                    dateUtil.addDay(-i2);
                    Map map = SleepDetailRepository.this.historyDate;
                    String y_m_d = dateUtil.getY_M_D();
                    Intrinsics.checkNotNullExpressionValue(y_m_d, "date.y_M_D");
                    map.put(y_m_d, Boxing.boxInt(i2));
                }
                this.L$0 = null;
                this.label = 1;
                if (flowCollector.emit(SleepDetailRepository.this.historyDate, this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    public final void syncTodaySleepDetail(final int dayIndex, final BaseDeviceResult<ReadSleepDetailsRsp> result) throws InterruptedException {
        Intrinsics.checkNotNullParameter(result, "result");
        if (UserConfig.INSTANCE.getInstance().getNewSleepProtocol()) {
            syncSleepDetail(0, result);
        } else {
            CommandHandle.getInstance().executeReqCmd(new ReadSleepDetailsReq(dayIndex, 0, 95), new ICommandResponse() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$$ExternalSyntheticLambda0
                @Override // com.oudmon.ble.base.communication.ICommandResponse
                public final void onDataResponse(BaseRspCmd baseRspCmd) throws InterruptedException {
                    SleepDetailRepository.m299syncTodaySleepDetail$lambda0(this.f$0, dayIndex, result, (ReadSleepDetailsRsp) baseRspCmd);
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: syncTodaySleepDetail$lambda-0, reason: not valid java name */
    public static final void m299syncTodaySleepDetail$lambda0(SleepDetailRepository this$0, int i, BaseDeviceResult result, ReadSleepDetailsRsp it) throws InterruptedException {
        Intrinsics.checkNotNullParameter(this$0, "this$0");
        Intrinsics.checkNotNullParameter(result, "$result");
        if (it.getStatus() == 0) {
            Intrinsics.checkNotNullExpressionValue(it, "it");
            this$0.parseSleepDetailToday(it, i);
            if (i == 1) {
                result.result(0, it);
            }
            if (i == 0) {
                this$0.syncTodaySleepDetail(1, result);
                return;
            }
            return;
        }
        Intrinsics.checkNotNullExpressionValue(it, "it");
        result.result(-1, it);
    }

    private final void syncSleepDetail(int offset, BaseDeviceResult<ReadSleepDetailsRsp> result) throws InterruptedException {
        LargeDataHandler.getInstance().syncSleepList(offset, new ILargeDataSleepResponse() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$$ExternalSyntheticLambda3
            @Override // com.oudmon.ble.base.communication.ILargeDataSleepResponse
            public final void sleepData(SleepNewProtoResp sleepNewProtoResp) throws InterruptedException {
                SleepDetailRepository.m297syncSleepDetail$lambda1(this.f$0, sleepNewProtoResp);
            }
        }, new ILargeDataSleepResponse() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$$ExternalSyntheticLambda2
            @Override // com.oudmon.ble.base.communication.ILargeDataSleepResponse
            public final void sleepData(SleepNewProtoResp sleepNewProtoResp) throws InterruptedException {
                SleepDetailRepository.m298syncSleepDetail$lambda2(this.f$0, sleepNewProtoResp);
            }
        });
        result.result(0, new ReadSleepDetailsRsp());
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: syncSleepDetail$lambda-1, reason: not valid java name */
    public static final void m297syncSleepDetail$lambda1(SleepDetailRepository this$0, final SleepNewProtoResp sleepNewProtoResp) throws InterruptedException {
        Intrinsics.checkNotNullParameter(this$0, "this$0");
        ThreadExtKt.ktxRunOnBgSingle(this$0, new Function1<SleepDetailRepository, Unit>() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$syncSleepDetail$5$1
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Unit invoke(SleepDetailRepository sleepDetailRepository) throws InterruptedException {
                invoke2(sleepDetailRepository);
                return Unit.INSTANCE;
            }

            /* renamed from: invoke, reason: avoid collision after fix types in other method */
            public final void invoke2(SleepDetailRepository ktxRunOnBgSingle) throws InterruptedException {
                Intrinsics.checkNotNullParameter(ktxRunOnBgSingle, "$this$ktxRunOnBgSingle");
                SleepNewProtoResp it = sleepNewProtoResp;
                if (it == null) {
                    ktxRunOnBgSingle.deleteNewSleepData();
                    return;
                }
                Intrinsics.checkNotNullExpressionValue(it, "it");
                ktxRunOnBgSingle.saveSleepNewProtocol(it);
                SleepNewProtoResp it2 = sleepNewProtoResp;
                Intrinsics.checkNotNullExpressionValue(it2, "it");
                ktxRunOnBgSingle.saveSleepToTotal(it2);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: syncSleepDetail$lambda-2, reason: not valid java name */
    public static final void m298syncSleepDetail$lambda2(SleepDetailRepository this$0, final SleepNewProtoResp sleepNewProtoResp) throws InterruptedException {
        Intrinsics.checkNotNullParameter(this$0, "this$0");
        ThreadExtKt.ktxRunOnBgSingle(this$0, new Function1<SleepDetailRepository, Unit>() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$syncSleepDetail$6$1
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Unit invoke(SleepDetailRepository sleepDetailRepository) throws InterruptedException {
                invoke2(sleepDetailRepository);
                return Unit.INSTANCE;
            }

            /* renamed from: invoke, reason: avoid collision after fix types in other method */
            public final void invoke2(SleepDetailRepository ktxRunOnBgSingle) throws InterruptedException {
                Intrinsics.checkNotNullParameter(ktxRunOnBgSingle, "$this$ktxRunOnBgSingle");
                XLog.i(new Gson().toJson(sleepNewProtoResp));
                SleepNewProtoResp it = sleepNewProtoResp;
                if (it == null) {
                    ktxRunOnBgSingle.deleteLunchSleepData();
                } else {
                    Intrinsics.checkNotNullExpressionValue(it, "it");
                    ktxRunOnBgSingle.saveSleepLunchProtocol(it);
                }
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final void saveSleepNewProtocol(SleepNewProtoResp sleepBean) {
        String deviceAddressNoClear = UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear();
        String y_m_d = new DateUtil(sleepBean.getEt(), true).getY_M_D();
        Intrinsics.checkNotNullExpressionValue(y_m_d, "DateUtil(sleepBean.et.toLong(), true).y_M_D");
        List<SleepNewProtoResp.DetailBean> list = sleepBean.getList();
        Intrinsics.checkNotNullExpressionValue(list, "sleepBean.list");
        this.sleepNewDao.insert(new SleepNewProtocol(deviceAddressNoClear, y_m_d, MoshiUtilsKt.toJson(list), sleepBean.getSt(), sleepBean.getEt(), false, new DateUtil().getUnixTimestamp()));
    }

    public final SleepViewBean calcLastSleep() {
        if (UserConfig.INSTANCE.getInstance().getNewSleepProtocol()) {
            if (INSTANCE.getGetInstance().queryLastSleepNewProtocol() != null) {
                return querySleepNewProtocol(new DateUtil(r0.getEt(), true));
            }
        } else {
            Companion companion = INSTANCE;
            SleepDetail sleepDetailQueryLastSleep = companion.getGetInstance().queryLastSleep();
            if (sleepDetailQueryLastSleep != null) {
                DateUtil dateUtil = new DateUtil(DateUtil.String2Date("yyyy-MM-dd", sleepDetailQueryLastSleep.getDateStr()));
                SleepDetailRepository getInstance = companion.getGetInstance();
                String y_m_d = dateUtil.getY_M_D();
                Intrinsics.checkNotNullExpressionValue(y_m_d, "dateUtil.y_M_D");
                SleepDetail sleepDetailQuerySleepByDate = getInstance.querySleepByDate(y_m_d);
                DateUtil dateUtil2 = new DateUtil(dateUtil.getUnixTimestamp(), true);
                dateUtil2.addDay(-1);
                SleepDetailRepository getInstance2 = companion.getGetInstance();
                String y_m_d2 = dateUtil2.getY_M_D();
                Intrinsics.checkNotNullExpressionValue(y_m_d2, "yesDate.y_M_D");
                SleepDetail sleepDetailQuerySleepByDate2 = getInstance2.querySleepByDate(y_m_d2);
                if (sleepDetailQuerySleepByDate2 == null) {
                    sleepDetailQuerySleepByDate2 = new SleepDetail(UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear(), "", TypedValues.Custom.TYPE_INT, "", "", false, new DateUtil().getUnixTimestamp());
                }
                if (sleepDetailQuerySleepByDate != null) {
                    SleepViewBean sleepViewBeanCalcSleepViewData = companion.getGetInstance().calcSleepViewData(sleepDetailQuerySleepByDate, sleepDetailQuerySleepByDate2);
                    if (sleepViewBeanCalcSleepViewData.getTotalSleep() > 0) {
                        return sleepViewBeanCalcSleepViewData;
                    }
                }
            }
        }
        return new SleepViewBean(null, 0, 0, 0, 0, 0, 0L, 0L, 255, null);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final void saveSleepLunchProtocol(SleepNewProtoResp sleepBean) {
        String deviceAddressNoClear = UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear();
        String y_m_d = new DateUtil(sleepBean.getLunchEt(), true).getY_M_D();
        Intrinsics.checkNotNullExpressionValue(y_m_d, "DateUtil(sleepBean.lunchEt.toLong(), true).y_M_D");
        List<SleepNewProtoResp.DetailBean> list = sleepBean.getList();
        Intrinsics.checkNotNullExpressionValue(list, "sleepBean.list");
        this.sleepLunchDao.insert(new SleepLunchProtocol(deviceAddressNoClear, y_m_d, MoshiUtilsKt.toJson(list), sleepBean.getLunchSt(), sleepBean.getLunchEt(), false, new DateUtil().getUnixTimestamp()));
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final void deleteLunchSleepData() throws InterruptedException {
        ThreadExtKt.ktxRunOnBgSingle(this, new Function1<SleepDetailRepository, Unit>() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.deleteLunchSleepData.1
            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Unit invoke(SleepDetailRepository sleepDetailRepository) {
                invoke2(sleepDetailRepository);
                return Unit.INSTANCE;
            }

            /* renamed from: invoke, reason: avoid collision after fix types in other method */
            public final void invoke2(SleepDetailRepository ktxRunOnBgSingle) {
                Intrinsics.checkNotNullParameter(ktxRunOnBgSingle, "$this$ktxRunOnBgSingle");
                QcSleepLunchProtocolDao qcSleepLunchProtocolDao = ktxRunOnBgSingle.sleepLunchDao;
                String y_m_d = new DateUtil().getY_M_D();
                Intrinsics.checkNotNullExpressionValue(y_m_d, "DateUtil().y_M_D");
                SleepLunchProtocol sleepLunchProtocolQueryByDate = qcSleepLunchProtocolDao.queryByDate(y_m_d, UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
                if (sleepLunchProtocolQueryByDate != null) {
                    ktxRunOnBgSingle.sleepLunchDao.delete(sleepLunchProtocolQueryByDate);
                }
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final void deleteNewSleepData() throws InterruptedException {
        ThreadExtKt.ktxRunOnBgSingle(this, new Function1<SleepDetailRepository, Unit>() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.deleteNewSleepData.1
            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Unit invoke(SleepDetailRepository sleepDetailRepository) {
                invoke2(sleepDetailRepository);
                return Unit.INSTANCE;
            }

            /* renamed from: invoke, reason: avoid collision after fix types in other method */
            public final void invoke2(SleepDetailRepository ktxRunOnBgSingle) {
                Intrinsics.checkNotNullParameter(ktxRunOnBgSingle, "$this$ktxRunOnBgSingle");
                QcSleepNewProtocolDao qcSleepNewProtocolDao = ktxRunOnBgSingle.sleepNewDao;
                String y_m_d = new DateUtil().getY_M_D();
                Intrinsics.checkNotNullExpressionValue(y_m_d, "DateUtil().y_M_D");
                SleepNewProtocol sleepNewProtocolQueryByDate = qcSleepNewProtocolDao.queryByDate(y_m_d, UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
                if (sleepNewProtocolQueryByDate != null) {
                    ktxRunOnBgSingle.sleepNewDao.delete(sleepNewProtocolQueryByDate);
                }
                QcSleepTotalDao qcSleepTotalDao = ktxRunOnBgSingle.sleepTotalDao;
                String deviceAddressNoClear = UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear();
                String y_m_d2 = new DateUtil().getY_M_D();
                Intrinsics.checkNotNullExpressionValue(y_m_d2, "DateUtil().y_M_D");
                SleepTotalHistory sleepTotalHistoryQueryTotalSleepByAddressAndDate = qcSleepTotalDao.queryTotalSleepByAddressAndDate(deviceAddressNoClear, y_m_d2);
                if (sleepTotalHistoryQueryTotalSleepByAddressAndDate != null) {
                    ktxRunOnBgSingle.sleepTotalDao.delete(sleepTotalHistoryQueryTotalSleepByAddressAndDate);
                }
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final void saveSleepToTotal(SleepNewProtoResp sleepBean) {
        List<SleepNewProtoResp.DetailBean> list = sleepBean.getList();
        Intrinsics.checkNotNullExpressionValue(list, "sleepBean.list");
        int d = 0;
        int d2 = 0;
        int d3 = 0;
        int d4 = 0;
        for (SleepNewProtoResp.DetailBean detailBean : list) {
            int t = detailBean.getT();
            if (t == 2) {
                d2 += detailBean.getD();
            } else if (t == 3) {
                d += detailBean.getD();
            } else if (t == 4) {
                d4 += detailBean.getD();
            } else if (t == 5) {
                d3 += detailBean.getD();
            }
        }
        int i = d * 60;
        int i2 = d2 * 60;
        int i3 = d3 * 60;
        int i4 = d4 * 60;
        if (i4 > 0) {
            UserConfig.INSTANCE.getInstance().setSupportRem(true);
            UserConfig.INSTANCE.getInstance().save();
        }
        String deviceAddressNoClear = UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear();
        String y_m_d = new DateUtil(sleepBean.getEt(), true).getY_M_D();
        Intrinsics.checkNotNullExpressionValue(y_m_d, "DateUtil(sleepBean.et.toLong(), true).y_M_D");
        this.sleepTotalDao.insert(new SleepTotalHistory(deviceAddressNoClear, y_m_d, i + i2 + i3 + i4, i, i2, i4, i3, sleepBean.getSt(), sleepBean.getEt(), (int) new DateUtil(sleepBean.getEt(), true).getZeroTime()));
    }

    public final SleepDetail querySleepByDate(String dateStr) {
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        return this.sleepDetailDao.queryByDate(dateStr, UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
    }

    public final SleepDetail queryLastSleep() {
        return this.sleepDetailDao.queryLastSyncDate(UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
    }

    public final SleepNewProtocol queryLastSleepNewProtocol() {
        return this.sleepNewDao.queryLastSyncDate(UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
    }

    private final List<SleepTotalHistory> queryWeekSleepByDate(DateUtil dateStart, DateUtil dateEnd) {
        return this.sleepTotalDao.queryByAddressAndDate(UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear(), String.valueOf(dateStart.getZeroTime()), String.valueOf(dateEnd.getUnixTimestamp()));
    }

    public final SleepTotalHistory querySleepTotalByDate(String dateStr) {
        Intrinsics.checkNotNullParameter(dateStr, "dateStr");
        return this.sleepTotalDao.queryTotalSleepByAddressAndDate(UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear(), dateStr);
    }

    public final List<QSleepWeekBarView.SleepDataBean> querySleepWeek(DateUtil start) {
        Intrinsics.checkNotNullParameter(start, "start");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        DateUtil dateUtil = new DateUtil(start.getUnixTimestamp(), true);
        DateUtil dateUtil2 = new DateUtil(start.getZeroTime() + 86399, true);
        dateUtil2.addDay(6);
        List<SleepTotalHistory> listQueryWeekSleepByDate = queryWeekSleepByDate(start, dateUtil2);
        for (int i = 0; i < 7; i++) {
            String y_m_d = dateUtil.getY_M_D();
            Intrinsics.checkNotNullExpressionValue(y_m_d, "temp.y_M_D");
            linkedHashMap.put(y_m_d, new QSleepWeekBarView.SleepDataBean(dateUtil.getUnixTimestamp(), 0, 0, 0, 0, 0.0f, 0.0f, 0.0f));
            dateUtil.addDay(1);
        }
        for (SleepTotalHistory sleepTotalHistory : listQueryWeekSleepByDate) {
            int totalSleep = sleepTotalHistory.getTotalSleep() / 60;
            int deepSleep = sleepTotalHistory.getDeepSleep() / 60;
            int lightSleep = sleepTotalHistory.getLightSleep() / 60;
            int rapidSleep = sleepTotalHistory.getRapidSleep() / 60;
            int awake = sleepTotalHistory.getAwake() / 60;
            float f = totalSleep;
            QSleepWeekBarView.SleepDataBean sleepDataBean = new QSleepWeekBarView.SleepDataBean(sleepTotalHistory.getUnixTime(), totalSleep, deepSleep, lightSleep, awake, rapidSleep, (deepSleep * 1.0f) / f, (lightSleep * 1.0f) / f, (awake * 1.0f) / f, (rapidSleep * 1.0f) / f);
            String y_m_d2 = new DateUtil(sleepTotalHistory.getUnixTime(), true).getY_M_D();
            Intrinsics.checkNotNullExpressionValue(y_m_d2, "DateUtil(item.unixTime.toLong(), true).y_M_D");
            linkedHashMap.put(y_m_d2, sleepDataBean);
        }
        return new ArrayList(linkedHashMap.values());
    }

    public final List<QSleepMonthBarView.SleepDataBean> querySleepMonth(DateUtil start) {
        Intrinsics.checkNotNullParameter(start, "start");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        int daysOfMonth = DateUtil.getDaysOfMonth(start.toDate());
        boolean z = true;
        DateUtil dateUtil = new DateUtil(start.getUnixTimestamp(), true);
        DateUtil dateUtil2 = new DateUtil(start.getZeroTime() + 86399, true);
        dateUtil2.addDay(daysOfMonth - 1);
        List<SleepTotalHistory> listQueryWeekSleepByDate = queryWeekSleepByDate(start, dateUtil2);
        for (int i = 0; i < daysOfMonth; i++) {
            String y_m_d = dateUtil.getY_M_D();
            Intrinsics.checkNotNullExpressionValue(y_m_d, "temp.y_M_D");
            linkedHashMap.put(y_m_d, new QSleepMonthBarView.SleepDataBean(dateUtil.getUnixTimestamp(), 0, 0, 0, 0, 0, 0.0f, 0.0f, 0.0f, 0.0f));
            dateUtil.addDay(1);
        }
        for (SleepTotalHistory sleepTotalHistory : listQueryWeekSleepByDate) {
            int totalSleep = sleepTotalHistory.getTotalSleep() / 60;
            int deepSleep = sleepTotalHistory.getDeepSleep() / 60;
            int lightSleep = sleepTotalHistory.getLightSleep() / 60;
            int awake = sleepTotalHistory.getAwake() / 60;
            int rapidSleep = sleepTotalHistory.getRapidSleep() / 60;
            if (sleepTotalHistory.getRapidSleep() > 0) {
                UserConfig.INSTANCE.getInstance().setSupportRem(z);
                UserConfig.INSTANCE.getInstance().save();
            }
            float f = totalSleep;
            QSleepMonthBarView.SleepDataBean sleepDataBean = new QSleepMonthBarView.SleepDataBean(sleepTotalHistory.getUnixTime(), totalSleep, deepSleep, lightSleep, awake, rapidSleep, (deepSleep * 1.0f) / f, (lightSleep * 1.0f) / f, (awake * 1.0f) / f, (rapidSleep * 1.0f) / f);
            String y_m_d2 = new DateUtil(sleepTotalHistory.getUnixTime(), true).getY_M_D();
            Intrinsics.checkNotNullExpressionValue(y_m_d2, "DateUtil(item.unixTime.toLong(), true).y_M_D");
            linkedHashMap.put(y_m_d2, sleepDataBean);
            z = true;
        }
        return new ArrayList(linkedHashMap.values());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final void syncDeviceSleepDetail(final String key, int dayIndex, final BaseDeviceResult<ReadSleepDetailsRsp> result) {
        CommandHandle.getInstance().executeReqCmd(new ReadSleepDetailsReq(dayIndex, 0, 95), new ICommandResponse() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$$ExternalSyntheticLambda1
            @Override // com.oudmon.ble.base.communication.ICommandResponse
            public final void onDataResponse(BaseRspCmd baseRspCmd) throws InterruptedException {
                SleepDetailRepository.m296syncDeviceSleepDetail$lambda4(this.f$0, key, result, (ReadSleepDetailsRsp) baseRspCmd);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: syncDeviceSleepDetail$lambda-4, reason: not valid java name */
    public static final void m296syncDeviceSleepDetail$lambda4(SleepDetailRepository this$0, String key, BaseDeviceResult result, ReadSleepDetailsRsp it) throws InterruptedException {
        Intrinsics.checkNotNullParameter(this$0, "this$0");
        Intrinsics.checkNotNullParameter(key, "$key");
        Intrinsics.checkNotNullParameter(result, "$result");
        if (it.getStatus() == 0) {
            ArrayList<BleSleepDetails> list = it.getBleSleepDetailses();
            Intrinsics.checkNotNullExpressionValue(list, "list");
            if (!list.isEmpty()) {
                this$0.historyDate.remove(new DateUtil(list.get(0).getYear(), list.get(0).getMonth(), list.get(0).getDay()).getY_M_D());
            } else {
                this$0.historyDate.remove(key);
            }
            Intrinsics.checkNotNullExpressionValue(it, "it");
            this$0.parseSleepDetail(it);
            if (!this$0.historyDate.isEmpty()) {
                Iterator<Map.Entry<String, Integer>> it2 = this$0.historyDate.entrySet().iterator();
                if (it2.hasNext()) {
                    Map.Entry<String, Integer> next = it2.next();
                    this$0.syncDeviceSleepDetail(next.getKey(), next.getValue().intValue(), result);
                    return;
                }
                return;
            }
            result.result(0, it);
            return;
        }
        Intrinsics.checkNotNullExpressionValue(it, "it");
        result.result(-1, it);
    }

    /* JADX WARN: Removed duplicated region for block: B:15:0x005d  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final com.qcwireless.qcwatch.ui.home.sleep.bean.SleepViewBean calcSleepViewData(com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail r30, com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail r31) {
        /*
            Method dump skipped, instructions count: 1055
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.calcSleepViewData(com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail, com.qcwireless.qcwatch.ui.base.repository.entity.SleepDetail):com.qcwireless.qcwatch.ui.home.sleep.bean.SleepViewBean");
    }

    private final void parseSleepDetailToday(final ReadSleepDetailsRsp resultEntity, final int dayIndex) throws InterruptedException {
        ThreadExtKt.ktxRunOnBgSingle(this, new Function1<SleepDetailRepository, Unit>() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.parseSleepDetailToday.1
            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Unit invoke(SleepDetailRepository sleepDetailRepository) throws InterruptedException {
                invoke2(sleepDetailRepository);
                return Unit.INSTANCE;
            }

            /* renamed from: invoke, reason: avoid collision after fix types in other method */
            public final void invoke2(SleepDetailRepository ktxRunOnBgSingle) throws InterruptedException {
                Intrinsics.checkNotNullParameter(ktxRunOnBgSingle, "$this$ktxRunOnBgSingle");
                ArrayList<BleSleepDetails> bleSleepDetailses = resultEntity.getBleSleepDetailses();
                Intrinsics.checkNotNullExpressionValue(bleSleepDetailses, "resultEntity.bleSleepDetailses");
                if (bleSleepDetailses.size() > 0) {
                    DateUtil dateUtil = new DateUtil(bleSleepDetailses.get(0).getYear(), bleSleepDetailses.get(0).getMonth(), bleSleepDetailses.get(0).getDay());
                    if (dateUtil.getZeroTime() > new DateUtil().getZeroTime()) {
                        return;
                    }
                    QcSleepDetailDao qcSleepDetailDao = ktxRunOnBgSingle.sleepDetailDao;
                    String y_m_d = dateUtil.getY_M_D();
                    Intrinsics.checkNotNullExpressionValue(y_m_d, "dataDate.y_M_D");
                    SleepDetail sleepDetailQueryByDate = qcSleepDetailDao.queryByDate(y_m_d, UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
                    String deviceNameNoClear = UserConfig.INSTANCE.getInstance().getDeviceNameNoClear();
                    String deviceAddressNoClear = UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear();
                    String y_m_d2 = dateUtil.getY_M_D();
                    Intrinsics.checkNotNullExpressionValue(y_m_d2, "dataDate.y_M_D");
                    SleepDetail sleepDetail = ktxRunOnBgSingle.toSleepDetail(deviceNameNoClear, deviceAddressNoClear, y_m_d2, TypedValues.Custom.TYPE_INT, bleSleepDetailses);
                    if (DateUtil.isSameDay(dateUtil.toDate(), new Date())) {
                        if (sleepDetailQueryByDate != null) {
                            sleepDetail = ktxRunOnBgSingle.merge(sleepDetailQueryByDate, sleepDetail);
                        }
                        ktxRunOnBgSingle.sleepDetailDao.insert(sleepDetail);
                    } else {
                        ktxRunOnBgSingle.sleepDetailDao.insert(sleepDetail);
                    }
                    DateUtil dateUtil2 = new DateUtil(dateUtil.getUnixTimestamp(), true);
                    dateUtil2.addDay(-1);
                    String y_m_d3 = dateUtil2.getY_M_D();
                    Intrinsics.checkNotNullExpressionValue(y_m_d3, "yesDate.y_M_D");
                    SleepDetail sleepDetailQuerySleepByDate = ktxRunOnBgSingle.querySleepByDate(y_m_d3);
                    if (sleepDetailQuerySleepByDate == null) {
                        sleepDetailQuerySleepByDate = new SleepDetail(UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear(), "", TypedValues.Custom.TYPE_INT, "", "", false, new DateUtil().getUnixTimestamp());
                    }
                    ktxRunOnBgSingle.calcSleepViewData(sleepDetail, sleepDetailQuerySleepByDate);
                    return;
                }
                if (dayIndex == 0) {
                    ThreadExtKt.ktxRunOnBgSingle(ktxRunOnBgSingle, new Function1<SleepDetailRepository, Unit>() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.parseSleepDetailToday.1.1
                        @Override // kotlin.jvm.functions.Function1
                        public /* bridge */ /* synthetic */ Unit invoke(SleepDetailRepository sleepDetailRepository) {
                            invoke2(sleepDetailRepository);
                            return Unit.INSTANCE;
                        }

                        /* renamed from: invoke, reason: avoid collision after fix types in other method */
                        public final void invoke2(SleepDetailRepository ktxRunOnBgSingle2) {
                            Intrinsics.checkNotNullParameter(ktxRunOnBgSingle2, "$this$ktxRunOnBgSingle");
                            QcSleepDetailDao qcSleepDetailDao2 = ktxRunOnBgSingle2.sleepDetailDao;
                            String y_m_d4 = new DateUtil().getY_M_D();
                            Intrinsics.checkNotNullExpressionValue(y_m_d4, "DateUtil().y_M_D");
                            SleepDetail sleepDetailQueryByDate2 = qcSleepDetailDao2.queryByDate(y_m_d4, UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
                            if (sleepDetailQueryByDate2 != null) {
                                ktxRunOnBgSingle2.sleepDetailDao.delete(sleepDetailQueryByDate2);
                            }
                            QcSleepTotalDao qcSleepTotalDao = ktxRunOnBgSingle2.sleepTotalDao;
                            String deviceAddressNoClear2 = UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear();
                            String y_m_d5 = new DateUtil().getY_M_D();
                            Intrinsics.checkNotNullExpressionValue(y_m_d5, "DateUtil().y_M_D");
                            SleepTotalHistory sleepTotalHistoryQueryTotalSleepByAddressAndDate = qcSleepTotalDao.queryTotalSleepByAddressAndDate(deviceAddressNoClear2, y_m_d5);
                            if (sleepTotalHistoryQueryTotalSleepByAddressAndDate != null) {
                                ktxRunOnBgSingle2.sleepTotalDao.delete(sleepTotalHistoryQueryTotalSleepByAddressAndDate);
                            }
                        }
                    });
                }
            }
        });
    }

    private final void parseSleepDetail(final ReadSleepDetailsRsp resultEntity) throws InterruptedException {
        ThreadExtKt.ktxRunOnBgSingle(this, new Function1<SleepDetailRepository, Unit>() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.parseSleepDetail.1
            {
                super(1);
            }

            @Override // kotlin.jvm.functions.Function1
            public /* bridge */ /* synthetic */ Unit invoke(SleepDetailRepository sleepDetailRepository) {
                invoke2(sleepDetailRepository);
                return Unit.INSTANCE;
            }

            /* renamed from: invoke, reason: avoid collision after fix types in other method */
            public final void invoke2(SleepDetailRepository ktxRunOnBgSingle) {
                Intrinsics.checkNotNullParameter(ktxRunOnBgSingle, "$this$ktxRunOnBgSingle");
                ArrayList<BleSleepDetails> bleSleepDetailses = resultEntity.getBleSleepDetailses();
                Intrinsics.checkNotNullExpressionValue(bleSleepDetailses, "resultEntity.bleSleepDetailses");
                if (bleSleepDetailses.size() > 0) {
                    DateUtil dateUtil = new DateUtil(bleSleepDetailses.get(0).getYear(), bleSleepDetailses.get(0).getMonth(), bleSleepDetailses.get(0).getDay());
                    if (dateUtil.getZeroTime() > new DateUtil().getZeroTime()) {
                        return;
                    }
                    QcSleepDetailDao qcSleepDetailDao = ktxRunOnBgSingle.sleepDetailDao;
                    String y_m_d = dateUtil.getY_M_D();
                    Intrinsics.checkNotNullExpressionValue(y_m_d, "dataDate.y_M_D");
                    SleepDetail sleepDetailQueryByDate = qcSleepDetailDao.queryByDate(y_m_d, UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear());
                    String deviceNameNoClear = UserConfig.INSTANCE.getInstance().getDeviceNameNoClear();
                    String deviceAddressNoClear = UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear();
                    String y_m_d2 = dateUtil.getY_M_D();
                    Intrinsics.checkNotNullExpressionValue(y_m_d2, "dataDate.y_M_D");
                    SleepDetail sleepDetail = ktxRunOnBgSingle.toSleepDetail(deviceNameNoClear, deviceAddressNoClear, y_m_d2, TypedValues.Custom.TYPE_INT, bleSleepDetailses);
                    if (DateUtil.isSameDay(dateUtil.toDate(), new Date())) {
                        if (sleepDetailQueryByDate != null) {
                            sleepDetail = ktxRunOnBgSingle.merge(sleepDetailQueryByDate, sleepDetail);
                        }
                        ktxRunOnBgSingle.sleepDetailDao.insert(sleepDetail);
                    } else {
                        ktxRunOnBgSingle.sleepDetailDao.insert(sleepDetail);
                    }
                    DateUtil dateUtil2 = new DateUtil(dateUtil.getUnixTimestamp(), true);
                    dateUtil2.addDay(-1);
                    String y_m_d3 = dateUtil2.getY_M_D();
                    Intrinsics.checkNotNullExpressionValue(y_m_d3, "yesDate.y_M_D");
                    SleepDetail sleepDetailQuerySleepByDate = ktxRunOnBgSingle.querySleepByDate(y_m_d3);
                    if (sleepDetailQuerySleepByDate == null) {
                        sleepDetailQuerySleepByDate = new SleepDetail(UserConfig.INSTANCE.getInstance().getDeviceAddressNoClear(), "", TypedValues.Custom.TYPE_INT, "", "", false, new DateUtil().getUnixTimestamp());
                    }
                    ktxRunOnBgSingle.calcSleepViewData(sleepDetail, sleepDetailQuerySleepByDate);
                }
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final SleepDetail toSleepDetail(String deviceName, String deviceAddress, String date, int interval, List<? extends BleSleepDetails> sleepDetailList) {
        SparseIntArray sparseIntArray = new SparseIntArray();
        if (sleepDetailList != null) {
            for (BleSleepDetails bleSleepDetails : sleepDetailList) {
                int[] sleepQualities = bleSleepDetails.getSleepQualities();
                sparseIntArray.put(bleSleepDetails.getTimeIndex(), (sleepQualities[1] * 100000) + (sleepQualities[2] * 1000) + sleepQualities[3]);
            }
        }
        int size = sparseIntArray.size();
        int[] iArr = new int[size];
        int size2 = sparseIntArray.size();
        for (int i = 0; i < size2; i++) {
            iArr[i] = sparseIntArray.keyAt(i);
        }
        Arrays.sort(iArr);
        String strIntArrayToString = StringUtilsKt.intArrayToString(iArr);
        int[] iArr2 = new int[sparseIntArray.size()];
        for (int i2 = 0; i2 < size; i2++) {
            iArr2[i2] = sparseIntArray.get(iArr[i2]);
        }
        return new SleepDetail(deviceAddress, date, interval, strIntArrayToString, StringUtilsKt.intArrayToString(iArr2), false, new DateUtil().getUnixTimestamp());
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final SleepDetail merge(SleepDetail oldEntity, SleepDetail newEntity) {
        int[] iArrStringToIntArray = StringUtilsKt.stringToIntArray(oldEntity.getIndex_str());
        int[] iArrStringToIntArray2 = StringUtilsKt.stringToIntArray(oldEntity.getQuality());
        int[] iArrStringToIntArray3 = StringUtilsKt.stringToIntArray(newEntity.getIndex_str());
        int[] iArrStringToIntArray4 = StringUtilsKt.stringToIntArray(newEntity.getQuality());
        SparseIntArray sparseIntArray = new SparseIntArray();
        int length = iArrStringToIntArray.length;
        for (int i = 0; i < length; i++) {
            sparseIntArray.put(iArrStringToIntArray[i], iArrStringToIntArray2[i]);
        }
        int length2 = iArrStringToIntArray3.length;
        for (int i2 = 0; i2 < length2; i2++) {
            sparseIntArray.put(iArrStringToIntArray3[i2], iArrStringToIntArray4[i2]);
        }
        int size = sparseIntArray.size();
        int[] iArr = new int[size];
        int size2 = sparseIntArray.size();
        for (int i3 = 0; i3 < size2; i3++) {
            iArr[i3] = sparseIntArray.keyAt(i3);
        }
        Arrays.sort(iArr);
        int[] iArr2 = new int[sparseIntArray.size()];
        for (int i4 = 0; i4 < size; i4++) {
            iArr2[i4] = sparseIntArray.get(iArr[i4]);
        }
        oldEntity.setIndex_str(StringUtilsKt.intArrayToString(iArr));
        oldEntity.setQuality(StringUtilsKt.intArrayToString(iArr2));
        return oldEntity;
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00040\u00030\u0002H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$2", f = "SleepDetailRepository.kt", i = {0, 0, 1}, l = {973, 973, 979}, m = "invokeSuspend", n = {"$this$flow", "notUpList", "$this$flow"}, s = {"L$0", "L$1", "L$0"})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$2, reason: invalid class name and case insensitive filesystem */
    static final class C03902 extends SuspendLambda implements Function2<FlowCollector<? super NetState<Integer>>, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        Object L$1;
        int label;

        C03902(Continuation<? super C03902> continuation) {
            super(2, continuation);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
            C03902 c03902 = SleepDetailRepository.this.new C03902(continuation);
            c03902.L$0 = obj;
            return c03902;
        }

        @Override // kotlin.jvm.functions.Function2
        public final Object invoke(FlowCollector<? super NetState<Integer>> flowCollector, Continuation<? super Unit> continuation) {
            return ((C03902) create(flowCollector, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:24:0x00fe A[RETURN] */
        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct code enable 'Show inconsistent code' option in preferences
        */
        public final java.lang.Object invokeSuspend(java.lang.Object r15) {
            /*
                Method dump skipped, instructions count: 281
                To view this dump change 'Code comments level' option to 'DEBUG'
            */
            throw new UnsupportedOperationException("Method not decompiled: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.C03902.invokeSuspend(java.lang.Object):java.lang.Object");
        }

        /* compiled from: SleepDetailRepository.kt */
        @Metadata(d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0003\u001a\u00020\u0004H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;", "it", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
        @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$2$1", f = "SleepDetailRepository.kt", i = {}, l = {974}, m = "invokeSuspend", n = {}, s = {})
        /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$2$1, reason: invalid class name */
        static final class AnonymousClass1 extends SuspendLambda implements Function3<CoroutineScope, Integer, Continuation<? super Unit>, Object> {
            final /* synthetic */ FlowCollector<NetState<Integer>> $$this$flow;
            final /* synthetic */ List<SleepDetail> $notUpList;
            int label;
            final /* synthetic */ SleepDetailRepository this$0;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            /* JADX WARN: Multi-variable type inference failed */
            AnonymousClass1(FlowCollector<? super NetState<Integer>> flowCollector, List<SleepDetail> list, SleepDetailRepository sleepDetailRepository, Continuation<? super AnonymousClass1> continuation) {
                super(3, continuation);
                this.$$this$flow = flowCollector;
                this.$notUpList = list;
                this.this$0 = sleepDetailRepository;
            }

            @Override // kotlin.jvm.functions.Function3
            public /* bridge */ /* synthetic */ Object invoke(CoroutineScope coroutineScope, Integer num, Continuation<? super Unit> continuation) {
                return invoke(coroutineScope, num.intValue(), continuation);
            }

            public final Object invoke(CoroutineScope coroutineScope, int i, Continuation<? super Unit> continuation) {
                return new AnonymousClass1(this.$$this$flow, this.$notUpList, this.this$0, continuation).invokeSuspend(Unit.INSTANCE);
            }

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int i = this.label;
                if (i == 0) {
                    ResultKt.throwOnFailure(obj);
                    this.label = 1;
                    if (this.$$this$flow.emit(new NetState<>(false, Boxing.boxInt(1), 0, false, 12, null), this) == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                } else {
                    if (i != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    ResultKt.throwOnFailure(obj);
                }
                for (SleepDetail sleepDetail : this.$notUpList) {
                    sleepDetail.setSync(true);
                    this.this$0.sleepDetailDao.insert(sleepDetail);
                }
                return Unit.INSTANCE;
            }
        }

        /* compiled from: SleepDetailRepository.kt */
        @Metadata(d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0003\u001a\u00020\u0004H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;", "errorCode", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
        @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$2$2", f = "SleepDetailRepository.kt", i = {}, l = {980}, m = "invokeSuspend", n = {}, s = {})
        /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$2$2, reason: invalid class name and collision with other inner class name */
        static final class C00632 extends SuspendLambda implements Function3<CoroutineScope, Integer, Continuation<? super Unit>, Object> {
            final /* synthetic */ FlowCollector<NetState<Integer>> $$this$flow;
            /* synthetic */ int I$0;
            int label;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            /* JADX WARN: Multi-variable type inference failed */
            C00632(FlowCollector<? super NetState<Integer>> flowCollector, Continuation<? super C00632> continuation) {
                super(3, continuation);
                this.$$this$flow = flowCollector;
            }

            @Override // kotlin.jvm.functions.Function3
            public /* bridge */ /* synthetic */ Object invoke(CoroutineScope coroutineScope, Integer num, Continuation<? super Unit> continuation) {
                return invoke(coroutineScope, num.intValue(), continuation);
            }

            public final Object invoke(CoroutineScope coroutineScope, int i, Continuation<? super Unit> continuation) {
                C00632 c00632 = new C00632(this.$$this$flow, continuation);
                c00632.I$0 = i;
                return c00632.invokeSuspend(Unit.INSTANCE);
            }

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int i = this.label;
                if (i == 0) {
                    ResultKt.throwOnFailure(obj);
                    int i2 = this.I$0;
                    this.label = 1;
                    if (this.$$this$flow.emit(new NetState<>(false, null, i2, true, 3, null), this) == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                } else {
                    if (i != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    ResultKt.throwOnFailure(obj);
                }
                return Unit.INSTANCE;
            }
        }
    }

    public final Object updateSleepDetailToServer(Continuation<? super Flow<NetState<Integer>>> continuation) {
        return FlowKt.m2566catch(FlowKt.flowOn(FlowKt.onStart(FlowKt.flow(new C03902(null)), new C03913(null)), Dispatchers.getIO()), new C03924(null));
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00040\u00030\u0002H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$3", f = "SleepDetailRepository.kt", i = {}, l = {984}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$3, reason: invalid class name and case insensitive filesystem */
    static final class C03913 extends SuspendLambda implements Function2<FlowCollector<? super NetState<Integer>>, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        int label;

        C03913(Continuation<? super C03913> continuation) {
            super(2, continuation);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
            C03913 c03913 = new C03913(continuation);
            c03913.L$0 = obj;
            return c03913;
        }

        @Override // kotlin.jvm.functions.Function2
        public final Object invoke(FlowCollector<? super NetState<Integer>> flowCollector, Continuation<? super Unit> continuation) {
            return ((C03913) create(flowCollector, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                this.label = 1;
                if (((FlowCollector) this.L$0).emit(new NetState(true, null, RetCodeValue.ErrorCode_2, false, 10, null), this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0018\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0010\u0003\u0010\u0000\u001a\u00020\u0001*\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00040\u00030\u00022\u0006\u0010\u0005\u001a\u00020\u0006H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", "", "e", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$4", f = "SleepDetailRepository.kt", i = {}, l = {987}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServer$4, reason: invalid class name and case insensitive filesystem */
    static final class C03924 extends SuspendLambda implements Function3<FlowCollector<? super NetState<Integer>>, Throwable, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        /* synthetic */ Object L$1;
        int label;

        C03924(Continuation<? super C03924> continuation) {
            super(3, continuation);
        }

        @Override // kotlin.jvm.functions.Function3
        public final Object invoke(FlowCollector<? super NetState<Integer>> flowCollector, Throwable th, Continuation<? super Unit> continuation) {
            C03924 c03924 = new C03924(continuation);
            c03924.L$0 = flowCollector;
            c03924.L$1 = th;
            return c03924.invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                FlowCollector flowCollector = (FlowCollector) this.L$0;
                ((Throwable) this.L$1).printStackTrace();
                this.L$0 = null;
                this.label = 1;
                if (flowCollector.emit(new NetState(false, null, RetCodeValue.ErrorCode_0, true, 3, null), this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00040\u00030\u0002H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$2", f = "SleepDetailRepository.kt", i = {0, 0, 1}, l = {1010, 1010, PointerIconCompat.TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW}, m = "invokeSuspend", n = {"$this$flow", "notUpList", "$this$flow"}, s = {"L$0", "L$1", "L$0"})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$2, reason: invalid class name and case insensitive filesystem */
    static final class C03932 extends SuspendLambda implements Function2<FlowCollector<? super NetState<Integer>>, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        Object L$1;
        int label;

        C03932(Continuation<? super C03932> continuation) {
            super(2, continuation);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
            C03932 c03932 = SleepDetailRepository.this.new C03932(continuation);
            c03932.L$0 = obj;
            return c03932;
        }

        @Override // kotlin.jvm.functions.Function2
        public final Object invoke(FlowCollector<? super NetState<Integer>> flowCollector, Continuation<? super Unit> continuation) {
            return ((C03932) create(flowCollector, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:24:0x0115 A[RETURN] */
        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct code enable 'Show inconsistent code' option in preferences
        */
        public final java.lang.Object invokeSuspend(java.lang.Object r15) {
            /*
                Method dump skipped, instructions count: 304
                To view this dump change 'Code comments level' option to 'DEBUG'
            */
            throw new UnsupportedOperationException("Method not decompiled: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.C03932.invokeSuspend(java.lang.Object):java.lang.Object");
        }

        /* compiled from: SleepDetailRepository.kt */
        @Metadata(d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0003\u001a\u00020\u0004H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;", "it", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
        @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$2$1", f = "SleepDetailRepository.kt", i = {}, l = {1011}, m = "invokeSuspend", n = {}, s = {})
        /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$2$1, reason: invalid class name */
        static final class AnonymousClass1 extends SuspendLambda implements Function3<CoroutineScope, Integer, Continuation<? super Unit>, Object> {
            final /* synthetic */ FlowCollector<NetState<Integer>> $$this$flow;
            final /* synthetic */ List<SleepNewProtocol> $notUpList;
            int label;
            final /* synthetic */ SleepDetailRepository this$0;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            /* JADX WARN: Multi-variable type inference failed */
            AnonymousClass1(FlowCollector<? super NetState<Integer>> flowCollector, List<SleepNewProtocol> list, SleepDetailRepository sleepDetailRepository, Continuation<? super AnonymousClass1> continuation) {
                super(3, continuation);
                this.$$this$flow = flowCollector;
                this.$notUpList = list;
                this.this$0 = sleepDetailRepository;
            }

            @Override // kotlin.jvm.functions.Function3
            public /* bridge */ /* synthetic */ Object invoke(CoroutineScope coroutineScope, Integer num, Continuation<? super Unit> continuation) {
                return invoke(coroutineScope, num.intValue(), continuation);
            }

            public final Object invoke(CoroutineScope coroutineScope, int i, Continuation<? super Unit> continuation) {
                return new AnonymousClass1(this.$$this$flow, this.$notUpList, this.this$0, continuation).invokeSuspend(Unit.INSTANCE);
            }

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int i = this.label;
                if (i == 0) {
                    ResultKt.throwOnFailure(obj);
                    this.label = 1;
                    if (this.$$this$flow.emit(new NetState<>(false, Boxing.boxInt(1), 0, false, 12, null), this) == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                } else {
                    if (i != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    ResultKt.throwOnFailure(obj);
                }
                for (SleepNewProtocol sleepNewProtocol : this.$notUpList) {
                    sleepNewProtocol.setSync(true);
                    this.this$0.sleepNewDao.insert(sleepNewProtocol);
                }
                return Unit.INSTANCE;
            }
        }

        /* compiled from: SleepDetailRepository.kt */
        @Metadata(d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0003\u001a\u00020\u0004H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;", "errorCode", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
        @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$2$2", f = "SleepDetailRepository.kt", i = {}, l = {PointerIconCompat.TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW}, m = "invokeSuspend", n = {}, s = {})
        /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$2$2, reason: invalid class name and collision with other inner class name */
        static final class C00642 extends SuspendLambda implements Function3<CoroutineScope, Integer, Continuation<? super Unit>, Object> {
            final /* synthetic */ FlowCollector<NetState<Integer>> $$this$flow;
            /* synthetic */ int I$0;
            int label;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            /* JADX WARN: Multi-variable type inference failed */
            C00642(FlowCollector<? super NetState<Integer>> flowCollector, Continuation<? super C00642> continuation) {
                super(3, continuation);
                this.$$this$flow = flowCollector;
            }

            @Override // kotlin.jvm.functions.Function3
            public /* bridge */ /* synthetic */ Object invoke(CoroutineScope coroutineScope, Integer num, Continuation<? super Unit> continuation) {
                return invoke(coroutineScope, num.intValue(), continuation);
            }

            public final Object invoke(CoroutineScope coroutineScope, int i, Continuation<? super Unit> continuation) {
                C00642 c00642 = new C00642(this.$$this$flow, continuation);
                c00642.I$0 = i;
                return c00642.invokeSuspend(Unit.INSTANCE);
            }

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int i = this.label;
                if (i == 0) {
                    ResultKt.throwOnFailure(obj);
                    int i2 = this.I$0;
                    this.label = 1;
                    if (this.$$this$flow.emit(new NetState<>(false, null, i2, true, 3, null), this) == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                } else {
                    if (i != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    ResultKt.throwOnFailure(obj);
                }
                return Unit.INSTANCE;
            }
        }
    }

    public final Object updateSleepDetailToServerNewProtocol(Continuation<? super Flow<NetState<Integer>>> continuation) {
        return FlowKt.m2566catch(FlowKt.flowOn(FlowKt.onStart(FlowKt.flow(new C03932(null)), new C03943(null)), Dispatchers.getIO()), new C03954(null));
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0012\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00040\u00030\u0002H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$3", f = "SleepDetailRepository.kt", i = {}, l = {PointerIconCompat.TYPE_GRABBING}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$3, reason: invalid class name and case insensitive filesystem */
    static final class C03943 extends SuspendLambda implements Function2<FlowCollector<? super NetState<Integer>>, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        int label;

        C03943(Continuation<? super C03943> continuation) {
            super(2, continuation);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
            C03943 c03943 = new C03943(continuation);
            c03943.L$0 = obj;
            return c03943;
        }

        @Override // kotlin.jvm.functions.Function2
        public final Object invoke(FlowCollector<? super NetState<Integer>> flowCollector, Continuation<? super Unit> continuation) {
            return ((C03943) create(flowCollector, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                this.label = 1;
                if (((FlowCollector) this.L$0).emit(new NetState(true, null, RetCodeValue.ErrorCode_2, false, 10, null), this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0018\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010\b\n\u0000\n\u0002\u0010\u0003\u0010\u0000\u001a\u00020\u0001*\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00040\u00030\u00022\u0006\u0010\u0005\u001a\u00020\u0006H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", "", "e", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$4", f = "SleepDetailRepository.kt", i = {}, l = {1024}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$updateSleepDetailToServerNewProtocol$4, reason: invalid class name and case insensitive filesystem */
    static final class C03954 extends SuspendLambda implements Function3<FlowCollector<? super NetState<Integer>>, Throwable, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        /* synthetic */ Object L$1;
        int label;

        C03954(Continuation<? super C03954> continuation) {
            super(3, continuation);
        }

        @Override // kotlin.jvm.functions.Function3
        public final Object invoke(FlowCollector<? super NetState<Integer>> flowCollector, Throwable th, Continuation<? super Unit> continuation) {
            C03954 c03954 = new C03954(continuation);
            c03954.L$0 = flowCollector;
            c03954.L$1 = th;
            return c03954.invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                FlowCollector flowCollector = (FlowCollector) this.L$0;
                ((Throwable) this.L$1).printStackTrace();
                this.L$0 = null;
                this.label = 1;
                if (flowCollector.emit(new NetState(false, null, RetCodeValue.ErrorCode_0, true, 3, null), this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0016\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\u0010\u0000\u001a\u00020\u0001*\u0014\u0012\u0010\u0012\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050\u00040\u00030\u0002H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", "", "Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailResp;"}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2", f = "SleepDetailRepository.kt", i = {0, 1}, l = {1030, 1030, 1032}, m = "invokeSuspend", n = {"$this$flow", "$this$flow"}, s = {"L$0", "L$0"})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2, reason: invalid class name */
    static final class AnonymousClass2 extends SuspendLambda implements Function2<FlowCollector<? super NetState<List<? extends SleepDetailResp>>>, Continuation<? super Unit>, Object> {
        final /* synthetic */ long $lastSyncId;
        final /* synthetic */ long $uid;
        private /* synthetic */ Object L$0;
        int label;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        AnonymousClass2(long j, long j2, Continuation<? super AnonymousClass2> continuation) {
            super(2, continuation);
            this.$uid = j;
            this.$lastSyncId = j2;
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
            AnonymousClass2 anonymousClass2 = new AnonymousClass2(this.$uid, this.$lastSyncId, continuation);
            anonymousClass2.L$0 = obj;
            return anonymousClass2;
        }

        @Override // kotlin.jvm.functions.Function2
        public /* bridge */ /* synthetic */ Object invoke(FlowCollector<? super NetState<List<? extends SleepDetailResp>>> flowCollector, Continuation<? super Unit> continuation) {
            return invoke2((FlowCollector<? super NetState<List<SleepDetailResp>>>) flowCollector, continuation);
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Object invoke2(FlowCollector<? super NetState<List<SleepDetailResp>>> flowCollector, Continuation<? super Unit> continuation) {
            return ((AnonymousClass2) create(flowCollector, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:21:0x0086 A[RETURN] */
        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct code enable 'Show inconsistent code' option in preferences
        */
        public final java.lang.Object invokeSuspend(java.lang.Object r14) {
            /*
                r13 = this;
                java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()
                int r1 = r13.label
                r2 = 3
                r3 = 2
                r4 = 1
                r5 = 0
                if (r1 == 0) goto L2f
                if (r1 == r4) goto L27
                if (r1 == r3) goto L1f
                if (r1 != r2) goto L17
                kotlin.ResultKt.throwOnFailure(r14)
                goto L87
            L17:
                java.lang.IllegalStateException r14 = new java.lang.IllegalStateException
                java.lang.String r0 = "call to 'resume' before 'invoke' with coroutine"
                r14.<init>(r0)
                throw r14
            L1f:
                java.lang.Object r1 = r13.L$0
                kotlinx.coroutines.flow.FlowCollector r1 = (kotlinx.coroutines.flow.FlowCollector) r1
                kotlin.ResultKt.throwOnFailure(r14)
                goto L70
            L27:
                java.lang.Object r1 = r13.L$0
                kotlinx.coroutines.flow.FlowCollector r1 = (kotlinx.coroutines.flow.FlowCollector) r1
                kotlin.ResultKt.throwOnFailure(r14)
                goto L59
            L2f:
                kotlin.ResultKt.throwOnFailure(r14)
                java.lang.Object r14 = r13.L$0
                kotlinx.coroutines.flow.FlowCollector r14 = (kotlinx.coroutines.flow.FlowCollector) r14
                com.qcwireless.qcwatch.ui.base.bean.request.healthy.HealthyDataDownRequest r1 = new com.qcwireless.qcwatch.ui.base.bean.request.healthy.HealthyDataDownRequest
                long r7 = r13.$uid
                long r9 = r13.$lastSyncId
                r11 = 30
                r6 = r1
                r6.<init>(r7, r9, r11)
                com.qcwireless.qcwatch.ui.base.api.QcRetrofitClient r6 = com.qcwireless.qcwatch.ui.base.api.QcRetrofitClient.INSTANCE
                com.qcwireless.qcwatch.ui.base.api.QcService r6 = r6.service()
                r7 = r13
                kotlin.coroutines.Continuation r7 = (kotlin.coroutines.Continuation) r7
                r13.L$0 = r14
                r13.label = r4
                java.lang.Object r1 = r6.downSleepDetail(r1, r7)
                if (r1 != r0) goto L56
                return r0
            L56:
                r12 = r1
                r1 = r14
                r14 = r12
            L59:
                com.qcwireless.qcwatch.ui.base.api.QcResponse r14 = (com.qcwireless.qcwatch.ui.base.api.QcResponse) r14
                com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2$1 r4 = new com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2$1
                r4.<init>(r1, r5)
                kotlin.jvm.functions.Function3 r4 = (kotlin.jvm.functions.Function3) r4
                r6 = r13
                kotlin.coroutines.Continuation r6 = (kotlin.coroutines.Continuation) r6
                r13.L$0 = r1
                r13.label = r3
                java.lang.Object r14 = com.qcwireless.qcwatch.ui.base.api.QcResponseKt.success(r14, r4, r6)
                if (r14 != r0) goto L70
                return r0
            L70:
                com.qcwireless.qcwatch.ui.base.api.QcResponse r14 = (com.qcwireless.qcwatch.ui.base.api.QcResponse) r14
                com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2$2 r3 = new com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2$2
                r3.<init>(r1, r5)
                kotlin.jvm.functions.Function3 r3 = (kotlin.jvm.functions.Function3) r3
                r1 = r13
                kotlin.coroutines.Continuation r1 = (kotlin.coroutines.Continuation) r1
                r13.L$0 = r5
                r13.label = r2
                java.lang.Object r14 = com.qcwireless.qcwatch.ui.base.api.QcResponseKt.error(r14, r3, r1)
                if (r14 != r0) goto L87
                return r0
            L87:
                kotlin.Unit r14 = kotlin.Unit.INSTANCE
                return r14
            */
            throw new UnsupportedOperationException("Method not decompiled: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.AnonymousClass2.invokeSuspend(java.lang.Object):java.lang.Object");
        }

        /* compiled from: SleepDetailRepository.kt */
        @Metadata(d1 = {"\u0000\u0014\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\f\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u0004H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;", "resp", "", "Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailResp;"}, k = 3, mv = {1, 6, 0}, xi = 48)
        @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2$1", f = "SleepDetailRepository.kt", i = {}, l = {1031}, m = "invokeSuspend", n = {}, s = {})
        /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2$1, reason: invalid class name */
        static final class AnonymousClass1 extends SuspendLambda implements Function3<CoroutineScope, List<? extends SleepDetailResp>, Continuation<? super Unit>, Object> {
            final /* synthetic */ FlowCollector<NetState<List<SleepDetailResp>>> $$this$flow;
            /* synthetic */ Object L$0;
            int label;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            /* JADX WARN: Multi-variable type inference failed */
            AnonymousClass1(FlowCollector<? super NetState<List<SleepDetailResp>>> flowCollector, Continuation<? super AnonymousClass1> continuation) {
                super(3, continuation);
                this.$$this$flow = flowCollector;
            }

            @Override // kotlin.jvm.functions.Function3
            public /* bridge */ /* synthetic */ Object invoke(CoroutineScope coroutineScope, List<? extends SleepDetailResp> list, Continuation<? super Unit> continuation) {
                return invoke2(coroutineScope, (List<SleepDetailResp>) list, continuation);
            }

            /* renamed from: invoke, reason: avoid collision after fix types in other method */
            public final Object invoke2(CoroutineScope coroutineScope, List<SleepDetailResp> list, Continuation<? super Unit> continuation) {
                AnonymousClass1 anonymousClass1 = new AnonymousClass1(this.$$this$flow, continuation);
                anonymousClass1.L$0 = list;
                return anonymousClass1.invokeSuspend(Unit.INSTANCE);
            }

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int i = this.label;
                if (i == 0) {
                    ResultKt.throwOnFailure(obj);
                    List list = (List) this.L$0;
                    this.label = 1;
                    if (this.$$this$flow.emit(new NetState<>(false, list, 0, false, 12, null), this) == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                } else {
                    if (i != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    ResultKt.throwOnFailure(obj);
                }
                return Unit.INSTANCE;
            }
        }

        /* compiled from: SleepDetailRepository.kt */
        @Metadata(d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0003\u001a\u00020\u0004H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;", "errorCode", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
        @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2$2", f = "SleepDetailRepository.kt", i = {}, l = {1033}, m = "invokeSuspend", n = {}, s = {})
        /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$2$2, reason: invalid class name and collision with other inner class name */
        static final class C00602 extends SuspendLambda implements Function3<CoroutineScope, Integer, Continuation<? super Unit>, Object> {
            final /* synthetic */ FlowCollector<NetState<List<SleepDetailResp>>> $$this$flow;
            /* synthetic */ int I$0;
            int label;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            /* JADX WARN: Multi-variable type inference failed */
            C00602(FlowCollector<? super NetState<List<SleepDetailResp>>> flowCollector, Continuation<? super C00602> continuation) {
                super(3, continuation);
                this.$$this$flow = flowCollector;
            }

            @Override // kotlin.jvm.functions.Function3
            public /* bridge */ /* synthetic */ Object invoke(CoroutineScope coroutineScope, Integer num, Continuation<? super Unit> continuation) {
                return invoke(coroutineScope, num.intValue(), continuation);
            }

            public final Object invoke(CoroutineScope coroutineScope, int i, Continuation<? super Unit> continuation) {
                C00602 c00602 = new C00602(this.$$this$flow, continuation);
                c00602.I$0 = i;
                return c00602.invokeSuspend(Unit.INSTANCE);
            }

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int i = this.label;
                if (i == 0) {
                    ResultKt.throwOnFailure(obj);
                    int i2 = this.I$0;
                    this.label = 1;
                    if (this.$$this$flow.emit(new NetState<>(false, null, i2, true, 3, null), this) == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                } else {
                    if (i != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    ResultKt.throwOnFailure(obj);
                }
                return Unit.INSTANCE;
            }
        }
    }

    public final Object downSleepDetailFromServer(long j, long j2, Continuation<? super Unit> continuation) {
        Object objCollect = FlowKt.m2566catch(FlowKt.flowOn(FlowKt.onStart(FlowKt.flow(new AnonymousClass2(j, j2, null)), new AnonymousClass3(null)), Dispatchers.getIO()), new AnonymousClass4(null)).collect(new FlowCollector() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.downSleepDetailFromServer.5
            @Override // kotlinx.coroutines.flow.FlowCollector
            public /* bridge */ /* synthetic */ Object emit(Object obj, Continuation continuation2) {
                return emit((NetState<List<SleepDetailResp>>) obj, (Continuation<? super Unit>) continuation2);
            }

            public final Object emit(NetState<List<SleepDetailResp>> netState, Continuation<? super Unit> continuation2) {
                List<SleepDetailResp> listIsSuccess;
                if (netState.getRetCode() == 0 && (listIsSuccess = netState.isSuccess()) != null) {
                    try {
                        for (SleepDetailResp sleepDetailResp : listIsSuccess) {
                            String deviceId = sleepDetailResp.getDeviceId();
                            Intrinsics.checkNotNull(deviceId);
                            String date = sleepDetailResp.getDate();
                            Intrinsics.checkNotNull(date);
                            SleepDetailRepository.this.sleepDetailDao.insert(new SleepDetail(deviceId, date, sleepDetailResp.getIntervar(), StringUtilsKt.intListToString(sleepDetailResp.getIndexs()), StringUtilsKt.intListToString(sleepDetailResp.getQualitys()), true, new DateUtil().getUnixTimestamp()));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                return Unit.INSTANCE;
            }
        }, continuation);
        return objCollect == IntrinsicsKt.getCOROUTINE_SUSPENDED() ? objCollect : Unit.INSTANCE;
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0016\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\u0010\u0000\u001a\u00020\u0001*\u0014\u0012\u0010\u0012\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050\u00040\u00030\u0002H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", "", "Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailResp;"}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$3", f = "SleepDetailRepository.kt", i = {}, l = {1036}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$3, reason: invalid class name */
    static final class AnonymousClass3 extends SuspendLambda implements Function2<FlowCollector<? super NetState<List<? extends SleepDetailResp>>>, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        int label;

        AnonymousClass3(Continuation<? super AnonymousClass3> continuation) {
            super(2, continuation);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
            AnonymousClass3 anonymousClass3 = new AnonymousClass3(continuation);
            anonymousClass3.L$0 = obj;
            return anonymousClass3;
        }

        @Override // kotlin.jvm.functions.Function2
        public /* bridge */ /* synthetic */ Object invoke(FlowCollector<? super NetState<List<? extends SleepDetailResp>>> flowCollector, Continuation<? super Unit> continuation) {
            return invoke2((FlowCollector<? super NetState<List<SleepDetailResp>>>) flowCollector, continuation);
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Object invoke2(FlowCollector<? super NetState<List<SleepDetailResp>>> flowCollector, Continuation<? super Unit> continuation) {
            return ((AnonymousClass3) create(flowCollector, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                this.label = 1;
                if (((FlowCollector) this.L$0).emit(new NetState(true, null, RetCodeValue.ErrorCode_2, false, 10, null), this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u001c\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0003\u0010\u0000\u001a\u00020\u0001*\u0014\u0012\u0010\u0012\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050\u00040\u00030\u00022\u0006\u0010\u0006\u001a\u00020\u0007H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", "", "Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailResp;", "e", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$4", f = "SleepDetailRepository.kt", i = {}, l = {1039}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailFromServer$4, reason: invalid class name */
    static final class AnonymousClass4 extends SuspendLambda implements Function3<FlowCollector<? super NetState<List<? extends SleepDetailResp>>>, Throwable, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        /* synthetic */ Object L$1;
        int label;

        AnonymousClass4(Continuation<? super AnonymousClass4> continuation) {
            super(3, continuation);
        }

        @Override // kotlin.jvm.functions.Function3
        public /* bridge */ /* synthetic */ Object invoke(FlowCollector<? super NetState<List<? extends SleepDetailResp>>> flowCollector, Throwable th, Continuation<? super Unit> continuation) {
            return invoke2((FlowCollector<? super NetState<List<SleepDetailResp>>>) flowCollector, th, continuation);
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Object invoke2(FlowCollector<? super NetState<List<SleepDetailResp>>> flowCollector, Throwable th, Continuation<? super Unit> continuation) {
            AnonymousClass4 anonymousClass4 = new AnonymousClass4(continuation);
            anonymousClass4.L$0 = flowCollector;
            anonymousClass4.L$1 = th;
            return anonymousClass4.invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                FlowCollector flowCollector = (FlowCollector) this.L$0;
                ((Throwable) this.L$1).printStackTrace();
                this.L$0 = null;
                this.label = 1;
                if (flowCollector.emit(new NetState(false, null, RetCodeValue.ErrorCode_0, true, 3, null), this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0016\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\u0010\u0000\u001a\u00020\u0001*\u0014\u0012\u0010\u0012\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050\u00040\u00030\u0002H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", "", "Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailNewProtocolResp;"}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2", f = "SleepDetailRepository.kt", i = {0, 1}, l = {1066, 1066, 1068}, m = "invokeSuspend", n = {"$this$flow", "$this$flow"}, s = {"L$0", "L$0"})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2, reason: invalid class name and case insensitive filesystem */
    static final class C03812 extends SuspendLambda implements Function2<FlowCollector<? super NetState<List<? extends SleepDetailNewProtocolResp>>>, Continuation<? super Unit>, Object> {
        final /* synthetic */ long $lastSyncId;
        final /* synthetic */ long $uid;
        private /* synthetic */ Object L$0;
        int label;

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        C03812(long j, long j2, Continuation<? super C03812> continuation) {
            super(2, continuation);
            this.$uid = j;
            this.$lastSyncId = j2;
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
            C03812 c03812 = new C03812(this.$uid, this.$lastSyncId, continuation);
            c03812.L$0 = obj;
            return c03812;
        }

        @Override // kotlin.jvm.functions.Function2
        public /* bridge */ /* synthetic */ Object invoke(FlowCollector<? super NetState<List<? extends SleepDetailNewProtocolResp>>> flowCollector, Continuation<? super Unit> continuation) {
            return invoke2((FlowCollector<? super NetState<List<SleepDetailNewProtocolResp>>>) flowCollector, continuation);
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Object invoke2(FlowCollector<? super NetState<List<SleepDetailNewProtocolResp>>> flowCollector, Continuation<? super Unit> continuation) {
            return ((C03812) create(flowCollector, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        /* JADX WARN: Removed duplicated region for block: B:21:0x0086 A[RETURN] */
        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        /*
            Code decompiled incorrectly, please refer to instructions dump.
            To view partially-correct code enable 'Show inconsistent code' option in preferences
        */
        public final java.lang.Object invokeSuspend(java.lang.Object r14) {
            /*
                r13 = this;
                java.lang.Object r0 = kotlin.coroutines.intrinsics.IntrinsicsKt.getCOROUTINE_SUSPENDED()
                int r1 = r13.label
                r2 = 3
                r3 = 2
                r4 = 1
                r5 = 0
                if (r1 == 0) goto L2f
                if (r1 == r4) goto L27
                if (r1 == r3) goto L1f
                if (r1 != r2) goto L17
                kotlin.ResultKt.throwOnFailure(r14)
                goto L87
            L17:
                java.lang.IllegalStateException r14 = new java.lang.IllegalStateException
                java.lang.String r0 = "call to 'resume' before 'invoke' with coroutine"
                r14.<init>(r0)
                throw r14
            L1f:
                java.lang.Object r1 = r13.L$0
                kotlinx.coroutines.flow.FlowCollector r1 = (kotlinx.coroutines.flow.FlowCollector) r1
                kotlin.ResultKt.throwOnFailure(r14)
                goto L70
            L27:
                java.lang.Object r1 = r13.L$0
                kotlinx.coroutines.flow.FlowCollector r1 = (kotlinx.coroutines.flow.FlowCollector) r1
                kotlin.ResultKt.throwOnFailure(r14)
                goto L59
            L2f:
                kotlin.ResultKt.throwOnFailure(r14)
                java.lang.Object r14 = r13.L$0
                kotlinx.coroutines.flow.FlowCollector r14 = (kotlinx.coroutines.flow.FlowCollector) r14
                com.qcwireless.qcwatch.ui.base.bean.request.healthy.HealthyDataDownRequest r1 = new com.qcwireless.qcwatch.ui.base.bean.request.healthy.HealthyDataDownRequest
                long r7 = r13.$uid
                long r9 = r13.$lastSyncId
                r11 = 30
                r6 = r1
                r6.<init>(r7, r9, r11)
                com.qcwireless.qcwatch.ui.base.api.QcRetrofitClient r6 = com.qcwireless.qcwatch.ui.base.api.QcRetrofitClient.INSTANCE
                com.qcwireless.qcwatch.ui.base.api.QcService r6 = r6.service()
                r7 = r13
                kotlin.coroutines.Continuation r7 = (kotlin.coroutines.Continuation) r7
                r13.L$0 = r14
                r13.label = r4
                java.lang.Object r1 = r6.downSleepDetailV1(r1, r7)
                if (r1 != r0) goto L56
                return r0
            L56:
                r12 = r1
                r1 = r14
                r14 = r12
            L59:
                com.qcwireless.qcwatch.ui.base.api.QcResponse r14 = (com.qcwireless.qcwatch.ui.base.api.QcResponse) r14
                com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2$1 r4 = new com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2$1
                r4.<init>(r1, r5)
                kotlin.jvm.functions.Function3 r4 = (kotlin.jvm.functions.Function3) r4
                r6 = r13
                kotlin.coroutines.Continuation r6 = (kotlin.coroutines.Continuation) r6
                r13.L$0 = r1
                r13.label = r3
                java.lang.Object r14 = com.qcwireless.qcwatch.ui.base.api.QcResponseKt.success(r14, r4, r6)
                if (r14 != r0) goto L70
                return r0
            L70:
                com.qcwireless.qcwatch.ui.base.api.QcResponse r14 = (com.qcwireless.qcwatch.ui.base.api.QcResponse) r14
                com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2$2 r3 = new com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2$2
                r3.<init>(r1, r5)
                kotlin.jvm.functions.Function3 r3 = (kotlin.jvm.functions.Function3) r3
                r1 = r13
                kotlin.coroutines.Continuation r1 = (kotlin.coroutines.Continuation) r1
                r13.L$0 = r5
                r13.label = r2
                java.lang.Object r14 = com.qcwireless.qcwatch.ui.base.api.QcResponseKt.error(r14, r3, r1)
                if (r14 != r0) goto L87
                return r0
            L87:
                kotlin.Unit r14 = kotlin.Unit.INSTANCE
                return r14
            */
            throw new UnsupportedOperationException("Method not decompiled: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.C03812.invokeSuspend(java.lang.Object):java.lang.Object");
        }

        /* compiled from: SleepDetailRepository.kt */
        @Metadata(d1 = {"\u0000\u0014\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\f\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u0004H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;", "resp", "", "Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailNewProtocolResp;"}, k = 3, mv = {1, 6, 0}, xi = 48)
        @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2$1", f = "SleepDetailRepository.kt", i = {}, l = {1067}, m = "invokeSuspend", n = {}, s = {})
        /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2$1, reason: invalid class name */
        static final class AnonymousClass1 extends SuspendLambda implements Function3<CoroutineScope, List<? extends SleepDetailNewProtocolResp>, Continuation<? super Unit>, Object> {
            final /* synthetic */ FlowCollector<NetState<List<? extends SleepDetailNewProtocolResp>>> $$this$flow;
            /* synthetic */ Object L$0;
            int label;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            /* JADX WARN: Multi-variable type inference failed */
            AnonymousClass1(FlowCollector<? super NetState<List<SleepDetailNewProtocolResp>>> flowCollector, Continuation<? super AnonymousClass1> continuation) {
                super(3, continuation);
                this.$$this$flow = flowCollector;
            }

            @Override // kotlin.jvm.functions.Function3
            public final Object invoke(CoroutineScope coroutineScope, List<? extends SleepDetailNewProtocolResp> list, Continuation<? super Unit> continuation) {
                AnonymousClass1 anonymousClass1 = new AnonymousClass1(this.$$this$flow, continuation);
                anonymousClass1.L$0 = list;
                return anonymousClass1.invokeSuspend(Unit.INSTANCE);
            }

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int i = this.label;
                if (i == 0) {
                    ResultKt.throwOnFailure(obj);
                    List list = (List) this.L$0;
                    this.label = 1;
                    if (this.$$this$flow.emit(new NetState<>(false, list, 0, false, 12, null), this) == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                } else {
                    if (i != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    ResultKt.throwOnFailure(obj);
                }
                return Unit.INSTANCE;
            }
        }

        /* compiled from: SleepDetailRepository.kt */
        @Metadata(d1 = {"\u0000\u0010\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\u0010\u0000\u001a\u00020\u0001*\u00020\u00022\u0006\u0010\u0003\u001a\u00020\u0004H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;", "errorCode", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
        @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2$2", f = "SleepDetailRepository.kt", i = {}, l = {1069}, m = "invokeSuspend", n = {}, s = {})
        /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$2$2, reason: invalid class name and collision with other inner class name */
        static final class C00612 extends SuspendLambda implements Function3<CoroutineScope, Integer, Continuation<? super Unit>, Object> {
            final /* synthetic */ FlowCollector<NetState<List<? extends SleepDetailNewProtocolResp>>> $$this$flow;
            /* synthetic */ int I$0;
            int label;

            /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
            /* JADX WARN: Multi-variable type inference failed */
            C00612(FlowCollector<? super NetState<List<SleepDetailNewProtocolResp>>> flowCollector, Continuation<? super C00612> continuation) {
                super(3, continuation);
                this.$$this$flow = flowCollector;
            }

            @Override // kotlin.jvm.functions.Function3
            public /* bridge */ /* synthetic */ Object invoke(CoroutineScope coroutineScope, Integer num, Continuation<? super Unit> continuation) {
                return invoke(coroutineScope, num.intValue(), continuation);
            }

            public final Object invoke(CoroutineScope coroutineScope, int i, Continuation<? super Unit> continuation) {
                C00612 c00612 = new C00612(this.$$this$flow, continuation);
                c00612.I$0 = i;
                return c00612.invokeSuspend(Unit.INSTANCE);
            }

            @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
            public final Object invokeSuspend(Object obj) {
                Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
                int i = this.label;
                if (i == 0) {
                    ResultKt.throwOnFailure(obj);
                    int i2 = this.I$0;
                    this.label = 1;
                    if (this.$$this$flow.emit(new NetState<>(false, null, i2, true, 3, null), this) == coroutine_suspended) {
                        return coroutine_suspended;
                    }
                } else {
                    if (i != 1) {
                        throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                    }
                    ResultKt.throwOnFailure(obj);
                }
                return Unit.INSTANCE;
            }
        }
    }

    public final Object downSleepDetailNewProtocolFromServer(long j, long j2, Continuation<? super Unit> continuation) {
        Object objCollect = FlowKt.m2566catch(FlowKt.flowOn(FlowKt.onStart(FlowKt.flow(new C03812(j, j2, null)), new C03823(null)), Dispatchers.getIO()), new C03834(null)).collect(new FlowCollector() { // from class: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository.downSleepDetailNewProtocolFromServer.5
            @Override // kotlinx.coroutines.flow.FlowCollector
            public /* bridge */ /* synthetic */ Object emit(Object obj, Continuation continuation2) {
                return emit((NetState<List<SleepDetailNewProtocolResp>>) obj, (Continuation<? super Unit>) continuation2);
            }

            public final Object emit(NetState<List<SleepDetailNewProtocolResp>> netState, Continuation<? super Unit> continuation2) {
                List<SleepDetailNewProtocolResp> listIsSuccess;
                if (netState.getRetCode() == 0 && (listIsSuccess = netState.isSuccess()) != null) {
                    try {
                        for (SleepDetailNewProtocolResp sleepDetailNewProtocolResp : listIsSuccess) {
                            String str = sleepDetailNewProtocolResp.deviceAddress;
                            Intrinsics.checkNotNull(str);
                            String str2 = sleepDetailNewProtocolResp.date;
                            Intrinsics.checkNotNull(str2);
                            List<SleepDetailNewProtocolResp.SleepDetail> list = sleepDetailNewProtocolResp.datas;
                            Intrinsics.checkNotNull(list);
                            SleepDetailRepository.this.sleepNewDao.insert(new SleepNewProtocol(str, str2, MoshiUtilsKt.toJson(list), sleepDetailNewProtocolResp.st, sleepDetailNewProtocolResp.et, true, new DateUtil().getUnixTimestamp()));
                            SleepDetailRepository.this.saveDownloadSleepToTotal(sleepDetailNewProtocolResp);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                return Unit.INSTANCE;
            }
        }, continuation);
        return objCollect == IntrinsicsKt.getCOROUTINE_SUSPENDED() ? objCollect : Unit.INSTANCE;
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0016\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\u0010\u0000\u001a\u00020\u0001*\u0014\u0012\u0010\u0012\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050\u00040\u00030\u0002H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", "", "Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailNewProtocolResp;"}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$3", f = "SleepDetailRepository.kt", i = {}, l = {1077}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$3, reason: invalid class name and case insensitive filesystem */
    static final class C03823 extends SuspendLambda implements Function2<FlowCollector<? super NetState<List<? extends SleepDetailNewProtocolResp>>>, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        int label;

        C03823(Continuation<? super C03823> continuation) {
            super(2, continuation);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
            C03823 c03823 = new C03823(continuation);
            c03823.L$0 = obj;
            return c03823;
        }

        @Override // kotlin.jvm.functions.Function2
        public /* bridge */ /* synthetic */ Object invoke(FlowCollector<? super NetState<List<? extends SleepDetailNewProtocolResp>>> flowCollector, Continuation<? super Unit> continuation) {
            return invoke2((FlowCollector<? super NetState<List<SleepDetailNewProtocolResp>>>) flowCollector, continuation);
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Object invoke2(FlowCollector<? super NetState<List<SleepDetailNewProtocolResp>>> flowCollector, Continuation<? super Unit> continuation) {
            return ((C03823) create(flowCollector, continuation)).invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                this.label = 1;
                if (((FlowCollector) this.L$0).emit(new NetState(true, null, RetCodeValue.ErrorCode_2, false, 10, null), this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u001c\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0003\u0010\u0000\u001a\u00020\u0001*\u0014\u0012\u0010\u0012\u000e\u0012\n\u0012\b\u0012\u0004\u0012\u00020\u00050\u00040\u00030\u00022\u0006\u0010\u0006\u001a\u00020\u0007H\u008a@"}, d2 = {"<anonymous>", "", "Lkotlinx/coroutines/flow/FlowCollector;", "Lcom/qcwireless/qcwatch/ui/base/repository/mine/NetState;", "", "Lcom/qcwireless/qcwatch/ui/base/bean/response/healthy/SleepDetailNewProtocolResp;", "e", ""}, k = 3, mv = {1, 6, 0}, xi = 48)
    @DebugMetadata(c = "com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$4", f = "SleepDetailRepository.kt", i = {}, l = {1080}, m = "invokeSuspend", n = {}, s = {})
    /* renamed from: com.qcwireless.qcwatch.ui.base.repository.healthy.SleepDetailRepository$downSleepDetailNewProtocolFromServer$4, reason: invalid class name and case insensitive filesystem */
    static final class C03834 extends SuspendLambda implements Function3<FlowCollector<? super NetState<List<? extends SleepDetailNewProtocolResp>>>, Throwable, Continuation<? super Unit>, Object> {
        private /* synthetic */ Object L$0;
        /* synthetic */ Object L$1;
        int label;

        C03834(Continuation<? super C03834> continuation) {
            super(3, continuation);
        }

        @Override // kotlin.jvm.functions.Function3
        public /* bridge */ /* synthetic */ Object invoke(FlowCollector<? super NetState<List<? extends SleepDetailNewProtocolResp>>> flowCollector, Throwable th, Continuation<? super Unit> continuation) {
            return invoke2((FlowCollector<? super NetState<List<SleepDetailNewProtocolResp>>>) flowCollector, th, continuation);
        }

        /* renamed from: invoke, reason: avoid collision after fix types in other method */
        public final Object invoke2(FlowCollector<? super NetState<List<SleepDetailNewProtocolResp>>> flowCollector, Throwable th, Continuation<? super Unit> continuation) {
            C03834 c03834 = new C03834(continuation);
            c03834.L$0 = flowCollector;
            c03834.L$1 = th;
            return c03834.invokeSuspend(Unit.INSTANCE);
        }

        @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
        public final Object invokeSuspend(Object obj) {
            Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
            int i = this.label;
            if (i == 0) {
                ResultKt.throwOnFailure(obj);
                FlowCollector flowCollector = (FlowCollector) this.L$0;
                ((Throwable) this.L$1).printStackTrace();
                this.L$0 = null;
                this.label = 1;
                if (flowCollector.emit(new NetState(false, null, RetCodeValue.ErrorCode_0, true, 3, null), this) == coroutine_suspended) {
                    return coroutine_suspended;
                }
            } else {
                if (i != 1) {
                    throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
                }
                ResultKt.throwOnFailure(obj);
            }
            return Unit.INSTANCE;
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public final void saveDownloadSleepToTotal(SleepDetailNewProtocolResp sleepBean) {
        List<SleepDetailNewProtocolResp.SleepDetail> list = sleepBean.datas;
        Intrinsics.checkNotNullExpressionValue(list, "sleepBean.datas");
        int i = 0;
        int i2 = 0;
        int i3 = 0;
        int i4 = 0;
        for (SleepDetailNewProtocolResp.SleepDetail sleepDetail : list) {
            int i5 = sleepDetail.t;
            if (i5 == 2) {
                i2 += sleepDetail.d;
            } else if (i5 == 3) {
                i += sleepDetail.d;
            } else if (i5 == 4) {
                i4 += sleepDetail.d;
            } else if (i5 == 5) {
                i3 += sleepDetail.d;
            }
        }
        int i6 = i * 60;
        int i7 = i2 * 60;
        int i8 = i3 * 60;
        int i9 = i4 * 60;
        int i10 = ((sleepBean.et - sleepBean.st) / 60) % 20;
        String str = sleepBean.deviceAddress;
        Intrinsics.checkNotNullExpressionValue(str, "sleepBean.deviceAddress");
        String y_m_d = new DateUtil(sleepBean.et, true).getY_M_D();
        Intrinsics.checkNotNullExpressionValue(y_m_d, "DateUtil(sleepBean.et.toLong(), true).y_M_D");
        this.sleepTotalDao.insert(new SleepTotalHistory(str, y_m_d, i6 + i7 + i8 + i9, i6, i7, i9, i8, sleepBean.st, sleepBean.et, (int) new DateUtil(sleepBean.et, true).getZeroTime()));
    }

    /* compiled from: SleepDetailRepository.kt */
    @Metadata(d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002R\u001b\u0010\u0003\u001a\u00020\u00048FX\u0086\u0084\u0002¢\u0006\f\n\u0004\b\u0007\u0010\b\u001a\u0004\b\u0005\u0010\u0006¨\u0006\t"}, d2 = {"Lcom/qcwireless/qcwatch/ui/base/repository/healthy/SleepDetailRepository$Companion;", "", "()V", "getInstance", "Lcom/qcwireless/qcwatch/ui/base/repository/healthy/SleepDetailRepository;", "getGetInstance", "()Lcom/qcwireless/qcwatch/ui/base/repository/healthy/SleepDetailRepository;", "getInstance$delegate", "Lkotlin/Lazy;", "app_qwatch_proRelease"}, k = 1, mv = {1, 6, 0}, xi = 48)
    public static final class Companion {
        public /* synthetic */ Companion(DefaultConstructorMarker defaultConstructorMarker) {
            this();
        }

        private Companion() {
        }

        public final SleepDetailRepository getGetInstance() {
            return (SleepDetailRepository) SleepDetailRepository.getInstance$delegate.getValue();
        }
    }
}
        }

        public void setD(int i) {
            this.d = i;
        }

        public int getT() {
            return this.t;
        }

        public void setT(int i) {
            this.t = i;
        }

        public String toString() {
            return "DetailBean{d=" + this.d + ", t=" + this.t + '}';
        }
    }

    public String toString() {
        return "SleepNewProtoResp{st=" + this.st + ", et=" + this.et + ", list=" + this.list + '}';
    }
}
        }
    }

    public String toString() {
        return "SleepNewProtoResp{st=" + this.st + ", et=" + this.et + ", list=" + this.list + '}';
    }
}

    public ArrayList<BleSleepDetails> getBleSleepDetailses() {
        return this.bleSleepDetailses;
    }

    public String toString() {
        return "ReadSleepDetailsRsp{status=" + this.status + ", bleSleepDetailses=" + this.bleSleepDetailses + ", index=" + this.index + '}';
    }
}
    @Override // com.oudmon.ble.base.communication.req.BaseReqCmd
    protected byte[] getSubData() {
        return this.data;
    }
}

    public void setTimeIndex(int i) {
        this.timeIndex = i;
    }

    public int[] getSleepQualities() {
        return this.sleepQualities;
    }

    public void setSleepQualities(int[] iArr) {
        this.sleepQualities = iArr;
    }

    public String toString() {
        return "BleSleepDetails{year=" + this.year + ", month=" + this.month + ", day=" + this.day + ", timeIndex=" + this.timeIndex + ", sleepQualities=" + Arrays.toString(this.sleepQualities) + '}';
    }
}
    }

    public int getRequestedDataType() {
        return this.zzb;
    }

    public int hashCode() {
        return Objects.hashCode(this.zza, Integer.valueOf(this.zzb));
    }

    @Override // android.os.Parcelable
    public void writeToParcel(Parcel parcel, int i) {
        Preconditions.checkNotNull(parcel);
        int iBeginObjectHeader = SafeParcelWriter.beginObjectHeader(parcel);
        SafeParcelWriter.writeTypedList(parcel, 1, this.zza, false);
        SafeParcelWriter.writeInt(parcel, 2, getRequestedDataType());
        SafeParcelWriter.finishObjectHeader(parcel, iBeginObjectHeader);
    }

    public SleepSegmentRequest(List list, int i) {
        this.zza = list;
        this.zzb = i;
    }
}
package com.oudmon.ble.base.communication;

import com.oudmon.ble.base.communication.rsp.SleepNewProtoResp;

/* loaded from: classes3.dex */
public interface ILargeDataSleepResponse {
    void sleepData(SleepNewProtoResp sleepNewProtoResp);
}